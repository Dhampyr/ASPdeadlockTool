/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:217
 * @production IfExp : {@link PureExp} ::= <span class="component">CondExp:{@link PureExp}</span> <span class="component">ThenExp:{@link PureExp}</span> <span class="component">ElseExp:{@link PureExp}</span>;

 */
public class IfExp extends PureExp implements Cloneable {
  /**
   * @aspect GenerateErlang
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/erlang/GenerateErlang.jadd:426
   */
  @Override
  public void generateErlangCode(ErlangCodeStream ecs,Vars vars){
    ecs.print("case ");
    getCondExp().generateErlangCode(ecs,vars);
    ecs.println(" of");
    ecs.incIndent();
    ecs.print("true -> ");
    getThenExp().generateErlangCode(ecs,vars);
    ecs.println(";");
    ecs.print("false -> ");
    getElseExp().generateErlangCode(ecs,vars);
    ecs.println();
    ecs.decIndent();
    ecs.print("end");
  }
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:633
   */
  public void generateJava(PrintStream stream) {
        getCondExp().generateJava(stream);
        stream.print(".toBoolean() ? ");
        getThenExp().generateJava(stream);
        stream.print(" : ");
        getElseExp().generateJava(stream);
    }
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:647
   */
  public void generateJavaDynamic(PrintStream stream) {
        getCondExp().generateJavaDynamic(stream);
        stream.print(".toBoolean() ? ");
        getThenExp().generateJavaDynamic(stream);
        stream.print(" : ");
        getElseExp().generateJavaDynamic(stream);
    }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:463
   */
  public void generateMaude(PrintStream stream) {
        stream.print("if ");
        getCondExp().generateMaude(stream);
        stream.print("th ");
        getThenExp().generateMaude(stream);
        stream.print("el ");
        getElseExp().generateMaude(stream);
        stream.print("fi ");
    }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:472
   */
  public int numberOfRandom(Set<String> visitedFunctions) {
        return getCondExp().numberOfRandom(visitedFunctions)
            + java.lang.Math.max(getThenExp().numberOfRandom(visitedFunctions),
                                 getElseExp().numberOfRandom(visitedFunctions));
    }
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:1042
   */
  public void doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("if ");
        getCondExp().doPrettyPrint(stream, formatter);
        stream.print(" then ");
        getThenExp().doPrettyPrint(stream, formatter);
        stream.print(" else ");
        getElseExp().doPrettyPrint(stream, formatter);
    }
  /**
   * @aspect GenerateProlog
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prolog/GenerateProlog.jadd:392
   */
  public void generateProlog(PrintStream s,ReachabilityInformation reachInfo){
        // an if expr is compiled into a case with two branches (with 'True' and 'False')
        s.print("case(");
        getCondExp().generateProlog(s,reachInfo);
        s.print(",[branch('True',");
        getThenExp().generateProlog(s,reachInfo);
        s.print("),branch('False',");
        getElseExp().generateProlog(s,reachInfo);
        s.print(")])");
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:111
   */
  public IfExp parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:786
   */
  public void refined_TypeChecker_IfExp_typeCheck(SemanticErrorList e) {
        getCondExp().typeCheck(e);
        getCondExp().assertHasType(e,getModel().getBoolType());
        getThenExp().typeCheck(e);
        getElseExp().typeCheck(e);
        Type tt = getThenExp().getType();
        Type et = getElseExp().getType();
        if (!et.isAssignable(tt)) {
            e.add(new TypeError(this, ErrorMessage.IF_DIFFERENT_TYPE, tt, et));
        }
    }
  /**
   * @declaredat ASTNode:1
   */
  public IfExp() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[3];
  }
  /**
   * @declaredat ASTNode:13
   */
  public IfExp(PureExp p0, PureExp p1, PureExp p2) {
    setChild(p0, 0);
    setChild(p1, 1);
    setChild(p2, 2);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:21
   */
  protected int numChildren() {
    return 3;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:27
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:33
   */
  public void flushCache() {
    super.flushCache();
    getFreeVars_visited = -1;
    getFreeVars_computed = false;
    getFreeVars_value = null;
    getFields_FieldUseInfo_visited = null;
    getFields_FieldUseInfo_values = null;
    getType_visited = -1;
    getType_computed = false;
    getType_value = null;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:47
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:53
   */
  public IfExp clone() throws CloneNotSupportedException {
    IfExp node = (IfExp) super.clone();
    node.getFreeVars_visited = -1;
    node.getFreeVars_computed = false;
    node.getFreeVars_value = null;
    node.getFields_FieldUseInfo_visited = null;
    node.getFields_FieldUseInfo_values = null;
    node.getType_visited = -1;
    node.getType_computed = false;
    node.getType_value = null;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:70
   */
  public IfExp copy() {
    try {
      IfExp node = (IfExp) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:88
   */
  public IfExp fullCopy() {
    IfExp tree = (IfExp) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the CondExp child.
   * @param node The new node to replace the CondExp child.
   * @apilevel high-level
   */
  public void setCondExp(PureExp node) {
    setChild(node, 0);
  }
  /**
   * Retrieves the CondExp child.
   * @return The current node used as the CondExp child.
   * @apilevel high-level
   */
  public PureExp getCondExp() {
    return (PureExp) getChild(0);
  }
  /**
   * Retrieves the CondExp child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the CondExp child.
   * @apilevel low-level
   */
  public PureExp getCondExpNoTransform() {
    return (PureExp) getChildNoTransform(0);
  }
  /**
   * Replaces the ThenExp child.
   * @param node The new node to replace the ThenExp child.
   * @apilevel high-level
   */
  public void setThenExp(PureExp node) {
    setChild(node, 1);
  }
  /**
   * Retrieves the ThenExp child.
   * @return The current node used as the ThenExp child.
   * @apilevel high-level
   */
  public PureExp getThenExp() {
    return (PureExp) getChild(1);
  }
  /**
   * Retrieves the ThenExp child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the ThenExp child.
   * @apilevel low-level
   */
  public PureExp getThenExpNoTransform() {
    return (PureExp) getChildNoTransform(1);
  }
  /**
   * Replaces the ElseExp child.
   * @param node The new node to replace the ElseExp child.
   * @apilevel high-level
   */
  public void setElseExp(PureExp node) {
    setChild(node, 2);
  }
  /**
   * Retrieves the ElseExp child.
   * @return The current node used as the ElseExp child.
   * @apilevel high-level
   */
  public PureExp getElseExp() {
    return (PureExp) getChild(2);
  }
  /**
   * Retrieves the ElseExp child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the ElseExp child.
   * @apilevel low-level
   */
  public PureExp getElseExpNoTransform() {
    return (PureExp) getChildNoTransform(2);
  }
  /**
   * @aspect TypeCheckerExtension
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/ext/TypeCheckerExtension.jadd:293
   */
    public void typeCheck(SemanticErrorList e) {  
        int size = e.size();
        refined_TypeChecker_IfExp_typeCheck(e);
        if (e.size() > size) return;

        getModel().getTypeExt().checkIfExp(this);
   }
  /**
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:221
   */
  private Type refined_Typing_IfExp_getType()
{
        if (getThenExp().getType().isRatType()
            || getElseExp().getType().isRatType()) {
            // special case: Rat is assignable to Int, so we would
            // sometimes return Int instead of Rat as the type of an IfExp.
            return getModel().getRatType();
        } else {
            Type mostGeneralType = getThenExp().getType();
            if (mostGeneralType.isAssignable(getElseExp().getType())) {
                mostGeneralType = getElseExp().getType();
            }
            return mostGeneralType;
        }
    }
  /**
   * @apilevel internal
   */
  protected int getFreeVars_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getFreeVars_computed = false;
  /**
   * @apilevel internal
   */
  protected Set<String> getFreeVars_value;
  /**
   * @attribute syn
   * @aspect VarUsage
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/FreeVars.jrag:33
   */
  public Set<String> getFreeVars() {
    if(getFreeVars_computed) {
      return getFreeVars_value;
    }
    ASTNode$State state = state();
    if (getFreeVars_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getFreeVars in class: org.jastadd.ast.AST.SynDecl");
    }
    getFreeVars_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getFreeVars_value = getFreeVars_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getFreeVars_computed = true;
    } else {
    }

    getFreeVars_visited = -1;
    return getFreeVars_value;
  }
  /**
   * @apilevel internal
   */
  private Set<String> getFreeVars_compute() {
          HashSet<String> res = new HashSet<String>();
          res.addAll(getCondExp().getFreeVars());
          res.addAll(getThenExp().getFreeVars());
          res.addAll(getElseExp().getFreeVars());
          return res;             
      }
  /**
   * @apilevel internal
   */
  protected java.util.Map getFields_FieldUseInfo_visited;
  protected java.util.Map getFields_FieldUseInfo_values;
  /**
   * @attribute syn
   * @aspect FieldUsage
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/FieldAccesses.jrag:99
   */
  public FieldUseInfo getFields(FieldUseInfo fui) {
    Object _parameters = fui;
    if(getFields_FieldUseInfo_visited == null) getFields_FieldUseInfo_visited = new java.util.HashMap(4);
    if(getFields_FieldUseInfo_values == null) getFields_FieldUseInfo_values = new java.util.HashMap(4);
    if(getFields_FieldUseInfo_values.containsKey(_parameters)) {
      return (FieldUseInfo)getFields_FieldUseInfo_values.get(_parameters);
    }
    ASTNode$State state = state();
    if (Integer.valueOf(state().boundariesCrossed).equals(getFields_FieldUseInfo_visited.get(_parameters))) {
      throw new RuntimeException("Circular definition of attr: getFields in class: org.jastadd.ast.AST.SynDecl");
    }
    getFields_FieldUseInfo_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    FieldUseInfo getFields_FieldUseInfo_value = getFields_compute(fui);
    if(isFinal && num == state().boundariesCrossed) {
      getFields_FieldUseInfo_values.put(_parameters, getFields_FieldUseInfo_value);
    } else {
    }

    getFields_FieldUseInfo_visited.remove(_parameters);
    return getFields_FieldUseInfo_value;
  }
  /**
   * @apilevel internal
   */
  private FieldUseInfo getFields_compute(FieldUseInfo fui) {
  		fui.merge(getCondExp());
  		fui.merge(getThenExp());
  		return new FieldUseInfo(fui.merge(getElseExp()));
  	}
  /**
   * @apilevel internal
   */
  protected int getType_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getType_computed = false;
  /**
   * @apilevel internal
   */
  protected Type getType_value;
  /**
   * @attribute syn
   * @aspect TypeCheckerExtension
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/ext/TypeCheckerExtension.jadd:100
   */
  public Type getType() {
    if(getType_computed) {
      return getType_value;
    }
    ASTNode$State state = state();
    if (getType_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getType in class: org.jastadd.ast.AST.SynDecl");
    }
    getType_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getType_value = getType_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getType_computed = true;
    } else {
    }

    getType_visited = -1;
    return getType_value;
  }
  /**
   * @apilevel internal
   */
  private Type getType_compute() {
          Type t = refined_Typing_IfExp_getType().fullCopy();
          getModel().getTypeExt().annotateType(t, this);
          return t;
      }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
