/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/mTVL.ast:97
 * @production FAVar : {@link Variable} ::= <span class="component">&lt;FName:String&gt;</span> <span class="component">&lt;AName:String&gt;</span>;

 */
public class FAVar extends Variable implements Cloneable {
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:84
   */
  public FAVar parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @declaredat ASTNode:1
   */
  public FAVar() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
  }
  /**
   * @declaredat ASTNode:12
   */
  public FAVar(String p0, String p1) {
    setFName(p0);
    setAName(p1);
  }
  /**
   * @declaredat ASTNode:16
   */
  public FAVar(beaver.Symbol p0, beaver.Symbol p1) {
    setFName(p0);
    setAName(p1);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:23
   */
  protected int numChildren() {
    return 0;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:29
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:35
   */
  public void flushCache() {
    super.flushCache();
    getFullName_visited = -1;
    isBool_visited = -1;
    isInt_visited = -1;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:44
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:50
   */
  public FAVar clone() throws CloneNotSupportedException {
    FAVar node = (FAVar) super.clone();
    node.getFullName_visited = -1;
    node.isBool_visited = -1;
    node.isInt_visited = -1;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:62
   */
  public FAVar copy() {
    try {
      FAVar node = (FAVar) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:80
   */
  public FAVar fullCopy() {
    FAVar tree = (FAVar) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the lexeme FName.
   * @param value The new value for the lexeme FName.
   * @apilevel high-level
   */
  public void setFName(String value) {
    tokenString_FName = value;
  }
  /**
   * @apilevel internal
   */
  protected String tokenString_FName;
  /**
   */
  public int FNamestart;
  /**
   */
  public int FNameend;
  /**
   * JastAdd-internal setter for lexeme FName using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme FName
   * @apilevel internal
   */
  public void setFName(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setFName is only valid for String lexemes");
    tokenString_FName = (String)symbol.value;
    FNamestart = symbol.getStart();
    FNameend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme FName.
   * @return The value for the lexeme FName.
   * @apilevel high-level
   */
  public String getFName() {
    return tokenString_FName != null ? tokenString_FName : "";
  }
  /**
   * Replaces the lexeme AName.
   * @param value The new value for the lexeme AName.
   * @apilevel high-level
   */
  public void setAName(String value) {
    tokenString_AName = value;
  }
  /**
   * @apilevel internal
   */
  protected String tokenString_AName;
  /**
   */
  public int ANamestart;
  /**
   */
  public int ANameend;
  /**
   * JastAdd-internal setter for lexeme AName using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme AName
   * @apilevel internal
   */
  public void setAName(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setAName is only valid for String lexemes");
    tokenString_AName = (String)symbol.value;
    ANamestart = symbol.getStart();
    ANameend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme AName.
   * @return The value for the lexeme AName.
   * @apilevel high-level
   */
  public String getAName() {
    return tokenString_AName != null ? tokenString_AName : "";
  }
  /**
   * @apilevel internal
   */
  protected int getFullName_visited = -1;
  /**
   * @attribute syn
   * @aspect Variables
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/mtvl/Variables.jrag:37
   */
  public String getFullName() {
    ASTNode$State state = state();
    if (getFullName_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getFullName in class: org.jastadd.ast.AST.SynDecl");
    }
    getFullName_visited = state().boundariesCrossed;
    try {  return getFName()+"."+getAName();  }
    finally {
      getFullName_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int isBool_visited = -1;
  /**
   * @attribute syn
   * @aspect Variables
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/mtvl/Variables.jrag:44
   */
  public boolean isBool() {
    ASTNode$State state = state();
    if (isBool_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isBool in class: org.jastadd.ast.AST.SynDecl");
    }
    isBool_visited = state().boundariesCrossed;
    try {  return ((Model)calcContextNode(Model.class)).bools().contains(getFullName());  }
    finally {
      isBool_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int isInt_visited = -1;
  /**
   * @attribute syn
   * @aspect Variables
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/mtvl/Variables.jrag:49
   */
  public boolean isInt() {
    ASTNode$State state = state();
    if (isInt_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isInt in class: org.jastadd.ast.AST.SynDecl");
    }
    isInt_visited = state().boundariesCrossed;
    try {  return ((Model)calcContextNode(Model.class)).ints().containsKey(getFullName());  }
    finally {
      isInt_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
