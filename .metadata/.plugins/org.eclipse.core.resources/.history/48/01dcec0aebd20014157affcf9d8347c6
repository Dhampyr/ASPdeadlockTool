/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:104
 * @production ObjectUpdate : {@link ASTNode} ::= <span class="component">&lt;ClassName:String&gt;</span> <span class="component">{@link AwaitStmt}</span> <span class="component">{@link UpdatePreamble}</span> <span class="component">PreBody:{@link AssignStmt}*</span> <span class="component">PostBody:{@link AssignStmt}*</span>;

 */
public class ObjectUpdate extends ASTNode<ASTNode> implements Cloneable {
  /**
   * @aspect TypeCheckProductline
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:1091
   */
  protected void typeCheck(SemanticErrorList e) {
        // TODO
    }
  /**
   * @declaredat ASTNode:1
   */
  public ObjectUpdate() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[4];
    setChild(new List(), 2);
    setChild(new List(), 3);
  }
  /**
   * @declaredat ASTNode:15
   */
  public ObjectUpdate(String p0, AwaitStmt p1, UpdatePreamble p2, List<AssignStmt> p3, List<AssignStmt> p4) {
    setClassName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
    setChild(p3, 2);
    setChild(p4, 3);
  }
  /**
   * @declaredat ASTNode:22
   */
  public ObjectUpdate(beaver.Symbol p0, AwaitStmt p1, UpdatePreamble p2, List<AssignStmt> p3, List<AssignStmt> p4) {
    setClassName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
    setChild(p3, 2);
    setChild(p4, 3);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:32
   */
  protected int numChildren() {
    return 4;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:38
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:44
   */
  public void flushCache() {
    super.flushCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:50
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:56
   */
  public ObjectUpdate clone() throws CloneNotSupportedException {
    ObjectUpdate node = (ObjectUpdate) super.clone();
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:65
   */
  public ObjectUpdate copy() {
    try {
      ObjectUpdate node = (ObjectUpdate) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:83
   */
  public ObjectUpdate fullCopy() {
    ObjectUpdate tree = (ObjectUpdate) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the lexeme ClassName.
   * @param value The new value for the lexeme ClassName.
   * @apilevel high-level
   */
  public void setClassName(String value) {
    tokenString_ClassName = value;
  }
  /**
   * @apilevel internal
   */
  protected String tokenString_ClassName;
  /**
   */
  public int ClassNamestart;
  /**
   */
  public int ClassNameend;
  /**
   * JastAdd-internal setter for lexeme ClassName using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme ClassName
   * @apilevel internal
   */
  public void setClassName(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setClassName is only valid for String lexemes");
    tokenString_ClassName = (String)symbol.value;
    ClassNamestart = symbol.getStart();
    ClassNameend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme ClassName.
   * @return The value for the lexeme ClassName.
   * @apilevel high-level
   */
  public String getClassName() {
    return tokenString_ClassName != null ? tokenString_ClassName : "";
  }
  /**
   * Replaces the AwaitStmt child.
   * @param node The new node to replace the AwaitStmt child.
   * @apilevel high-level
   */
  public void setAwaitStmt(AwaitStmt node) {
    setChild(node, 0);
  }
  /**
   * Retrieves the AwaitStmt child.
   * @return The current node used as the AwaitStmt child.
   * @apilevel high-level
   */
  public AwaitStmt getAwaitStmt() {
    return (AwaitStmt) getChild(0);
  }
  /**
   * Retrieves the AwaitStmt child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the AwaitStmt child.
   * @apilevel low-level
   */
  public AwaitStmt getAwaitStmtNoTransform() {
    return (AwaitStmt) getChildNoTransform(0);
  }
  /**
   * Replaces the UpdatePreamble child.
   * @param node The new node to replace the UpdatePreamble child.
   * @apilevel high-level
   */
  public void setUpdatePreamble(UpdatePreamble node) {
    setChild(node, 1);
  }
  /**
   * Retrieves the UpdatePreamble child.
   * @return The current node used as the UpdatePreamble child.
   * @apilevel high-level
   */
  public UpdatePreamble getUpdatePreamble() {
    return (UpdatePreamble) getChild(1);
  }
  /**
   * Retrieves the UpdatePreamble child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the UpdatePreamble child.
   * @apilevel low-level
   */
  public UpdatePreamble getUpdatePreambleNoTransform() {
    return (UpdatePreamble) getChildNoTransform(1);
  }
  /**
   * Replaces the PreBody list.
   * @param list The new list node to be used as the PreBody list.
   * @apilevel high-level
   */
  public void setPreBodyList(List<AssignStmt> list) {
    setChild(list, 2);
  }
  /**
   * Retrieves the number of children in the PreBody list.
   * @return Number of children in the PreBody list.
   * @apilevel high-level
   */
  public int getNumPreBody() {
    return getPreBodyList().getNumChild();
  }
  /**
   * Retrieves the number of children in the PreBody list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the PreBody list.
   * @apilevel low-level
   */
  public int getNumPreBodyNoTransform() {
    return getPreBodyListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the PreBody list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the PreBody list.
   * @apilevel high-level
   */
  public AssignStmt getPreBody(int i) {
    return (AssignStmt) getPreBodyList().getChild(i);
  }
  /**
   * Check whether the PreBody list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasPreBody() {
    return getPreBodyList().getNumChild() != 0;
  }
  /**
   * Append an element to the PreBody list.
   * @param node The element to append to the PreBody list.
   * @apilevel high-level
   */
  public void addPreBody(AssignStmt node) {
    List<AssignStmt> list = (parent == null || state == null) ? getPreBodyListNoTransform() : getPreBodyList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addPreBodyNoTransform(AssignStmt node) {
    List<AssignStmt> list = getPreBodyListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the PreBody list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setPreBody(AssignStmt node, int i) {
    List<AssignStmt> list = getPreBodyList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the PreBody list.
   * @return The node representing the PreBody list.
   * @apilevel high-level
   */
  public List<AssignStmt> getPreBodyList() {
    List<AssignStmt> list = (List<AssignStmt>) getChild(2);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the PreBody list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the PreBody list.
   * @apilevel low-level
   */
  public List<AssignStmt> getPreBodyListNoTransform() {
    return (List<AssignStmt>) getChildNoTransform(2);
  }
  /**
   * Retrieves the PreBody list.
   * @return The node representing the PreBody list.
   * @apilevel high-level
   */
  public List<AssignStmt> getPreBodys() {
    return getPreBodyList();
  }
  /**
   * Retrieves the PreBody list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the PreBody list.
   * @apilevel low-level
   */
  public List<AssignStmt> getPreBodysNoTransform() {
    return getPreBodyListNoTransform();
  }
  /**
   * Replaces the PostBody list.
   * @param list The new list node to be used as the PostBody list.
   * @apilevel high-level
   */
  public void setPostBodyList(List<AssignStmt> list) {
    setChild(list, 3);
  }
  /**
   * Retrieves the number of children in the PostBody list.
   * @return Number of children in the PostBody list.
   * @apilevel high-level
   */
  public int getNumPostBody() {
    return getPostBodyList().getNumChild();
  }
  /**
   * Retrieves the number of children in the PostBody list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the PostBody list.
   * @apilevel low-level
   */
  public int getNumPostBodyNoTransform() {
    return getPostBodyListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the PostBody list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the PostBody list.
   * @apilevel high-level
   */
  public AssignStmt getPostBody(int i) {
    return (AssignStmt) getPostBodyList().getChild(i);
  }
  /**
   * Check whether the PostBody list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasPostBody() {
    return getPostBodyList().getNumChild() != 0;
  }
  /**
   * Append an element to the PostBody list.
   * @param node The element to append to the PostBody list.
   * @apilevel high-level
   */
  public void addPostBody(AssignStmt node) {
    List<AssignStmt> list = (parent == null || state == null) ? getPostBodyListNoTransform() : getPostBodyList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addPostBodyNoTransform(AssignStmt node) {
    List<AssignStmt> list = getPostBodyListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the PostBody list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setPostBody(AssignStmt node, int i) {
    List<AssignStmt> list = getPostBodyList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the PostBody list.
   * @return The node representing the PostBody list.
   * @apilevel high-level
   */
  public List<AssignStmt> getPostBodyList() {
    List<AssignStmt> list = (List<AssignStmt>) getChild(3);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the PostBody list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the PostBody list.
   * @apilevel low-level
   */
  public List<AssignStmt> getPostBodyListNoTransform() {
    return (List<AssignStmt>) getChildNoTransform(3);
  }
  /**
   * Retrieves the PostBody list.
   * @return The node representing the PostBody list.
   * @apilevel high-level
   */
  public List<AssignStmt> getPostBodys() {
    return getPostBodyList();
  }
  /**
   * Retrieves the PostBody list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the PostBody list.
   * @apilevel low-level
   */
  public List<AssignStmt> getPostBodysNoTransform() {
    return getPostBodyListNoTransform();
  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
