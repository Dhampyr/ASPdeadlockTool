package asp.analyzer;


import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.HashMap;
import java.util.LinkedList;

import org.antlr.v4.runtime.ANTLRInputStream;
import org.antlr.v4.runtime.CommonTokenStream;
import org.antlr.v4.runtime.tree.ParseTree;
import org.antlr.v4.runtime.tree.ParseTreeWalker;

import asp.models.ClassDecl;
import asp.models.Program;
import asp.parser.ASPLexer;
import asp.parser.ASPParser;
import asp.parser.ASPParser.ProgramContext;


public class Translator {
	
	public static void main(String[] args) throws Exception {
		
		//Setting
		InputStream is = System.in;
		is = new FileInputStream("src/input.txt");
		ANTLRInputStream input = new ANTLRInputStream(is);
		ASPLexer lexer = new ASPLexer(input);
		CommonTokenStream tokens = new CommonTokenStream(lexer);
		ASPParser parser = new ASPParser(tokens);
		parser.setBuildParseTree(true);
		FileOutputStream trad = new FileOutputStream("src/trad.abs"); 
		FileOutputStream log = new FileOutputStream("src/log.abs");
		FileOutputStream env = new FileOutputStream("src/env.abs");
		
		//PARSING
		ParseTree tree = parser.program();
		Program program = (Program) tree.getParent();
//		Program program = parser.program().prog;
	    
	    //PRINT ENVIRONMENT
	    System.setOut(new PrintStream(env));
	    print(parser.classTable);
	    
	    //PRINT LOG
	    System.setOut(new PrintStream(log));
	    if(program != null)
	    	program.print();
	    else 
	    	System.out.println("Program = null");
	    
	    //TRAD
	    System.setOut(new PrintStream(trad));
	    translate(tree);

	}
	
	public static void print(HashMap<String, ClassDecl> classSpec){
		System.out.println("Il programma ha le classi:");
		for (String key: classSpec.keySet()){
            ClassDecl cl = classSpec.get(key);  
            cl.print();  
		} 
	}
	
	public static void translate(ParseTree tree)
	{
		// Create a generic parse tree walker that can trigger callbacks
		ParseTreeWalker walker = new ParseTreeWalker();
		// Walk the tree created during the parse, trigger callbacks
		walker.walk(new AspToAbs(), tree);
		System.out.println(); // print a \n after translation
	}
	
	
}