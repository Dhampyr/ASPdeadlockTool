/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:38
 * @production FunctionDecl : {@link BehaviorDecl} ::= <span class="component">{@link Annotation}*</span> <span class="component">{@link TypeUse}</span> <span class="component">Param:{@link ParamDecl}*</span> <span class="component">{@link FunctionDef}</span>;

 */
public class FunctionDecl extends BehaviorDecl implements Cloneable, HasParams {
  /**
   * @aspect GenerateErlang
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/erlang/GenerateErlang.jadd:53
   */
  @Override
  public void generateErlangCode(ErlApp ea) throws IOException{
    ErlangCodeStream ecs= ea.getFunStream(moduleName());
    ErlUtil.functionHeader(ecs,"f_"+getName(),"Cog=#cog{ref=CogRef}",getParams());
    boolean needTrunc=getType().isIntType() && getFunctionDef() instanceof ExpFunctionDef
        && ((ExpFunctionDef) getFunctionDef()).getRhs().getType().isRatType();
    if (needTrunc) {
      ecs.print("rationals:trunc(");
    }
    Vars vars = Vars.n(getParams());
    ErlUtil.stopWorldPrelude(ecs, vars, true);
    getFunctionDef().generateErlangCode(ecs,vars);
    if (needTrunc) {
      ecs.print(")");
    }
    ecs.println(".");
    ecs.decIndent();
    ecs.println();
  }
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:266
   */
  public void generateJava(PrintStream stream) {
        if (getFunctionDef() instanceof BuiltinFunctionDef)
            return;

        boolean needsTruncate = getType().isIntType()
            && getFunctionDef() instanceof ExpFunctionDef
            && ((ExpFunctionDef) getFunctionDef()).getRhs().getType().isRatType() ;

        JavaGeneratorHelper.generateHelpLine(this,stream);

        String className = JavaBackend.getFunctionName(getName());
        stream.print("public final class " + className);
        stream.println(" implements " + ABSFunction.class.getName() + " {");
        stream.println("private " + className + "() { }");
        stream.print("public static ");
        JavaGeneratorHelper.generateTypeParameters(stream,this, true);

        getTypeUse().generateJava(stream);
        stream.print(" apply");
        JavaGeneratorHelper.generateParams(stream,getParams());
        stream.println(" {");
        stream.print("return (");
        getFunctionDef().generateJava(stream);
        stream.print(")");
        if (needsTruncate) {
            stream.print(".truncate()");
        }
        stream.println(";");
        stream.println("}");
        stream.println("}");
    }
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:307
   */
  public void generateJavaDynamic(PrintStream stream) {
        if (getFunctionDef() instanceof BuiltinFunctionDef)
            return;

        DynamicJavaGeneratorHelper.generateHelpLine(this, stream);

        String className = JavaBackend.getFunctionName(getName());
        stream.print("public final class " + className);
        stream.println(" implements " + ABSFunction.class.getName() + " {");
        stream.println("private " + className + "() { }");
        stream.print("public static ");
        DynamicJavaGeneratorHelper.generateTypeParameters(stream, this, true);

        getTypeUse().generateJavaDynamic(stream);
        stream.print(" apply");
        DynamicJavaGeneratorHelper.generateParams(stream, getParams());
        stream.println(" {");
        stream.print("return ");
        getFunctionDef().generateJavaDynamic(stream);
        if (getType().isIntType() && getFunctionDef() instanceof ExpFunctionDef
            && ((ExpFunctionDef) getFunctionDef()).getRhs().getType().isRatType()) {
            stream.print(".truncate()");
        }
        stream.println(";");
        stream.println("}");
        stream.println("}");
    }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:92
   */
  public void generateMaude(PrintStream stream) {
		boolean inList = false;
        if (getFunctionDef() instanceof BuiltinFunctionDef) return;
        stream.print("eq fparams(\"" + qualifiedName() + "\") = ");
        if (getNumParam() == 0) {
            stream.println("noVid .");
        } else {
            for (VarOrFieldDecl param : getParams()) {
                if (inList == false) inList = true; else stream.print(", ");
                stream.print("'" + param.getName() + " ");
            }
            stream.print(".\n");
        }
		stream.print("eq fdefn(\"" + qualifiedName() + "\") = ");
		getFunctionDef().generateMaude(stream);
        stream.println(".");
        stream.println();
	}
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:460
   */
  private boolean isSelector() {
    	for (Annotation a : getAnnotationList()) {
            if (! (a.getValue() instanceof StringLiteral)) {
                continue;
            }
              
            StringLiteral sl = (StringLiteral) a.getValue();
            if (abs.frontend.parser.ASTPreProcessor.FUNCTIONSELECTOR.equals(sl.getContent())) {
                return true;
            }
        }
        return false;
    }
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:474
   */
  public void doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        if (isSelector()) {
        	//skip selector
        	return;
        }
    
        getAnnotationList().doPrettyPrint(stream, formatter, "");
        if (getNumAnnotation() > 0) {
            stream.println();
            formatter.afterStmt();
        }
        stream.print("def ");
        getTypeUse().doPrettyPrint(stream, formatter);
        stream.print(" ");
        stream.print(getName());
        doPrettyPrintTypeParam(stream, formatter);
        stream.print("(");
        getParamList().doPrettyPrint(stream, formatter, ",");
        stream.print(") = ");
        getFunctionDef().doPrettyPrint(stream, formatter);
        formatter.afterStmt();
    }
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:497
   */
  public void doPrettyPrintTypeParam(PrintWriter stream, ABSFormatter formatter) { }
  /**
   * @aspect GenerateProlog
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prolog/GenerateProlog.jadd:100
   */
  public void generateProlog(PrintStream s,ReachabilityInformation reachInfo){
      if(reachInfo==null || reachInfo.isReachable(this)){
	        s.print("def(" + quote(getName()) + ",");
	        getChild(1).generateProlog(s,reachInfo);
	        List<?> params = (List<?>) getChild(2);
	        int n = params.getNumChild();
	        s.print(",[");
	        for (int i = 0; i < n; i++){
	            params.getChild(i).generateProlog(s,reachInfo);
	            if (i != n-1) s.print(",");
	        }
	        s.print("],");
	        
	        List<Annotation> anns = getAnnotations();
	        n = anns.getNumChild();
	        s.print("[");
	        for (int i = 0; i < n; i++){
	            anns.getChild(i).generateProlog(s,reachInfo);
	            if (i != n-1) s.print(",");
	        }
	        s.print("],");
	        
	        getChild(3).generateProlog(s,reachInfo);
	        s.println(",[]).");
        }
    }
  /**
   * @aspect collectReachableCode
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prolog/collectReachableCode.jadd:17
   */
  public void collectReachableCode(ReachabilityInformation reachInfo){
        if(reachInfo.isReachable(this)){
            if(reachInfo.setProcessed(this)){
                super.collectReachableCode(reachInfo);
            }
        }
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:98
   */
  public FunctionDecl parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:315
   */
  public void refined_TypeChecker_FunctionDecl_typeCheck(SemanticErrorList e) {
        TypeCheckerHelper.typeCheckParamList(e,this);
        getTypeUse().typeCheck(e);
        if (getFunctionDef() instanceof ExpFunctionDef) {
            // built-in functions are assumed type-correct.
            ExpFunctionDef def = (ExpFunctionDef)getFunctionDef();
            def.getRhs().typeCheck(e);
            TypeCheckerHelper.checkAssignment(e,this,getTypeUse().getType(), def.getRhs());
        }
    }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:832
   */
  void typeCheckParams(SemanticErrorList e, FnApp fa) {
        fa.typeCheckEqualParams(e,this);
    }
  /**
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:394
   */
  public java.util.List<Type> getTypes()              { return TypeCheckerHelper.getTypes(getParams()); }
  /**
   * @declaredat ASTNode:1
   */
  public FunctionDecl() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[4];
    setChild(new List(), 0);
    setChild(new List(), 2);
  }
  /**
   * @declaredat ASTNode:15
   */
  public FunctionDecl(String p0, List<Annotation> p1, TypeUse p2, List<ParamDecl> p3, FunctionDef p4) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
    setChild(p3, 2);
    setChild(p4, 3);
  }
  /**
   * @declaredat ASTNode:22
   */
  public FunctionDecl(beaver.Symbol p0, List<Annotation> p1, TypeUse p2, List<ParamDecl> p3, FunctionDef p4) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
    setChild(p3, 2);
    setChild(p4, 3);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:32
   */
  protected int numChildren() {
    return 4;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:38
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:44
   */
  public void flushCache() {
    super.flushCache();
    locallookupVarOrFieldName_String_boolean_visited = null;
    locallookupVarOrFieldName_String_boolean_values = null;
    isFunction_visited = -1;
    getType_visited = -1;
    getType_computed = false;
    getType_value = null;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:56
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:62
   */
  public FunctionDecl clone() throws CloneNotSupportedException {
    FunctionDecl node = (FunctionDecl) super.clone();
    node.locallookupVarOrFieldName_String_boolean_visited = null;
    node.locallookupVarOrFieldName_String_boolean_values = null;
    node.isFunction_visited = -1;
    node.getType_visited = -1;
    node.getType_computed = false;
    node.getType_value = null;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:77
   */
  public FunctionDecl copy() {
    try {
      FunctionDecl node = (FunctionDecl) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:95
   */
  public FunctionDecl fullCopy() {
    FunctionDecl tree = (FunctionDecl) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the lexeme Name.
   * @param value The new value for the lexeme Name.
   * @apilevel high-level
   */
  public void setName(String value) {
    tokenString_Name = value;
  }
  /**
   * JastAdd-internal setter for lexeme Name using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme Name
   * @apilevel internal
   */
  public void setName(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setName is only valid for String lexemes");
    tokenString_Name = (String)symbol.value;
    Namestart = symbol.getStart();
    Nameend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme Name.
   * @return The value for the lexeme Name.
   * @apilevel high-level
   */
  public String getName() {
    return tokenString_Name != null ? tokenString_Name : "";
  }
  /**
   * Replaces the Annotation list.
   * @param list The new list node to be used as the Annotation list.
   * @apilevel high-level
   */
  public void setAnnotationList(List<Annotation> list) {
    setChild(list, 0);
  }
  /**
   * Retrieves the number of children in the Annotation list.
   * @return Number of children in the Annotation list.
   * @apilevel high-level
   */
  public int getNumAnnotation() {
    return getAnnotationList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Annotation list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Annotation list.
   * @apilevel low-level
   */
  public int getNumAnnotationNoTransform() {
    return getAnnotationListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Annotation list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Annotation list.
   * @apilevel high-level
   */
  public Annotation getAnnotation(int i) {
    return (Annotation) getAnnotationList().getChild(i);
  }
  /**
   * Check whether the Annotation list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasAnnotation() {
    return getAnnotationList().getNumChild() != 0;
  }
  /**
   * Append an element to the Annotation list.
   * @param node The element to append to the Annotation list.
   * @apilevel high-level
   */
  public void addAnnotation(Annotation node) {
    List<Annotation> list = (parent == null || state == null) ? getAnnotationListNoTransform() : getAnnotationList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addAnnotationNoTransform(Annotation node) {
    List<Annotation> list = getAnnotationListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Annotation list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setAnnotation(Annotation node, int i) {
    List<Annotation> list = getAnnotationList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Annotation list.
   * @return The node representing the Annotation list.
   * @apilevel high-level
   */
  public List<Annotation> getAnnotationList() {
    List<Annotation> list = (List<Annotation>) getChild(0);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Annotation list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Annotation list.
   * @apilevel low-level
   */
  public List<Annotation> getAnnotationListNoTransform() {
    return (List<Annotation>) getChildNoTransform(0);
  }
  /**
   * Retrieves the Annotation list.
   * @return The node representing the Annotation list.
   * @apilevel high-level
   */
  public List<Annotation> getAnnotations() {
    return getAnnotationList();
  }
  /**
   * Retrieves the Annotation list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Annotation list.
   * @apilevel low-level
   */
  public List<Annotation> getAnnotationsNoTransform() {
    return getAnnotationListNoTransform();
  }
  /**
   * Replaces the TypeUse child.
   * @param node The new node to replace the TypeUse child.
   * @apilevel high-level
   */
  public void setTypeUse(TypeUse node) {
    setChild(node, 1);
  }
  /**
   * Retrieves the TypeUse child.
   * @return The current node used as the TypeUse child.
   * @apilevel high-level
   */
  public TypeUse getTypeUse() {
    return (TypeUse) getChild(1);
  }
  /**
   * Retrieves the TypeUse child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the TypeUse child.
   * @apilevel low-level
   */
  public TypeUse getTypeUseNoTransform() {
    return (TypeUse) getChildNoTransform(1);
  }
  /**
   * Replaces the Param list.
   * @param list The new list node to be used as the Param list.
   * @apilevel high-level
   */
  public void setParamList(List<ParamDecl> list) {
    setChild(list, 2);
  }
  /**
   * Retrieves the number of children in the Param list.
   * @return Number of children in the Param list.
   * @apilevel high-level
   */
  public int getNumParam() {
    return getParamList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Param list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Param list.
   * @apilevel low-level
   */
  public int getNumParamNoTransform() {
    return getParamListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Param list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Param list.
   * @apilevel high-level
   */
  public ParamDecl getParam(int i) {
    return (ParamDecl) getParamList().getChild(i);
  }
  /**
   * Check whether the Param list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasParam() {
    return getParamList().getNumChild() != 0;
  }
  /**
   * Append an element to the Param list.
   * @param node The element to append to the Param list.
   * @apilevel high-level
   */
  public void addParam(ParamDecl node) {
    List<ParamDecl> list = (parent == null || state == null) ? getParamListNoTransform() : getParamList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addParamNoTransform(ParamDecl node) {
    List<ParamDecl> list = getParamListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Param list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setParam(ParamDecl node, int i) {
    List<ParamDecl> list = getParamList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Param list.
   * @return The node representing the Param list.
   * @apilevel high-level
   */
  public List<ParamDecl> getParamList() {
    List<ParamDecl> list = (List<ParamDecl>) getChild(2);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Param list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Param list.
   * @apilevel low-level
   */
  public List<ParamDecl> getParamListNoTransform() {
    return (List<ParamDecl>) getChildNoTransform(2);
  }
  /**
   * Retrieves the Param list.
   * @return The node representing the Param list.
   * @apilevel high-level
   */
  public List<ParamDecl> getParams() {
    return getParamList();
  }
  /**
   * Retrieves the Param list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Param list.
   * @apilevel low-level
   */
  public List<ParamDecl> getParamsNoTransform() {
    return getParamListNoTransform();
  }
  /**
   * Replaces the FunctionDef child.
   * @param node The new node to replace the FunctionDef child.
   * @apilevel high-level
   */
  public void setFunctionDef(FunctionDef node) {
    setChild(node, 3);
  }
  /**
   * Retrieves the FunctionDef child.
   * @return The current node used as the FunctionDef child.
   * @apilevel high-level
   */
  public FunctionDef getFunctionDef() {
    return (FunctionDef) getChild(3);
  }
  /**
   * Retrieves the FunctionDef child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the FunctionDef child.
   * @apilevel low-level
   */
  public FunctionDef getFunctionDefNoTransform() {
    return (FunctionDef) getChildNoTransform(3);
  }
  /**
   * @aspect TypeCheckerExtension
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/ext/TypeCheckerExtension.jadd:243
   */
    public void typeCheck(SemanticErrorList s) {
        int size = s.size();
        refined_TypeChecker_FunctionDecl_typeCheck(s);
        if (s.size() > size) return;
        
        if (getFunctionDef() instanceof ExpFunctionDef) {
            // built-in functions are assumed type-correct.
            ExpFunctionDef def = (ExpFunctionDef)getFunctionDef();
            def.getRhs().typeCheck(s);
            getModel().getTypeExt().checkAssignable(def.getRhs().getType(), getType(), this);
        }
    }
  /**
   * @apilevel internal
   */
  protected java.util.Map locallookupVarOrFieldName_String_boolean_visited;
  protected java.util.Map locallookupVarOrFieldName_String_boolean_values;
  /**
   * @attribute syn
   * @aspect VarResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/VarResolution.jrag:67
   */
  public VarOrFieldDecl locallookupVarOrFieldName(String name, boolean fieldOnly) {
    java.util.List _parameters = new java.util.ArrayList(2);
    _parameters.add(name);
    _parameters.add(Boolean.valueOf(fieldOnly));
    if(locallookupVarOrFieldName_String_boolean_visited == null) locallookupVarOrFieldName_String_boolean_visited = new java.util.HashMap(4);
    if(locallookupVarOrFieldName_String_boolean_values == null) locallookupVarOrFieldName_String_boolean_values = new java.util.HashMap(4);
    if(locallookupVarOrFieldName_String_boolean_values.containsKey(_parameters)) {
      return (VarOrFieldDecl)locallookupVarOrFieldName_String_boolean_values.get(_parameters);
    }
    ASTNode$State state = state();
    if (Integer.valueOf(state().boundariesCrossed).equals(locallookupVarOrFieldName_String_boolean_visited.get(_parameters))) {
      throw new RuntimeException("Circular definition of attr: locallookupVarOrFieldName in class: org.jastadd.ast.AST.SynDecl");
    }
    locallookupVarOrFieldName_String_boolean_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    VarOrFieldDecl locallookupVarOrFieldName_String_boolean_value = locallookupVarOrFieldName_compute(name, fieldOnly);
    if(isFinal && num == state().boundariesCrossed) {
      locallookupVarOrFieldName_String_boolean_values.put(_parameters, locallookupVarOrFieldName_String_boolean_value);
    } else {
    }

    locallookupVarOrFieldName_String_boolean_visited.remove(_parameters);
    return locallookupVarOrFieldName_String_boolean_value;
  }
  /**
   * @apilevel internal
   */
  private VarOrFieldDecl locallookupVarOrFieldName_compute(String name, boolean fieldOnly) {
          for (VarOrFieldDecl decl : getParams()) {
              if (decl.getName().equals(name))
                  return decl;
          }
          return null;
      }
  /**
   * @apilevel internal
   */
  protected int isFunction_visited = -1;
  /**
   * @attribute syn
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:13
   */
  public boolean isFunction() {
    ASTNode$State state = state();
    if (isFunction_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isFunction in class: org.jastadd.ast.AST.SynDecl");
    }
    isFunction_visited = state().boundariesCrossed;
    try {  return true;  }
    finally {
      isFunction_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int getType_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getType_computed = false;
  /**
   * @apilevel internal
   */
  protected Type getType_value;
  /**
   * @attribute syn
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:72
   */
  public Type getType() {
    if(getType_computed) {
      return getType_value;
    }
    ASTNode$State state = state();
    if (getType_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getType in class: org.jastadd.ast.AST.SynDecl");
    }
    getType_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getType_value = getType_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getType_computed = true;
    } else {
    }

    getType_visited = -1;
    return getType_value;
  }
  /**
   * @apilevel internal
   */
  private Type getType_compute() {  return getTypeUse().getType();  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
