/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/SQL.ast:29
 * @production SqlComparisonCondition : {@link SqlCondition} ::= <span class="component">Operand1:{@link SqlTupleScalarFunction}</span> <span class="component">{@link SqlComparisonRelation}</span> <span class="component">Operand2:{@link SqlTupleScalarFunction}</span>;

 */
public class SqlComparisonCondition extends SqlCondition implements Cloneable {
  /**
   * @aspect SqlRewrites
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/sql/SqlRewrites.jrag:99
   */
  public PureExp createDbSelectionConditionExp()
			throws abs.frontend.sql.SqlRewritingException {
	    return new DataConstructorExp(
	            Constants.DB_OPERATORS_STRUCTURE_LIB_NAME + ".ComparisonCondition",
	            new List<PureExp>().add(
	                    getOperand1().createDbTupleScalarFunctionExp()).add(
	                    getSqlComparisonRelation().createDbComparisonRelation()).add(
	                    getOperand2().createDbTupleScalarFunctionExp()));
	}
  /**
   * @declaredat ASTNode:1
   */
  public SqlComparisonCondition() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[3];
  }
  /**
   * @declaredat ASTNode:13
   */
  public SqlComparisonCondition(SqlTupleScalarFunction p0, SqlComparisonRelation p1, SqlTupleScalarFunction p2) {
    setChild(p0, 0);
    setChild(p1, 1);
    setChild(p2, 2);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:21
   */
  protected int numChildren() {
    return 3;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:27
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:33
   */
  public void flushCache() {
    super.flushCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:39
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:45
   */
  public SqlComparisonCondition clone() throws CloneNotSupportedException {
    SqlComparisonCondition node = (SqlComparisonCondition) super.clone();
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:54
   */
  public SqlComparisonCondition copy() {
    try {
      SqlComparisonCondition node = (SqlComparisonCondition) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:72
   */
  public SqlComparisonCondition fullCopy() {
    SqlComparisonCondition tree = (SqlComparisonCondition) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the Operand1 child.
   * @param node The new node to replace the Operand1 child.
   * @apilevel high-level
   */
  public void setOperand1(SqlTupleScalarFunction node) {
    setChild(node, 0);
  }
  /**
   * Retrieves the Operand1 child.
   * @return The current node used as the Operand1 child.
   * @apilevel high-level
   */
  public SqlTupleScalarFunction getOperand1() {
    return (SqlTupleScalarFunction) getChild(0);
  }
  /**
   * Retrieves the Operand1 child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the Operand1 child.
   * @apilevel low-level
   */
  public SqlTupleScalarFunction getOperand1NoTransform() {
    return (SqlTupleScalarFunction) getChildNoTransform(0);
  }
  /**
   * Replaces the SqlComparisonRelation child.
   * @param node The new node to replace the SqlComparisonRelation child.
   * @apilevel high-level
   */
  public void setSqlComparisonRelation(SqlComparisonRelation node) {
    setChild(node, 1);
  }
  /**
   * Retrieves the SqlComparisonRelation child.
   * @return The current node used as the SqlComparisonRelation child.
   * @apilevel high-level
   */
  public SqlComparisonRelation getSqlComparisonRelation() {
    return (SqlComparisonRelation) getChild(1);
  }
  /**
   * Retrieves the SqlComparisonRelation child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the SqlComparisonRelation child.
   * @apilevel low-level
   */
  public SqlComparisonRelation getSqlComparisonRelationNoTransform() {
    return (SqlComparisonRelation) getChildNoTransform(1);
  }
  /**
   * Replaces the Operand2 child.
   * @param node The new node to replace the Operand2 child.
   * @apilevel high-level
   */
  public void setOperand2(SqlTupleScalarFunction node) {
    setChild(node, 2);
  }
  /**
   * Retrieves the Operand2 child.
   * @return The current node used as the Operand2 child.
   * @apilevel high-level
   */
  public SqlTupleScalarFunction getOperand2() {
    return (SqlTupleScalarFunction) getChild(2);
  }
  /**
   * Retrieves the Operand2 child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the Operand2 child.
   * @apilevel low-level
   */
  public SqlTupleScalarFunction getOperand2NoTransform() {
    return (SqlTupleScalarFunction) getChildNoTransform(2);
  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
