/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:109
 * @production VarDecl : {@link TypedVarOrFieldDecl} ::= <span class="component">[InitExp:{@link Exp}]</span>;

 */
public class VarDecl extends TypedVarOrFieldDecl implements Cloneable {
  /**
   * @aspect GenerateErlang
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/erlang/GenerateErlang.jadd:187
   */
  public void generateErlangCode(ErlangCodeStream ecs,Vars vars) {
    if(getAccess() instanceof TypeParameterUse || getAccess() instanceof InterfaceTypeUse|| getAccess() instanceof DataTypeUse){
      StringWriter sw = new StringWriter();
      ErlangCodeStream buffer = new ErlangCodeStream(new WriterOutputStream(sw, Charset.forName("UTF-8")),ecs.getIndent());
      if(hasInitExp()){
        boolean needTrunc=getType().isIntType() && getInitExp().getType().isRatType();
        if (needTrunc)
          buffer.print("rationals:trunc(");
        getInitExp().generateErlangCode(buffer,vars);
        if (needTrunc)
          buffer.print(")");
        }
      else
        buffer.print("null");
      buffer.close();
      String varName = vars.nV(this);
      ecs.format("%s = %s", varName, sw.toString().substring(ecs.getIndent().length()));
      if (getType().isDeploymentComponentType() && getInitExp() instanceof NewExp) {
          ecs.println(",");
          ecs.format("eventstream:event({newdc, %s})", varName);
      }
    }
    else
      throw new NotImplementedYetException(this);
  }
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:363
   */
  public void generateJava(PrintStream stream) {
        getAccess().generateJava(stream);
        String name = JavaBackend.getVariableName(getName());
        stream.print(" " + name + " = ");

        if (hasInitExp()) {
            getInitExp().generateJava(stream);
            if (getType().isIntType() && getInitExp().getType().isRatType()) {
                stream.print(".truncate()");
            }
        } else {
            stream.print("null");
        }
        stream.println(";");

        stream.print("if (__ABS_getRuntime().debuggingEnabled()) ");
        stream.print("__ABS_getRuntime().getCurrentTask().setLocalVariable(\"" + getName() + "\"," + name + ");");
    }
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:400
   */
  public void generateJavaDynamic(PrintStream stream) {
        boolean castNeeded = !getAccess().getType().isReferenceType();
        if (getAccess().getType().isReferenceType()) {
            stream.print(ABSValue.class.getName());
//            stream.print(JavaBackend.getQualifiedString(getAccess().getType()));
        } else {
            getAccess().generateJavaDynamic(stream);
        }
        String name = JavaBackend.getVariableName(getName());
        stream.print(" " + name + " = ");

        if (castNeeded) {
            stream.print("(");
            getAccess().generateJavaDynamic(stream);
            stream.print(")(");
        }
        if (hasInitExp()) {
            getInitExp().generateJavaDynamic(stream);
            if (getType().isIntType() && getInitExp().getType().isRatType()) {
                stream.print(".truncate()");
            }
        } else {
            stream.print("null");
        }
        if (castNeeded) {
            stream.print(")");
        }
        stream.println(";");

        stream.print("if (thisP.__ABS_getRuntime().debuggingEnabled()) ");
        stream.println("thisP.__ABS_getRuntime().getCurrentTask().setLocalVariable(\"" + getName() + "\"," + name + ");");
    }
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:393
   */
  public void doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        getAccess().doPrettyPrint(stream, formatter);
        stream.print(" ");
        stream.print(getName());
        if (hasInitExp()) {
            stream.print(" = ");
            getInitExp().doPrettyPrint(stream, formatter);
        }
    }
  /**
   * @aspect GenerateProlog
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prolog/GenerateProlog.jadd:736
   */
  public void generateProlog(PrintStream s,ReachabilityInformation reachInfo){
        //generates varDecl(name,type,initialization)"
        s.print("varDecl("+varTransform(getName())+",");
        this.getAccess().generateProlog(s,reachInfo);
        s.print(",");
        this.getInitExpOpt().generateProlog(s,reachInfo);
        s.print(")");
    }
  /**
   * @aspect DeltaParameterSubstitution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/delta/DeltaParameterSubstitution.jadd:168
   */
  @Override
    protected void applySubstitution(Map<String,Value> subst) throws DeltaModellingWithNodeException {
        if (hasInitExp()) 
            getInitExp().applySubstitution(subst);
        // Removal should not be necessary with well-typed deltas
        subst.remove(getName());
    }
  /**
   * @aspect PrettyPrint
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/tests/PrettyPrint.jadd:75
   */
  public void prettyPrint(PrintWriter w, ABSFormatter f) {
        w.print(getAccess());
        w.print(' ');
        w.print(getName());
        if (hasInitExp()) w.print(" = "+getInitExp());
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:233
   */
  public VarDecl parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:461
   */
  public void refined_TypeChecker_VarDecl_typeCheck(SemanticErrorList e) { 
        int nerrors = e.size();            
        getAccess().typeCheck(e);
        if (e.size() > nerrors) return;

        Type t = getAccess().getType();
        if (hasInitExp()) {
            getInitExp().typeCheck(e);
            if (e.size() > nerrors) return;
            TypeCheckerHelper.checkAssignment(e,this,t,getInitExp());
        } else {
            if (!t.isReferenceType() && !t.isFutureType()) {
                e.add(new TypeError(this, ErrorMessage.VAR_INIT_REQUIRED, new String[0]));
            }
        }
    }
  /**
   * @aspect InitChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/ext/InitChecker.jrag:49
   */
  @Override
    void checkLegalInit(SemanticErrorList l, ErrorMessage msg) {
        if (hasInitExp()) {
            getInitExp().checkLegalInit(l, msg);
        }
    }
  /**
   * @declaredat ASTNode:1
   */
  public VarDecl() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[2];
    setChild(new Opt(), 1);
  }
  /**
   * @declaredat ASTNode:14
   */
  public VarDecl(String p0, Access p1, Opt<Exp> p2) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
  }
  /**
   * @declaredat ASTNode:19
   */
  public VarDecl(beaver.Symbol p0, Access p1, Opt<Exp> p2) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:27
   */
  protected int numChildren() {
    return 2;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:33
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:39
   */
  public void flushCache() {
    super.flushCache();
    getAnnotations_visited = -1;
    getAnnotations_computed = false;
    getAnnotations_value = null;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:48
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:54
   */
  public VarDecl clone() throws CloneNotSupportedException {
    VarDecl node = (VarDecl) super.clone();
    node.getAnnotations_visited = -1;
    node.getAnnotations_computed = false;
    node.getAnnotations_value = null;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:66
   */
  public VarDecl copy() {
    try {
      VarDecl node = (VarDecl) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:84
   */
  public VarDecl fullCopy() {
    VarDecl tree = (VarDecl) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the lexeme Name.
   * @param value The new value for the lexeme Name.
   * @apilevel high-level
   */
  public void setName(String value) {
    tokenString_Name = value;
  }
  /**
   * JastAdd-internal setter for lexeme Name using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme Name
   * @apilevel internal
   */
  public void setName(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setName is only valid for String lexemes");
    tokenString_Name = (String)symbol.value;
    Namestart = symbol.getStart();
    Nameend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme Name.
   * @return The value for the lexeme Name.
   * @apilevel high-level
   */
  public String getName() {
    return tokenString_Name != null ? tokenString_Name : "";
  }
  /**
   * Replaces the Access child.
   * @param node The new node to replace the Access child.
   * @apilevel high-level
   */
  public void setAccess(Access node) {
    setChild(node, 0);
  }
  /**
   * Retrieves the Access child.
   * @return The current node used as the Access child.
   * @apilevel high-level
   */
  public Access getAccess() {
    return (Access) getChild(0);
  }
  /**
   * Retrieves the Access child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the Access child.
   * @apilevel low-level
   */
  public Access getAccessNoTransform() {
    return (Access) getChildNoTransform(0);
  }
  /**
   * Replaces the optional node for the InitExp child. This is the <code>Opt</code>
   * node containing the child InitExp, not the actual child!
   * @param opt The new node to be used as the optional node for the InitExp child.
   * @apilevel low-level
   */
  public void setInitExpOpt(Opt<Exp> opt) {
    setChild(opt, 1);
  }
  /**
   * Replaces the (optional) InitExp child.
   * @param node The new node to be used as the InitExp child.
   * @apilevel high-level
   */
  public void setInitExp(Exp node) {
    getInitExpOpt().setChild(node, 0);
  }
  /**
   * Check whether the optional InitExp child exists.
   * @return {@code true} if the optional InitExp child exists, {@code false} if it does not.
   * @apilevel high-level
   */
  public boolean hasInitExp() {
    return getInitExpOpt().getNumChild() != 0;
  }
  /**
   * Retrieves the (optional) InitExp child.
   * @return The InitExp child, if it exists. Returns {@code null} otherwise.
   * @apilevel low-level
   */
  public Exp getInitExp() {
    return (Exp) getInitExpOpt().getChild(0);
  }
  /**
   * Retrieves the optional node for the InitExp child. This is the <code>Opt</code> node containing the child InitExp, not the actual child!
   * @return The optional node for child the InitExp child.
   * @apilevel low-level
   */
  public Opt<Exp> getInitExpOpt() {
    return (Opt<Exp>) getChild(1);
  }
  /**
   * Retrieves the optional node for child InitExp. This is the <code>Opt</code> node containing the child InitExp, not the actual child!
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The optional node for child InitExp.
   * @apilevel low-level
   */
  public Opt<Exp> getInitExpOptNoTransform() {
    return (Opt<Exp>) getChildNoTransform(1);
  }
  /**
   * @aspect TypeCheckerExtension
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/ext/TypeCheckerExtension.jadd:272
   */
    public void typeCheck(SemanticErrorList s) {
        int size = s.size();
        refined_TypeChecker_VarDecl_typeCheck(s);
        if (s.size() > size) return;

        if (hasInitExp()) {
            getModel().getTypeExt().checkAssignable(getInitExp().getType(), getType(), this);
        }
    }
  /**
   * @attribute inh
   * @aspect Annotations
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/Annotations.jrag:4
   */
  public List<Annotation> getAnnotations() {
    if(getAnnotations_computed) {
      return getAnnotations_value;
    }
    ASTNode$State state = state();
    if (getAnnotations_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getAnnotations in class: org.jastadd.ast.AST.InhDecl");
    }
    getAnnotations_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    getAnnotations_value = getParent().Define_List_Annotation__getAnnotations(this, null);
    if(isFinal && num == state().boundariesCrossed) {
      getAnnotations_computed = true;
    } else {
    }

    getAnnotations_visited = -1;
    return getAnnotations_value;
  }
  /**
   * @apilevel internal
   */
  protected int getAnnotations_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getAnnotations_computed = false;
  /**
   * @apilevel internal
   */
  protected List<Annotation> getAnnotations_value;
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/FnAppContext.jrag:19
   * @apilevel internal
   */
  public boolean Define_boolean_isContextImperative(ASTNode caller, ASTNode child) {
    if (caller == getInitExpOptNoTransform()) {
      return true;
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_boolean_isContextImperative(this, caller);
    }
  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
