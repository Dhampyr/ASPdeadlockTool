/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:322
 * @production Product : {@link ASTNode} ::= <span class="component">&lt;Name:String&gt;</span> <span class="component">{@link Feature}*</span> <span class="component">{@link Reconfiguration}*</span>;

 */
public class Product extends ASTNode<ASTNode> implements Cloneable {
  /**
   * @aspect GenerateJavaDynamic_DeltaModelling
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:1142
   */
  public void generateJavaCodeDynamic(JavaCode.Package pkg, HashMap<String, Product> allProducts) 
            throws IOException, JavaCodeGenerationException {
        PrintStream stream = null;
        String generatedJavaClassName = JavaBackend.getProductName(getName());
        
        try {
            File file = pkg.createJavaFile(generatedJavaClassName);
            stream = new JavaCodeStream(new BufferedOutputStream(new FileOutputStream(file)));
            // gen header
            stream.println("package " + pkg.packageName + ";");
            stream.println("public class " + generatedJavaClassName + " {");
            DynamicJavaGeneratorHelper.generateProduct(stream, this, allProducts);
            stream.println("}");
            
            for (Reconfiguration recf : getReconfigurations()) {
                recf.generateJavaCodeDynamic(pkg, this, allProducts);
            }
        } finally {
            if (stream != null)
                stream.close();
        }
    }
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:87
   */
  public void doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("product ");
        stream.print(getName());
        stream.print("(");
        getFeatureList().doPrettyPrint(stream, formatter, ",");
        stream.print(");");

        stream.println();
        formatter.afterStmt();
        stream.flush();
    }
  /**
   * @aspect ProdSolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/ProdSolution.jadd:13
   */
  public Map<String,Integer> getSolution() {
        Map<String,Integer> sol= new HashMap<String,Integer>();
        for(Feature f : getFeatures())
    		f.getSolution(true,sol);
    	return sol;
    }
  /**
   * @aspect ProductConstraints
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/mtvl/ProductConstraints.jadd:6
   */
  public void getProdConstraints(Map<String,IntegerVariable> vars, Set<Constraint> newcs) {
                    for (Feature f: getFeatures()) {
                        newcs.add(ChocoSolver.isTrue(vars.get(f.getName())));
                        for (AttrAssignment aa: f.getAttrAssignments()) {
                            String fname = f.getName()+"."+aa.getName();
                            if (vars.containsKey(fname))
                                newcs.add(ChocoSolver.eqeq(vars.get(fname), aa.getValue().getIntValue().intValue()));
                        }
                    }
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:199
   */
  public Product parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect QualifiedName
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeNames.jrag:69
   */
  public String qualifiedName() {
        return this.getName();
    }
  /**
   * @aspect TypeCheckProductline
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:1012
   */
  protected void typeCheck(SemanticErrorList e) {
        Map<String,Feature> featureNames = null;
        Model m = getModel();
        if (m.hasProductLine()) {
            featureNames = new HashMap<String,Feature>();
            for (Feature f : m.getProductLine().getFeatures()) {
                featureNames.put(f.getName(),f);
            }            
        }
        HashSet<String> productNames = new HashSet<String>();
        for (Product prod : m.getProducts()) {
            productNames.add(prod.getName());
        }
        HashSet<String> updateNames = new HashSet<String>();
        for (UpdateDecl upd : m.getUpdateDecls()) {
            updateNames.add(upd.getName());
        }
        TypeCheckerHelper.typeCheckProduct(this, featureNames, productNames, m.getDeltaDeclsMap(), updateNames, e);
    }
  /**
   * @declaredat ASTNode:1
   */
  public Product() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[2];
    setChild(new List(), 0);
    setChild(new List(), 1);
  }
  /**
   * @declaredat ASTNode:15
   */
  public Product(String p0, List<Feature> p1, List<Reconfiguration> p2) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
  }
  /**
   * @declaredat ASTNode:20
   */
  public Product(beaver.Symbol p0, List<Feature> p1, List<Reconfiguration> p2) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:28
   */
  protected int numChildren() {
    return 2;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:34
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:40
   */
  public void flushCache() {
    super.flushCache();
    getModel_visited = -1;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:47
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:53
   */
  public Product clone() throws CloneNotSupportedException {
    Product node = (Product) super.clone();
    node.getModel_visited = -1;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:63
   */
  public Product copy() {
    try {
      Product node = (Product) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:81
   */
  public Product fullCopy() {
    Product tree = (Product) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the lexeme Name.
   * @param value The new value for the lexeme Name.
   * @apilevel high-level
   */
  public void setName(String value) {
    tokenString_Name = value;
  }
  /**
   * @apilevel internal
   */
  protected String tokenString_Name;
  /**
   */
  public int Namestart;
  /**
   */
  public int Nameend;
  /**
   * JastAdd-internal setter for lexeme Name using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme Name
   * @apilevel internal
   */
  public void setName(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setName is only valid for String lexemes");
    tokenString_Name = (String)symbol.value;
    Namestart = symbol.getStart();
    Nameend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme Name.
   * @return The value for the lexeme Name.
   * @apilevel high-level
   */
  public String getName() {
    return tokenString_Name != null ? tokenString_Name : "";
  }
  /**
   * Replaces the Feature list.
   * @param list The new list node to be used as the Feature list.
   * @apilevel high-level
   */
  public void setFeatureList(List<Feature> list) {
    setChild(list, 0);
  }
  /**
   * Retrieves the number of children in the Feature list.
   * @return Number of children in the Feature list.
   * @apilevel high-level
   */
  public int getNumFeature() {
    return getFeatureList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Feature list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Feature list.
   * @apilevel low-level
   */
  public int getNumFeatureNoTransform() {
    return getFeatureListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Feature list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Feature list.
   * @apilevel high-level
   */
  public Feature getFeature(int i) {
    return (Feature) getFeatureList().getChild(i);
  }
  /**
   * Check whether the Feature list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasFeature() {
    return getFeatureList().getNumChild() != 0;
  }
  /**
   * Append an element to the Feature list.
   * @param node The element to append to the Feature list.
   * @apilevel high-level
   */
  public void addFeature(Feature node) {
    List<Feature> list = (parent == null || state == null) ? getFeatureListNoTransform() : getFeatureList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addFeatureNoTransform(Feature node) {
    List<Feature> list = getFeatureListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Feature list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setFeature(Feature node, int i) {
    List<Feature> list = getFeatureList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Feature list.
   * @return The node representing the Feature list.
   * @apilevel high-level
   */
  public List<Feature> getFeatureList() {
    List<Feature> list = (List<Feature>) getChild(0);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Feature list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Feature list.
   * @apilevel low-level
   */
  public List<Feature> getFeatureListNoTransform() {
    return (List<Feature>) getChildNoTransform(0);
  }
  /**
   * Retrieves the Feature list.
   * @return The node representing the Feature list.
   * @apilevel high-level
   */
  public List<Feature> getFeatures() {
    return getFeatureList();
  }
  /**
   * Retrieves the Feature list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Feature list.
   * @apilevel low-level
   */
  public List<Feature> getFeaturesNoTransform() {
    return getFeatureListNoTransform();
  }
  /**
   * Replaces the Reconfiguration list.
   * @param list The new list node to be used as the Reconfiguration list.
   * @apilevel high-level
   */
  public void setReconfigurationList(List<Reconfiguration> list) {
    setChild(list, 1);
  }
  /**
   * Retrieves the number of children in the Reconfiguration list.
   * @return Number of children in the Reconfiguration list.
   * @apilevel high-level
   */
  public int getNumReconfiguration() {
    return getReconfigurationList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Reconfiguration list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Reconfiguration list.
   * @apilevel low-level
   */
  public int getNumReconfigurationNoTransform() {
    return getReconfigurationListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Reconfiguration list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Reconfiguration list.
   * @apilevel high-level
   */
  public Reconfiguration getReconfiguration(int i) {
    return (Reconfiguration) getReconfigurationList().getChild(i);
  }
  /**
   * Check whether the Reconfiguration list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasReconfiguration() {
    return getReconfigurationList().getNumChild() != 0;
  }
  /**
   * Append an element to the Reconfiguration list.
   * @param node The element to append to the Reconfiguration list.
   * @apilevel high-level
   */
  public void addReconfiguration(Reconfiguration node) {
    List<Reconfiguration> list = (parent == null || state == null) ? getReconfigurationListNoTransform() : getReconfigurationList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addReconfigurationNoTransform(Reconfiguration node) {
    List<Reconfiguration> list = getReconfigurationListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Reconfiguration list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setReconfiguration(Reconfiguration node, int i) {
    List<Reconfiguration> list = getReconfigurationList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Reconfiguration list.
   * @return The node representing the Reconfiguration list.
   * @apilevel high-level
   */
  public List<Reconfiguration> getReconfigurationList() {
    List<Reconfiguration> list = (List<Reconfiguration>) getChild(1);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Reconfiguration list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Reconfiguration list.
   * @apilevel low-level
   */
  public List<Reconfiguration> getReconfigurationListNoTransform() {
    return (List<Reconfiguration>) getChildNoTransform(1);
  }
  /**
   * Retrieves the Reconfiguration list.
   * @return The node representing the Reconfiguration list.
   * @apilevel high-level
   */
  public List<Reconfiguration> getReconfigurations() {
    return getReconfigurationList();
  }
  /**
   * Retrieves the Reconfiguration list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Reconfiguration list.
   * @apilevel low-level
   */
  public List<Reconfiguration> getReconfigurationsNoTransform() {
    return getReconfigurationListNoTransform();
  }
  /**
   * @attribute inh
   * @aspect Model
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeReferences.jrag:7
   */
  public Model getModel() {
    ASTNode$State state = state();
    if (getModel_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getModel in class: org.jastadd.ast.AST.InhDecl");
    }
    getModel_visited = state().boundariesCrossed;
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    Model getModel_value = getParent().Define_Model_getModel(this, null);

    getModel_visited = -1;
    return getModel_value;
  }
  /**
   * @apilevel internal
   */
  protected int getModel_visited = -1;
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
