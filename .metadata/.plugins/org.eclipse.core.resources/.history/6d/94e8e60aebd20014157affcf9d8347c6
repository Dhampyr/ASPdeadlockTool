/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:172
 * @production CaseStmt : {@link Stmt} ::= <span class="component">Expr:{@link PureExp}</span> <span class="component">Branch:{@link CaseBranchStmt}*</span>;

 */
public class CaseStmt extends Stmt implements Cloneable {
  /**
   * @aspect GenerateErlang
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/erlang/GenerateErlang.jadd:615
   */
  @Override
  public void generateErlangCode(ErlangCodeStream ecs, Vars vars) {
      Vars safe = vars.pass();
      // Build var scopes and statmemnts for each branch
      java.util.List<Vars> branches_vars = new LinkedList<Vars>();
      java.util.List<String> branches = new LinkedList<String>();
      for (CaseBranchStmt b : getBranchs()) {
          Vars v = vars.pass();
          StringWriter sw = new StringWriter();
          ErlangCodeStream buffer = new ErlangCodeStream(new WriterOutputStream(sw, Charset.forName("UTF-8")),"");
          b.getLeft().generateErlangCode(ecs, buffer, v);
          buffer.setIndent(ecs.getIndent());
          buffer.println("->");
          buffer.incIndent();
          b.getRight().generateErlangCode(buffer, v);
          buffer.decIndent();
          buffer.close();
          branches_vars.add(v);
          branches.add(sw.toString());
          vars.updateTemp(v);
      }
      ecs.print("case ");
      getExpr().generateErlangCode(ecs, safe);
      ecs.incIndent().println(" of");
      // Now print statments and mergelines for each branch.
      java.util.List<String> mergeLines = vars.merge(branches_vars);
      boolean first = true;
      Iterator<String> ib = branches.iterator();
      Iterator<String> im = mergeLines.iterator();
      while (ib.hasNext()) {
          if (!first)
              ecs.println(";");
          first = false;
          ecs.print(ib.next());
          ecs.print(im.next());
      }
      ecs.println();
      ecs.decIndent();
      ecs.print("end");
  }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:827
   */
  public void generateMaude(PrintStream stream) {
        stream.print("case ");
        getExpr().generateMaude(stream);
        stream.print("of { ");
        for (CaseBranchStmt b : getBranchs()) {
            stream.print("{ ");
            b.getLeft().generateMaude(stream);
            stream.print("=> ");
            b.getRight().generateMaude(stream);
            stream.print("} ");
        }
        stream.print("} ");
    }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:617
   */
  public void typeCheck(SemanticErrorList e) {
        getExpr().typeCheck(e); 
        Type et = getExpr().getType();
        if (!et.isDataType()) {
           e.add(new TypeError(getExpr(),ErrorMessage.CASE_NO_DATATYPE,et));
           return;
        }
        Type t = getType();
        for (CaseBranchStmt b : getBranchs()) {
          b.typeCheck(e,(DataTypeType) et);      
        }
    }
  /**
   * @declaredat ASTNode:1
   */
  public CaseStmt() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[3];
    setChild(new List(), 0);
    setChild(new List(), 2);
  }
  /**
   * @declaredat ASTNode:15
   */
  public CaseStmt(List<Annotation> p0, PureExp p1, List<CaseBranchStmt> p2) {
    setChild(p0, 0);
    setChild(p1, 1);
    setChild(p2, 2);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:23
   */
  protected int numChildren() {
    return 3;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:29
   */
  public boolean mayHaveRewrite() {
    return true;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:35
   */
  public void flushCache() {
    super.flushCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:41
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:47
   */
  public CaseStmt clone() throws CloneNotSupportedException {
    CaseStmt node = (CaseStmt) super.clone();
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:56
   */
  public CaseStmt copy() {
    try {
      CaseStmt node = (CaseStmt) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:74
   */
  public CaseStmt fullCopy() {
    CaseStmt tree = (CaseStmt) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the Annotation list.
   * @param list The new list node to be used as the Annotation list.
   * @apilevel high-level
   */
  public void setAnnotationList(List<Annotation> list) {
    setChild(list, 0);
  }
  /**
   * Retrieves the number of children in the Annotation list.
   * @return Number of children in the Annotation list.
   * @apilevel high-level
   */
  public int getNumAnnotation() {
    return getAnnotationList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Annotation list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Annotation list.
   * @apilevel low-level
   */
  public int getNumAnnotationNoTransform() {
    return getAnnotationListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Annotation list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Annotation list.
   * @apilevel high-level
   */
  public Annotation getAnnotation(int i) {
    return (Annotation) getAnnotationList().getChild(i);
  }
  /**
   * Check whether the Annotation list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasAnnotation() {
    return getAnnotationList().getNumChild() != 0;
  }
  /**
   * Append an element to the Annotation list.
   * @param node The element to append to the Annotation list.
   * @apilevel high-level
   */
  public void addAnnotation(Annotation node) {
    List<Annotation> list = (parent == null || state == null) ? getAnnotationListNoTransform() : getAnnotationList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addAnnotationNoTransform(Annotation node) {
    List<Annotation> list = getAnnotationListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Annotation list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setAnnotation(Annotation node, int i) {
    List<Annotation> list = getAnnotationList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Annotation list.
   * @return The node representing the Annotation list.
   * @apilevel high-level
   */
  public List<Annotation> getAnnotationList() {
    List<Annotation> list = (List<Annotation>) getChild(0);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Annotation list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Annotation list.
   * @apilevel low-level
   */
  public List<Annotation> getAnnotationListNoTransform() {
    return (List<Annotation>) getChildNoTransform(0);
  }
  /**
   * Retrieves the Annotation list.
   * @return The node representing the Annotation list.
   * @apilevel high-level
   */
  public List<Annotation> getAnnotations() {
    return getAnnotationList();
  }
  /**
   * Retrieves the Annotation list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Annotation list.
   * @apilevel low-level
   */
  public List<Annotation> getAnnotationsNoTransform() {
    return getAnnotationListNoTransform();
  }
  /**
   * Replaces the Expr child.
   * @param node The new node to replace the Expr child.
   * @apilevel high-level
   */
  public void setExpr(PureExp node) {
    setChild(node, 1);
  }
  /**
   * Retrieves the Expr child.
   * @return The current node used as the Expr child.
   * @apilevel high-level
   */
  public PureExp getExpr() {
    return (PureExp) getChild(1);
  }
  /**
   * Retrieves the Expr child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the Expr child.
   * @apilevel low-level
   */
  public PureExp getExprNoTransform() {
    return (PureExp) getChildNoTransform(1);
  }
  /**
   * Replaces the Branch list.
   * @param list The new list node to be used as the Branch list.
   * @apilevel high-level
   */
  public void setBranchList(List<CaseBranchStmt> list) {
    setChild(list, 2);
  }
  /**
   * Retrieves the number of children in the Branch list.
   * @return Number of children in the Branch list.
   * @apilevel high-level
   */
  public int getNumBranch() {
    return getBranchList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Branch list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Branch list.
   * @apilevel low-level
   */
  public int getNumBranchNoTransform() {
    return getBranchListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Branch list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Branch list.
   * @apilevel high-level
   */
  public CaseBranchStmt getBranch(int i) {
    return (CaseBranchStmt) getBranchList().getChild(i);
  }
  /**
   * Check whether the Branch list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasBranch() {
    return getBranchList().getNumChild() != 0;
  }
  /**
   * Append an element to the Branch list.
   * @param node The element to append to the Branch list.
   * @apilevel high-level
   */
  public void addBranch(CaseBranchStmt node) {
    List<CaseBranchStmt> list = (parent == null || state == null) ? getBranchListNoTransform() : getBranchList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addBranchNoTransform(CaseBranchStmt node) {
    List<CaseBranchStmt> list = getBranchListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Branch list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setBranch(CaseBranchStmt node, int i) {
    List<CaseBranchStmt> list = getBranchList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Branch list.
   * @return The node representing the Branch list.
   * @apilevel high-level
   */
  public List<CaseBranchStmt> getBranchList() {
    List<CaseBranchStmt> list = (List<CaseBranchStmt>) getChild(2);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Branch list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Branch list.
   * @apilevel low-level
   */
  public List<CaseBranchStmt> getBranchListNoTransform() {
    return (List<CaseBranchStmt>) getChildNoTransform(2);
  }
  /**
   * Retrieves the Branch list.
   * @return The node representing the Branch list.
   * @apilevel high-level
   */
  public List<CaseBranchStmt> getBranchs() {
    return getBranchList();
  }
  /**
   * Retrieves the Branch list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Branch list.
   * @apilevel low-level
   */
  public List<CaseBranchStmt> getBranchsNoTransform() {
    return getBranchListNoTransform();
  }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/FnAppContext.jrag:28
   * @apilevel internal
   */
  public boolean Define_boolean_isContextImperative(ASTNode caller, ASTNode child) {
    if (caller == getExprNoTransform()) {
      return true;
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_boolean_isContextImperative(this, caller);
    }
  }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/VarResolution.jrag:244
   * @apilevel internal
   */
  public VarOrFieldDecl Define_VarOrFieldDecl_lookupVarOrFieldName(ASTNode caller, ASTNode child, String name, boolean fieldOnly) {
    if (caller == getBranchListNoTransform()) {
      int i = caller.getIndexOfChild(child);
      {
        if (!fieldOnly) {
            VarOrFieldDecl d = getBranch(i).getLeft().locallookupVarOrFieldName(name,fieldOnly);
            if (d != null)
                return d;
        }
        return lookupVarOrFieldName(name, fieldOnly);
    }
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_VarOrFieldDecl_lookupVarOrFieldName(this, caller, name, fieldOnly);
    }
  }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:293
   * @apilevel internal
   */
  public Type Define_Type_getPatternExpType(ASTNode caller, ASTNode child) {
    if (caller == getBranchListNoTransform()) {
      int i = caller.getIndexOfChild(child);
      return getExpr().getType();
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_Type_getPatternExpType(this, caller);
    }
  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
