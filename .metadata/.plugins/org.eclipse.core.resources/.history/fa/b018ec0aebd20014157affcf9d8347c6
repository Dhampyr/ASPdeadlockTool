/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:71
 * @production Modifier : {@link ASTNode};

 */
public abstract class Modifier extends ASTNode<ASTNode> implements Cloneable {
  /**
   * @aspect GenerateJavaDynamic_DeltaModelling
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:1098
   */
  abstract void generateJavaDynamic(PrintStream stream);
  /**
   * @aspect GenerateJavaDynamic_DeltaModelling
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:1099
   */
  abstract void generateJavaDynamicApplication(PrintStream stream, String className);
  /**************************************************************************
   * Modifiers are applied to Classes
   * - add/remove/modify methods
   * - add/remove fields
   * @aspect DeltaModifierApplicator
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/delta/DeltaModifierApplicator.jadd:265
   */
  public abstract void applyTo(ClassDecl cd) throws DeltaModellingException;
  /**
   * @aspect DeltaParameterSubstitution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/delta/DeltaParameterSubstitution.jadd:129
   */
  abstract protected void applySubstitution(Map<String,Value> subst) throws DeltaModellingWithNodeException;
  /**
   * @aspect PrettyPrint
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/tests/PrettyPrint.jadd:99
   */
  public void prettyPrint(PrintWriter w, ABSFormatter f) {
        w.print(this.getClass().getSimpleName());        
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:166
   */
  public Modifier parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @declaredat ASTNode:1
   */
  public Modifier() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:15
   */
  protected int numChildren() {
    return 0;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:21
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:27
   */
  public void flushCache() {
    super.flushCache();
    locallookupVarOrFieldName_String_boolean_visited = null;
    locallookupVarOrFieldName_String_boolean_values = null;
    deltaName_visited = -1;
    targetModuleName_visited = -1;
    targetClassName_visited = -1;
    targetQualifiedClassName_visited = -1;
    getModel_visited = -1;
    getDelta_visited = -1;
    getModifyClassModifier_visited = -1;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:42
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:48
   */
  public Modifier clone() throws CloneNotSupportedException {
    Modifier node = (Modifier) super.clone();
    node.locallookupVarOrFieldName_String_boolean_visited = null;
    node.locallookupVarOrFieldName_String_boolean_values = null;
    node.deltaName_visited = -1;
    node.targetModuleName_visited = -1;
    node.targetClassName_visited = -1;
    node.targetQualifiedClassName_visited = -1;
    node.getModel_visited = -1;
    node.getDelta_visited = -1;
    node.getModifyClassModifier_visited = -1;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   */
  protected java.util.Map locallookupVarOrFieldName_String_boolean_visited;
  protected java.util.Map locallookupVarOrFieldName_String_boolean_values;
  /**
   * @attribute syn
   * @aspect VarResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/VarResolution.jrag:141
   */
  public VarOrFieldDecl locallookupVarOrFieldName(String name, boolean fieldOnly) {
    java.util.List _parameters = new java.util.ArrayList(2);
    _parameters.add(name);
    _parameters.add(Boolean.valueOf(fieldOnly));
    if(locallookupVarOrFieldName_String_boolean_visited == null) locallookupVarOrFieldName_String_boolean_visited = new java.util.HashMap(4);
    if(locallookupVarOrFieldName_String_boolean_values == null) locallookupVarOrFieldName_String_boolean_values = new java.util.HashMap(4);
    if(locallookupVarOrFieldName_String_boolean_values.containsKey(_parameters)) {
      return (VarOrFieldDecl)locallookupVarOrFieldName_String_boolean_values.get(_parameters);
    }
    ASTNode$State state = state();
    if (Integer.valueOf(state().boundariesCrossed).equals(locallookupVarOrFieldName_String_boolean_visited.get(_parameters))) {
      throw new RuntimeException("Circular definition of attr: locallookupVarOrFieldName in class: org.jastadd.ast.AST.SynDecl");
    }
    locallookupVarOrFieldName_String_boolean_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    VarOrFieldDecl locallookupVarOrFieldName_String_boolean_value = locallookupVarOrFieldName_compute(name, fieldOnly);
    if(isFinal && num == state().boundariesCrossed) {
      locallookupVarOrFieldName_String_boolean_values.put(_parameters, locallookupVarOrFieldName_String_boolean_value);
    } else {
    }

    locallookupVarOrFieldName_String_boolean_visited.remove(_parameters);
    return locallookupVarOrFieldName_String_boolean_value;
  }
  /**
   * @apilevel internal
   */
  private VarOrFieldDecl locallookupVarOrFieldName_compute(String name, boolean fieldOnly) {
          VarOrFieldDecl var = null;
          
          // search in current ModifyClassModifier for AddField modifiers
          for (Modifier mod : getModifyClassModifier().getModifiers()) {
              if (mod instanceof AddFieldModifier) {
                  var = ((AddFieldModifier)mod).locallookupVarOrFieldName(name, fieldOnly);
                  if (var != null) {
                      return var;
                  }
              }
          }
          
          // Search in all other deltas for addField modifiers that apply to same module&class
          String targetModule = targetModuleName();
          String targetClass = targetClassName();
          
          for (DeltaDecl delta : getModel().getDeltaDecls()) {
              for (ModuleModifier mmod : delta.getModuleModifiers()) {
                  if (mmod.getModule() != null && mmod.targetModuleName().equals(targetModule)) {
                      
                      if (mmod instanceof AddClassModifier) {
                          if (mmod.getSimpleName().equals(targetClass)) {
                              ClassDecl cd = ((AddClassModifier)mmod).getClassDecl();
                              var = cd.locallookupVarOrFieldName(name, fieldOnly);
                              if (var != null) {
                                  return var;
                              }
                          }
                      } else if (mmod instanceof ModifyClassModifier) {
                          if (((ModifyClassModifier)mmod).targetClassName().equals(targetClass)) {
                              for (Modifier mod : ((ModifyClassModifier)mmod).getModifiers()) {
                                  if (mod instanceof AddFieldModifier) {
                                      var = ((AddFieldModifier)mod).locallookupVarOrFieldName(name, fieldOnly);
                                      if (var != null) {
                                          return var;
                                      }
                                  }
                              }
                          }
                      }
                  }
              }
          }
          
          // search core
          ClassDecl cd = getModifyClassModifier().getClassDecl();
          var = cd == null ? null : cd.locallookupVarOrFieldName(name, fieldOnly);
          
          return var;
      }
  /**
   * @attribute inh
   * @aspect DeltaName
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeNames.jrag:10
   */
  public String deltaName() {
    ASTNode$State state = state();
    if (deltaName_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: deltaName in class: org.jastadd.ast.AST.InhDecl");
    }
    deltaName_visited = state().boundariesCrossed;
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    String deltaName_value = getParent().Define_String_deltaName(this, null);

    deltaName_visited = -1;
    return deltaName_value;
  }
  /**
   * @apilevel internal
   */
  protected int deltaName_visited = -1;
  /**
   * @attribute inh
   * @aspect TargetModuleName
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeNames.jrag:37
   */
  public String targetModuleName() {
    ASTNode$State state = state();
    if (targetModuleName_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: targetModuleName in class: org.jastadd.ast.AST.InhDecl");
    }
    targetModuleName_visited = state().boundariesCrossed;
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    String targetModuleName_value = getParent().Define_String_targetModuleName(this, null);

    targetModuleName_visited = -1;
    return targetModuleName_value;
  }
  /**
   * @apilevel internal
   */
  protected int targetModuleName_visited = -1;
  /**
   * @attribute inh
   * @aspect TargetClassName
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeNames.jrag:46
   */
  public String targetClassName() {
    ASTNode$State state = state();
    if (targetClassName_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: targetClassName in class: org.jastadd.ast.AST.InhDecl");
    }
    targetClassName_visited = state().boundariesCrossed;
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    String targetClassName_value = getParent().Define_String_targetClassName(this, null);

    targetClassName_visited = -1;
    return targetClassName_value;
  }
  /**
   * @apilevel internal
   */
  protected int targetClassName_visited = -1;
  /**
   * @attribute inh
   * @aspect TargetQualifiedClassName
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeNames.jrag:55
   */
  public String targetQualifiedClassName() {
    ASTNode$State state = state();
    if (targetQualifiedClassName_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: targetQualifiedClassName in class: org.jastadd.ast.AST.InhDecl");
    }
    targetQualifiedClassName_visited = state().boundariesCrossed;
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    String targetQualifiedClassName_value = getParent().Define_String_targetQualifiedClassName(this, null);

    targetQualifiedClassName_visited = -1;
    return targetQualifiedClassName_value;
  }
  /**
   * @apilevel internal
   */
  protected int targetQualifiedClassName_visited = -1;
  /**
   * @attribute inh
   * @aspect Model
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeReferences.jrag:9
   */
  public Model getModel() {
    ASTNode$State state = state();
    if (getModel_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getModel in class: org.jastadd.ast.AST.InhDecl");
    }
    getModel_visited = state().boundariesCrossed;
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    Model getModel_value = getParent().Define_Model_getModel(this, null);

    getModel_visited = -1;
    return getModel_value;
  }
  /**
   * @apilevel internal
   */
  protected int getModel_visited = -1;
  /**
   * @attribute inh
   * @aspect Delta
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeReferences.jrag:19
   */
  public DeltaDecl getDelta() {
    ASTNode$State state = state();
    if (getDelta_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getDelta in class: org.jastadd.ast.AST.InhDecl");
    }
    getDelta_visited = state().boundariesCrossed;
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    DeltaDecl getDelta_value = getParent().Define_DeltaDecl_getDelta(this, null);

    getDelta_visited = -1;
    return getDelta_value;
  }
  /**
   * @apilevel internal
   */
  protected int getDelta_visited = -1;
  /**
   * @attribute inh
   * @aspect ModifyClassModifier
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeReferences.jrag:48
   */
  public ModifyClassModifier getModifyClassModifier() {
    ASTNode$State state = state();
    if (getModifyClassModifier_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getModifyClassModifier in class: org.jastadd.ast.AST.InhDecl");
    }
    getModifyClassModifier_visited = state().boundariesCrossed;
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    ModifyClassModifier getModifyClassModifier_value = getParent().Define_ModifyClassModifier_getModifyClassModifier(this, null);

    getModifyClassModifier_visited = -1;
    return getModifyClassModifier_value;
  }
  /**
   * @apilevel internal
   */
  protected int getModifyClassModifier_visited = -1;
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
