/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:213
 * @production DataConstructorExp : {@link PureExp} ::= <span class="component">&lt;Constructor:String&gt;</span> <span class="component">Param:{@link PureExp}*</span>;

 */
public class DataConstructorExp extends PureExp implements Cloneable, HasActualParams {
  /**
   * @aspect GenerateErlang
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/erlang/GenerateErlang.jadd:786
   */
  public void generateErlangCode(ErlangCodeStream ecs,Vars vars){
    //Handling for bool
    final String c = getDataConstructor().getName();
    if("True".equals(c) || "False".equals(c))
      ecs.print(c.toLowerCase());
    else{
      if(getParams().getNumChild() > 0)
        ecs.print("{");
      ecs.print("data");
      ecs.print(c);
      for (PureExp p : getParams()) {
        ecs.print(",");
        p.generateErlangCode(ecs,vars);
      }
      if(getParams().getNumChild() > 0)
        ecs.print("}");
      }
  }
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:786
   */
  public void generateJava(PrintStream stream) {
        DataConstructor c = getDataConstructor();
        assert c != null;
        DataTypeDecl decl = c.getDataTypeDecl();
        Type t = decl.getType();
        if (t.isBoolType()) {
            if ("True".equals(c.getName()))
                stream.print(ABSBool.class.getName() + ".TRUE");
            else
                stream.print(ABSBool.class.getName() + ".FALSE");
        } else if (t.isUnitType()) {
            stream.print(JavaBackendConstants.UNITVALUE);
        } else {
            stream.print("new " + JavaBackend.getQualifiedString(c));
            /*
              if (decl instanceof ParametricDataTypeDecl) {
                DataTypeType type = (DataTypeType) this.getType();
                if (type.hasTypeArgs()) {
                  stream.print("<");
                  boolean first = true;
                  for (Type typeArg : type.getTypeArgs()) {
                    if (first) first = false;
                    else stream.print(",");
                    stream.print(JavaBackend.getQualifiedString(typeArg));
                  }
                  stream.print(">");
                }
              }
             */
            JavaGeneratorHelper.generateArgs(stream,getParams(), c.getTypes());
        }
    }
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:814
   */
  public void generateJavaDynamic(PrintStream stream) {
        DataConstructor c = getDataConstructor();
        assert c != null : "We typechecked it!";
        DataTypeDecl decl = c.getDataTypeDecl();
        Type t = decl.getType();
        if (t.isBoolType()) {
            stream.print(ABSBool.class.getName());
            stream.print(".fromBoolean(");
            stream.print(c.getName().toLowerCase());
            stream.print(")");
        } else if (t.isUnitType()) {
            stream.print(JavaBackendConstants.UNITVALUE);
        } else {
            stream.print("new " + JavaBackend.getQualifiedString(c));
            /*
          if (decl instanceof ParametricDataTypeDecl) {
            DataTypeType type = (DataTypeType) this.getType();
            if (type.hasTypeArgs()) {
              stream.print("<");
              boolean first = true;
              for (Type typeArg : type.getTypeArgs()) {
                if (first) first = false;
                else stream.print(",");
                stream.print(JavaBackend.getQualifiedString(typeArg));
              }
              stream.print(">");
            }
          }
             */
            DynamicJavaGeneratorHelper.generateArgs(stream,getParams(), c.getTypes());
        }
    }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:377
   */
  public void generateMaude(PrintStream stream) {
       boolean inlist = false;
       DataConstructor dc = getDataConstructor(); 
       assert dc != null;
       stream.print("\"" + dc.getModuleDecl().getName() + "." + dc.getName() + "\"[ ");

       MaudeCompilerHelper.emitParameterValueList(stream, getParams(),
                                                  dc.getTypes());
       stream.print("] ");
    }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:387
   */
  public int numberOfRandom(Set<String> visitedFunctions) {
        int result = 0;
        for (PureExp param : getParams()) {
            result += param.numberOfRandom(visitedFunctions);
        }
        return result;
    }
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:1026
   */
  public void doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print(getConstructor());
        if (getNumParam() > 0) {
            stream.print("( ");
            getParamList().doPrettyPrint(stream, formatter, ",");
            stream.print(" )");
        }
    }
  /**
   * @aspect GenerateProlog
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prolog/GenerateProlog.jadd:327
   */
  public void generateProlog(PrintStream s,ReachabilityInformation reachInfo){
        s.print("cons(" + quote(getConstructor()));
        List<?> subExps = (List<?>) getChild(0); // ? = PureExp
        int n = subExps.getNumChild();
        if (n > 0) {
            s.print("(");
            for (int i = 0; i < n; i++){
                subExps.getChild(i).generateProlog(s,reachInfo);
                if (i != n-1) s.print(",");
            }
            s.print(")");
        }
        s.print(")");
    }
  /**
   * @aspect ErrorCheck
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/ErrorCheck.jadd:56
   */
  public void collectErrors(SemanticErrorList c) {
    try {
      super.collectErrors(c);
      if (getDecl() == null) {
          c.add(new SemanticError(this,ErrorMessage.UNKOWN_DATACONSTRUCTOR,getConstructor()));
      }
    } catch (TypeCheckerException e) {
      c.add(e);
    }
  }
  /**
   * @aspect DumpTree
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/tests/DumpTree.jadd:37
   */
  public void dumpTree(String indent, java.io.PrintStream pStream) {
	   	pStream.println(indent + this.toString() + "\t\t" +  this.getConstructor());
		String childIndent = indent + "  ";
		for(int i = 0; i < getNumChild(); i++)
			getChildNoTransform(i).dumpTree(childIndent, pStream);
		
	}
  /**
   * @aspect MyDumpTree
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/tests/MyDumpTree.jadd:116
   */
  protected void printInfo(PrintStream stream)
    {
        stream.print(this.getConstructor());
    }
  /**
   * @aspect PrettyPrint
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/tests/PrettyPrint.jadd:53
   */
  public void prettyPrint(PrintWriter w, ABSFormatter f) {
        w.print(getConstructor());
        w.print('(');
        getParams().prettyPrint(w,f);
        w.print(')');
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:59
   */
  public DataConstructorExp parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:844
   */
  public void refined_TypeChecker_DataConstructorExp_typeCheck(SemanticErrorList e) {
        Decl decl = getDecl();
        if (!(decl instanceof DataConstructor)) {
            e.add(new SemanticError(this,ErrorMessage.CONSTRUCTOR_NOT_RESOLVABLE,getConstructor()));
        } else {
            DataConstructor c = (DataConstructor) decl;

            if (c.getDataTypeDecl() instanceof ParametricDataTypeDecl) {
                TypeCheckerHelper.typeCheckMatchingParams(e,this,c);
            } else {
                TypeCheckerHelper.typeCheckEqual(e,this,c.getTypes());
            }
        }

    }
  /**
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:390
   */
  @CheckForNull
    public DataConstructor getDataConstructor() {
        Decl decl = lookup(new KindedName(Kind.DATA_CONSTRUCTOR,getConstructor()));
        if (decl instanceof DataConstructor) {
            return (DataConstructor) decl;
        } else {
            if (decl instanceof ExceptionDecl) {
                return ((ExceptionDecl)decl).dataConstructor;
            } else {
                return null;
            }
        }
    }
  /**
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:395
   */
  public java.util.List<Type> getTypesFromExp() { return TypeCheckerHelper.getTypes(getParams()); }
  /**
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:410
   */
  public void typeCheckEqualParams(SemanticErrorList l, HasParams params) {
        TypeCheckerHelper.typeCheckEqual(l, this, params.getTypes());
    }
  /**
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:413
   */
  public Map<TypeParameter, Type> getTypeParamBinding(ASTNode<?> node, HasTypes params) {
        return params.getTypeParamBinding(node, getTypesFromExp());
    }
  /**
   * @declaredat ASTNode:1
   */
  public DataConstructorExp() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[1];
    setChild(new List(), 0);
  }
  /**
   * @declaredat ASTNode:14
   */
  public DataConstructorExp(String p0, List<PureExp> p1) {
    setConstructor(p0);
    setChild(p1, 0);
  }
  /**
   * @declaredat ASTNode:18
   */
  public DataConstructorExp(beaver.Symbol p0, List<PureExp> p1) {
    setConstructor(p0);
    setChild(p1, 0);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:25
   */
  protected int numChildren() {
    return 1;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:31
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:37
   */
  public void flushCache() {
    super.flushCache();
    getFreeVars_visited = -1;
    getFreeVars_computed = false;
    getFreeVars_value = null;
    getFields_FieldUseInfo_visited = null;
    getFields_FieldUseInfo_values = null;
    getDecl_visited = -1;
    getType_visited = -1;
    getType_computed = false;
    getType_value = null;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:52
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:58
   */
  public DataConstructorExp clone() throws CloneNotSupportedException {
    DataConstructorExp node = (DataConstructorExp) super.clone();
    node.getFreeVars_visited = -1;
    node.getFreeVars_computed = false;
    node.getFreeVars_value = null;
    node.getFields_FieldUseInfo_visited = null;
    node.getFields_FieldUseInfo_values = null;
    node.getDecl_visited = -1;
    node.getType_visited = -1;
    node.getType_computed = false;
    node.getType_value = null;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:76
   */
  public DataConstructorExp copy() {
    try {
      DataConstructorExp node = (DataConstructorExp) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:94
   */
  public DataConstructorExp fullCopy() {
    DataConstructorExp tree = (DataConstructorExp) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the lexeme Constructor.
   * @param value The new value for the lexeme Constructor.
   * @apilevel high-level
   */
  public void setConstructor(String value) {
    tokenString_Constructor = value;
  }
  /**
   * @apilevel internal
   */
  protected String tokenString_Constructor;
  /**
   */
  public int Constructorstart;
  /**
   */
  public int Constructorend;
  /**
   * JastAdd-internal setter for lexeme Constructor using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme Constructor
   * @apilevel internal
   */
  public void setConstructor(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setConstructor is only valid for String lexemes");
    tokenString_Constructor = (String)symbol.value;
    Constructorstart = symbol.getStart();
    Constructorend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme Constructor.
   * @return The value for the lexeme Constructor.
   * @apilevel high-level
   */
  public String getConstructor() {
    return tokenString_Constructor != null ? tokenString_Constructor : "";
  }
  /**
   * Replaces the Param list.
   * @param list The new list node to be used as the Param list.
   * @apilevel high-level
   */
  public void setParamList(List<PureExp> list) {
    setChild(list, 0);
  }
  /**
   * Retrieves the number of children in the Param list.
   * @return Number of children in the Param list.
   * @apilevel high-level
   */
  public int getNumParam() {
    return getParamList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Param list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Param list.
   * @apilevel low-level
   */
  public int getNumParamNoTransform() {
    return getParamListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Param list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Param list.
   * @apilevel high-level
   */
  public PureExp getParam(int i) {
    return (PureExp) getParamList().getChild(i);
  }
  /**
   * Check whether the Param list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasParam() {
    return getParamList().getNumChild() != 0;
  }
  /**
   * Append an element to the Param list.
   * @param node The element to append to the Param list.
   * @apilevel high-level
   */
  public void addParam(PureExp node) {
    List<PureExp> list = (parent == null || state == null) ? getParamListNoTransform() : getParamList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addParamNoTransform(PureExp node) {
    List<PureExp> list = getParamListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Param list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setParam(PureExp node, int i) {
    List<PureExp> list = getParamList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Param list.
   * @return The node representing the Param list.
   * @apilevel high-level
   */
  public List<PureExp> getParamList() {
    List<PureExp> list = (List<PureExp>) getChild(0);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Param list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Param list.
   * @apilevel low-level
   */
  public List<PureExp> getParamListNoTransform() {
    return (List<PureExp>) getChildNoTransform(0);
  }
  /**
   * Retrieves the Param list.
   * @return The node representing the Param list.
   * @apilevel high-level
   */
  public List<PureExp> getParams() {
    return getParamList();
  }
  /**
   * Retrieves the Param list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Param list.
   * @apilevel low-level
   */
  public List<PureExp> getParamsNoTransform() {
    return getParamListNoTransform();
  }
  /**
   * @aspect TypeCheckerExtension
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/ext/TypeCheckerExtension.jadd:310
   */
    public void typeCheck(SemanticErrorList s) {
         int size = s.size();
        refined_TypeChecker_DataConstructorExp_typeCheck(s);
        if (s.size() > size) return;
        
        getModel().getTypeExt().checkDataConstructorExp(this);
   }
  /**
   * @apilevel internal
   */
  protected int getFreeVars_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getFreeVars_computed = false;
  /**
   * @apilevel internal
   */
  protected Set<String> getFreeVars_value;
  /**
   * @attribute syn
   * @aspect VarUsage
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/FreeVars.jrag:58
   */
  public Set<String> getFreeVars() {
    if(getFreeVars_computed) {
      return getFreeVars_value;
    }
    ASTNode$State state = state();
    if (getFreeVars_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getFreeVars in class: org.jastadd.ast.AST.SynDecl");
    }
    getFreeVars_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getFreeVars_value = getFreeVars_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getFreeVars_computed = true;
    } else {
    }

    getFreeVars_visited = -1;
    return getFreeVars_value;
  }
  /**
   * @apilevel internal
   */
  private Set<String> getFreeVars_compute() {
  		HashSet<String> res = new HashSet<String>();
  		for (PureExp e : getParams()) {
  		   res.addAll(e.getFreeVars());
  		}
  		return res;
  	}
  /**
   * @apilevel internal
   */
  protected java.util.Map getFields_FieldUseInfo_visited;
  protected java.util.Map getFields_FieldUseInfo_values;
  /**
   * @attribute syn
   * @aspect FieldUsage
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/FieldAccesses.jrag:135
   */
  public FieldUseInfo getFields(FieldUseInfo fui) {
    Object _parameters = fui;
    if(getFields_FieldUseInfo_visited == null) getFields_FieldUseInfo_visited = new java.util.HashMap(4);
    if(getFields_FieldUseInfo_values == null) getFields_FieldUseInfo_values = new java.util.HashMap(4);
    if(getFields_FieldUseInfo_values.containsKey(_parameters)) {
      return (FieldUseInfo)getFields_FieldUseInfo_values.get(_parameters);
    }
    ASTNode$State state = state();
    if (Integer.valueOf(state().boundariesCrossed).equals(getFields_FieldUseInfo_visited.get(_parameters))) {
      throw new RuntimeException("Circular definition of attr: getFields in class: org.jastadd.ast.AST.SynDecl");
    }
    getFields_FieldUseInfo_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    FieldUseInfo getFields_FieldUseInfo_value = getFields_compute(fui);
    if(isFinal && num == state().boundariesCrossed) {
      getFields_FieldUseInfo_values.put(_parameters, getFields_FieldUseInfo_value);
    } else {
    }

    getFields_FieldUseInfo_visited.remove(_parameters);
    return getFields_FieldUseInfo_value;
  }
  /**
   * @apilevel internal
   */
  private FieldUseInfo getFields_compute(FieldUseInfo fui) {
  	    return new FieldUseInfo(fui.merge(getParams()));
  	}
  /**
   * @apilevel internal
   */
  protected int getDecl_visited = -1;
  /**
   * @attribute syn
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:382
   */
  public Decl getDecl() {
    ASTNode$State state = state();
    if (getDecl_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getDecl in class: org.jastadd.ast.AST.SynDecl");
    }
    getDecl_visited = state().boundariesCrossed;
    try {
           DataConstructor dc = getDataConstructor();
           if (dc == null)
             return Model.unknownDecl;
           else
             return dc;
        }
    finally {
      getDecl_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int getType_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getType_computed = false;
  /**
   * @apilevel internal
   */
  protected Type getType_value;
  /**
   * @attribute syn
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:263
   */
  public Type getType() {
    if(getType_computed) {
      return getType_value;
    }
    ASTNode$State state = state();
    if (getType_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getType in class: org.jastadd.ast.AST.SynDecl");
    }
    getType_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getType_value = getType_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getType_computed = true;
    } else {
    }

    getType_visited = -1;
    return getType_value;
  }
  /**
   * @apilevel internal
   */
  private Type getType_compute() {
  
  	 DataConstructor d = getDataConstructor();
  	 if (d == null)
  	   return UnknownType.INSTANCE;
     	 DataTypeDecl dataDecl = d.getDataTypeDecl();
     	 Type declaredResultType = dataDecl.getType();
     	 if (dataDecl instanceof ParametricDataTypeDecl) {
     	     if (d.getConstructorArgs().getNumChild() != getParams().getNumChild())
     	         return UnknownType.INSTANCE;
     		 Map<TypeParameter, Type> typeBinding = getTypeParamBinding(d,d);
     		 return declaredResultType.applyBinding(typeBinding);
     	 } else {
     		 return declaredResultType;
     	 }
     	 
      }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
