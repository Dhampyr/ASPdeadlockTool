/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:91
 * @production ModifyClassModifier : {@link ClassModifier} ::= <span class="component">&lt;Name:String&gt;</span> <span class="component">AddedInterface:{@link InterfaceTypeUse}*</span> <span class="component">RemovedInterface:{@link InterfaceTypeUse}*</span> <span class="component">{@link Modifier}*</span>;

 */
public class ModifyClassModifier extends ClassModifier implements Cloneable {
  /**
   * @aspect GenerateJavaDynamic_DeltaModelling
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:1067
   */
  public void generateJavaDynamic(PrintStream stream) {
        for (Modifier m : getModifiers()) {
            m.generateJavaDynamic(stream);
        }
        // generate application method, which applies all modifications to a copy of a given class
        stream.println();
        stream.println("public static void apply() {");
        stream.println(ABSDynamicClass.class.getName() + " cls = " + JavaBackend.getClassName(findModule().getName() + "." + getSimpleName()) + ".singleton();");
        stream.println(ABSDynamicClass.class.getName() + " clsNew = cls.createNextVersion();");
        for (Modifier m : getModifiers()) {
            m.generateJavaDynamicApplication(stream, generatedJavaClassName);
            // System.out.println("generated " + m.getClass());
        }
        stream.println(JavaBackend.getClassName(findModule().getName() + "." + getSimpleName()) + ".setInstance(clsNew);");
        stream.println("}");
        
        // TODO handle interface additions & removals
    }
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:564
   */
  public void doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("modifies class ");
        stream.print(getName());

        if (getNumAddedInterface() > 0) {
            stream.print(" adds ");
            getAddedInterfaceList().doPrettyPrint(stream, formatter, ",");
        }
        // TODO deal with removedInterfaceList

        formatter.beforeOpenBrace();
        stream.println("{");
        formatter.afterOpenBrace();

        List<Modifier> mms = getModifierList();
        if (mms.getNumChild() > 0) {
            mms.doPrettyPrint(stream, formatter);
            stream.println();
            formatter.afterStmt();
        }

        formatter.beforeCloseBrace();
        stream.print("}");
        formatter.afterCloseBrace();
    }
  /**
   * @aspect DeltaModifierApplicator
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/delta/DeltaModifierApplicator.jadd:39
   */
  public void apply() throws DeltaModellingException {
        ClassDecl cls = findClass();
        if (cls == null)
           throw new DeltaModellingException(getDelta(), 
                " wants to modify class [" + getName() + "], which was not found.");

        
        // add any interfaces added by the ClassModifier
        for (InterfaceTypeUse iface : this.getAddedInterfaces()) {
            InterfaceTypeUse iface2 = iface.fullCopy();
            iface2.setFileName(iface.getFileName());
            cls.addImplementedInterfaceUse(iface2);
        }

        // remove any interfaces removed by the ClassModifier
        for (InterfaceTypeUse toRemove : this.getRemovedInterfaces()) {
            boolean found = false;
            for (InterfaceTypeUse iface : cls.getImplementedInterfaceUseList()) {
                if (iface.getName().equals(toRemove.getName())) {
                    cls.getImplementedInterfaceUseList().removeChild(cls.getImplementedInterfaceUseList().getIndexOfChild(iface));
                    found = true;
                    break;
                }
            }
            if (! found)
                throw new DeltaModellingException(getDelta(), 
                    " wants to remove interface [" + toRemove.getName() + "] from class [" + cls.getName() 
                    + "]. However, the class does not implement that interface.");
        }

        // apply all modifiers
        for (Modifier mod : this.getModifiers()) {
            mod.applyTo(cls);
        }
    }
  /**
   * @aspect DeltaParameterSubstitution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/delta/DeltaParameterSubstitution.jadd:118
   */
  protected void applySubstitution(Map<String,Value> subst) throws DeltaModellingWithNodeException {
        for (Modifier m : getModifiers()) 
            m.applySubstitution(subst);
    }
  /**
   * @aspect MyDumpTree
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/tests/MyDumpTree.jadd:193
   */
  protected void printInfo(PrintStream stream)
    {
    	stream.print(this.getName());
    }
  /**
   * @aspect PrettyPrint
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/tests/PrettyPrint.jadd:138
   */
  public void prettyPrintChildren(PrintWriter w, ABSFormatter f) {
        w.print(getName());
        w.print(' ');
        super.prettyPrintChildren(w,f);   
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:167
   */
  public ModifyClassModifier parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect TypeCheckProductline
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:965
   */
  protected void typeCheck(SemanticErrorList e) {
        super.typeCheck(e);
        //TODO
        
    }
  /**
   * @declaredat ASTNode:1
   */
  public ModifyClassModifier() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[3];
    setChild(new List(), 0);
    setChild(new List(), 1);
    setChild(new List(), 2);
  }
  /**
   * @declaredat ASTNode:16
   */
  public ModifyClassModifier(String p0, List<InterfaceTypeUse> p1, List<InterfaceTypeUse> p2, List<Modifier> p3) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
    setChild(p3, 2);
  }
  /**
   * @declaredat ASTNode:22
   */
  public ModifyClassModifier(beaver.Symbol p0, List<InterfaceTypeUse> p1, List<InterfaceTypeUse> p2, List<Modifier> p3) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
    setChild(p3, 2);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:31
   */
  protected int numChildren() {
    return 3;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:37
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:43
   */
  public void flushCache() {
    super.flushCache();
    targetClassName_visited = -1;
    targetQualifiedClassName_visited = -1;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:51
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:57
   */
  public ModifyClassModifier clone() throws CloneNotSupportedException {
    ModifyClassModifier node = (ModifyClassModifier) super.clone();
    node.targetClassName_visited = -1;
    node.targetQualifiedClassName_visited = -1;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:68
   */
  public ModifyClassModifier copy() {
    try {
      ModifyClassModifier node = (ModifyClassModifier) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:86
   */
  public ModifyClassModifier fullCopy() {
    ModifyClassModifier tree = (ModifyClassModifier) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the lexeme Name.
   * @param value The new value for the lexeme Name.
   * @apilevel high-level
   */
  public void setName(String value) {
    tokenString_Name = value;
  }
  /**
   * @apilevel internal
   */
  protected String tokenString_Name;
  /**
   */
  public int Namestart;
  /**
   */
  public int Nameend;
  /**
   * JastAdd-internal setter for lexeme Name using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme Name
   * @apilevel internal
   */
  public void setName(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setName is only valid for String lexemes");
    tokenString_Name = (String)symbol.value;
    Namestart = symbol.getStart();
    Nameend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme Name.
   * @return The value for the lexeme Name.
   * @apilevel high-level
   */
  public String getName() {
    return tokenString_Name != null ? tokenString_Name : "";
  }
  /**
   * Replaces the AddedInterface list.
   * @param list The new list node to be used as the AddedInterface list.
   * @apilevel high-level
   */
  public void setAddedInterfaceList(List<InterfaceTypeUse> list) {
    setChild(list, 0);
  }
  /**
   * Retrieves the number of children in the AddedInterface list.
   * @return Number of children in the AddedInterface list.
   * @apilevel high-level
   */
  public int getNumAddedInterface() {
    return getAddedInterfaceList().getNumChild();
  }
  /**
   * Retrieves the number of children in the AddedInterface list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the AddedInterface list.
   * @apilevel low-level
   */
  public int getNumAddedInterfaceNoTransform() {
    return getAddedInterfaceListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the AddedInterface list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the AddedInterface list.
   * @apilevel high-level
   */
  public InterfaceTypeUse getAddedInterface(int i) {
    return (InterfaceTypeUse) getAddedInterfaceList().getChild(i);
  }
  /**
   * Check whether the AddedInterface list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasAddedInterface() {
    return getAddedInterfaceList().getNumChild() != 0;
  }
  /**
   * Append an element to the AddedInterface list.
   * @param node The element to append to the AddedInterface list.
   * @apilevel high-level
   */
  public void addAddedInterface(InterfaceTypeUse node) {
    List<InterfaceTypeUse> list = (parent == null || state == null) ? getAddedInterfaceListNoTransform() : getAddedInterfaceList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addAddedInterfaceNoTransform(InterfaceTypeUse node) {
    List<InterfaceTypeUse> list = getAddedInterfaceListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the AddedInterface list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setAddedInterface(InterfaceTypeUse node, int i) {
    List<InterfaceTypeUse> list = getAddedInterfaceList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the AddedInterface list.
   * @return The node representing the AddedInterface list.
   * @apilevel high-level
   */
  public List<InterfaceTypeUse> getAddedInterfaceList() {
    List<InterfaceTypeUse> list = (List<InterfaceTypeUse>) getChild(0);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the AddedInterface list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the AddedInterface list.
   * @apilevel low-level
   */
  public List<InterfaceTypeUse> getAddedInterfaceListNoTransform() {
    return (List<InterfaceTypeUse>) getChildNoTransform(0);
  }
  /**
   * Retrieves the AddedInterface list.
   * @return The node representing the AddedInterface list.
   * @apilevel high-level
   */
  public List<InterfaceTypeUse> getAddedInterfaces() {
    return getAddedInterfaceList();
  }
  /**
   * Retrieves the AddedInterface list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the AddedInterface list.
   * @apilevel low-level
   */
  public List<InterfaceTypeUse> getAddedInterfacesNoTransform() {
    return getAddedInterfaceListNoTransform();
  }
  /**
   * Replaces the RemovedInterface list.
   * @param list The new list node to be used as the RemovedInterface list.
   * @apilevel high-level
   */
  public void setRemovedInterfaceList(List<InterfaceTypeUse> list) {
    setChild(list, 1);
  }
  /**
   * Retrieves the number of children in the RemovedInterface list.
   * @return Number of children in the RemovedInterface list.
   * @apilevel high-level
   */
  public int getNumRemovedInterface() {
    return getRemovedInterfaceList().getNumChild();
  }
  /**
   * Retrieves the number of children in the RemovedInterface list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the RemovedInterface list.
   * @apilevel low-level
   */
  public int getNumRemovedInterfaceNoTransform() {
    return getRemovedInterfaceListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the RemovedInterface list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the RemovedInterface list.
   * @apilevel high-level
   */
  public InterfaceTypeUse getRemovedInterface(int i) {
    return (InterfaceTypeUse) getRemovedInterfaceList().getChild(i);
  }
  /**
   * Check whether the RemovedInterface list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasRemovedInterface() {
    return getRemovedInterfaceList().getNumChild() != 0;
  }
  /**
   * Append an element to the RemovedInterface list.
   * @param node The element to append to the RemovedInterface list.
   * @apilevel high-level
   */
  public void addRemovedInterface(InterfaceTypeUse node) {
    List<InterfaceTypeUse> list = (parent == null || state == null) ? getRemovedInterfaceListNoTransform() : getRemovedInterfaceList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addRemovedInterfaceNoTransform(InterfaceTypeUse node) {
    List<InterfaceTypeUse> list = getRemovedInterfaceListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the RemovedInterface list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setRemovedInterface(InterfaceTypeUse node, int i) {
    List<InterfaceTypeUse> list = getRemovedInterfaceList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the RemovedInterface list.
   * @return The node representing the RemovedInterface list.
   * @apilevel high-level
   */
  public List<InterfaceTypeUse> getRemovedInterfaceList() {
    List<InterfaceTypeUse> list = (List<InterfaceTypeUse>) getChild(1);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the RemovedInterface list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the RemovedInterface list.
   * @apilevel low-level
   */
  public List<InterfaceTypeUse> getRemovedInterfaceListNoTransform() {
    return (List<InterfaceTypeUse>) getChildNoTransform(1);
  }
  /**
   * Retrieves the RemovedInterface list.
   * @return The node representing the RemovedInterface list.
   * @apilevel high-level
   */
  public List<InterfaceTypeUse> getRemovedInterfaces() {
    return getRemovedInterfaceList();
  }
  /**
   * Retrieves the RemovedInterface list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the RemovedInterface list.
   * @apilevel low-level
   */
  public List<InterfaceTypeUse> getRemovedInterfacesNoTransform() {
    return getRemovedInterfaceListNoTransform();
  }
  /**
   * Replaces the Modifier list.
   * @param list The new list node to be used as the Modifier list.
   * @apilevel high-level
   */
  public void setModifierList(List<Modifier> list) {
    setChild(list, 2);
  }
  /**
   * Retrieves the number of children in the Modifier list.
   * @return Number of children in the Modifier list.
   * @apilevel high-level
   */
  public int getNumModifier() {
    return getModifierList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Modifier list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Modifier list.
   * @apilevel low-level
   */
  public int getNumModifierNoTransform() {
    return getModifierListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Modifier list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Modifier list.
   * @apilevel high-level
   */
  public Modifier getModifier(int i) {
    return (Modifier) getModifierList().getChild(i);
  }
  /**
   * Check whether the Modifier list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasModifier() {
    return getModifierList().getNumChild() != 0;
  }
  /**
   * Append an element to the Modifier list.
   * @param node The element to append to the Modifier list.
   * @apilevel high-level
   */
  public void addModifier(Modifier node) {
    List<Modifier> list = (parent == null || state == null) ? getModifierListNoTransform() : getModifierList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addModifierNoTransform(Modifier node) {
    List<Modifier> list = getModifierListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Modifier list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setModifier(Modifier node, int i) {
    List<Modifier> list = getModifierList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Modifier list.
   * @return The node representing the Modifier list.
   * @apilevel high-level
   */
  public List<Modifier> getModifierList() {
    List<Modifier> list = (List<Modifier>) getChild(2);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Modifier list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Modifier list.
   * @apilevel low-level
   */
  public List<Modifier> getModifierListNoTransform() {
    return (List<Modifier>) getChildNoTransform(2);
  }
  /**
   * Retrieves the Modifier list.
   * @return The node representing the Modifier list.
   * @apilevel high-level
   */
  public List<Modifier> getModifiers() {
    return getModifierList();
  }
  /**
   * Retrieves the Modifier list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Modifier list.
   * @apilevel low-level
   */
  public List<Modifier> getModifiersNoTransform() {
    return getModifierListNoTransform();
  }
  /**
   * @apilevel internal
   */
  protected int targetClassName_visited = -1;
  /**
   * @attribute syn
   * @aspect TargetClassName
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeNames.jrag:43
   */
  public String targetClassName() {
    ASTNode$State state = state();
    if (targetClassName_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: targetClassName in class: org.jastadd.ast.AST.SynDecl");
    }
    targetClassName_visited = state().boundariesCrossed;
    try {  return this.getSimpleName();  }
    finally {
      targetClassName_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int targetQualifiedClassName_visited = -1;
  /**
   * @attribute syn
   * @aspect TargetQualifiedClassName
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeNames.jrag:52
   */
  public String targetQualifiedClassName() {
    ASTNode$State state = state();
    if (targetQualifiedClassName_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: targetQualifiedClassName in class: org.jastadd.ast.AST.SynDecl");
    }
    targetQualifiedClassName_visited = state().boundariesCrossed;
    try {  return this.qualifiedName();  }
    finally {
      targetQualifiedClassName_visited = -1;
    }
  }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeNames.jrag:11
   * @apilevel internal
   */
  public String Define_String_deltaName(ASTNode caller, ASTNode child) {
    if (caller == getModifierListNoTransform()) {
      int childIndex = caller.getIndexOfChild(child);
      return this.deltaName();
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_String_deltaName(this, caller);
    }
  }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeNames.jrag:38
   * @apilevel internal
   */
  public String Define_String_targetModuleName(ASTNode caller, ASTNode child) {
    if (caller == getModifierListNoTransform()) {
      int childIndex = caller.getIndexOfChild(child);
      return this.targetModuleName();
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_String_targetModuleName(this, caller);
    }
  }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeNames.jrag:47
   * @apilevel internal
   */
  public String Define_String_targetClassName(ASTNode caller, ASTNode child) {
    if (caller == getModifierListNoTransform()) {
      int childIndex = caller.getIndexOfChild(child);
      return this.getSimpleName();
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_String_targetClassName(this, caller);
    }
  }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeNames.jrag:56
   * @apilevel internal
   */
  public String Define_String_targetQualifiedClassName(ASTNode caller, ASTNode child) {
    if (caller == getModifierListNoTransform()) {
      int childIndex = caller.getIndexOfChild(child);
      return this.qualifiedName();
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_String_targetQualifiedClassName(this, caller);
    }
  }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeReferences.jrag:10
   * @apilevel internal
   */
  public Model Define_Model_getModel(ASTNode caller, ASTNode child) {
    if (caller == getModifierListNoTransform()) {
      int childIndex = caller.getIndexOfChild(child);
      return this.getDelta().getModel();
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_Model_getModel(this, caller);
    }
  }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeReferences.jrag:20
   * @apilevel internal
   */
  public DeltaDecl Define_DeltaDecl_getDelta(ASTNode caller, ASTNode child) {
    if (caller == getModifierListNoTransform()) {
      int childIndex = caller.getIndexOfChild(child);
      return this.getDelta();
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_DeltaDecl_getDelta(this, caller);
    }
  }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeReferences.jrag:49
   * @apilevel internal
   */
  public ModifyClassModifier Define_ModifyClassModifier_getModifyClassModifier(ASTNode caller, ASTNode child) {
    if (caller == getModifierListNoTransform()) {
      int childIndex = caller.getIndexOfChild(child);
      return this;
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_ModifyClassModifier_getModifyClassModifier(this, caller);
    }
  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
