/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/mTVL.ast:11
 * @production FExt : {@link ASTNode} ::= <span class="component">&lt;Name:String&gt;</span> <span class="component">[{@link Group}]</span> <span class="component">{@link AttrConstraints}</span>;

 */
public class FExt extends ASTNode<ASTNode> implements Cloneable {
  /**
   * @aspect CSP
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/mtvl/CSP.jadd:95
   */
  public void dropAttributes() {
	  List<Constr> constrs = getAttrConstraints().getConstrs();
	  for (int i = constrs.getNumChildNoTransform()-1; i>=0; i--) {
		  if (constrs.getChild(i).hasAttributes())
			  constrs.removeChild(i);
	  }
//    setAttrConstraints(new AttrConstraints(new List<Attribute>(),new List<Constr>()));
	  if (hasGroup())
		  for (FNode f: getGroup().getFNodes())
			  f.getFeat().dropAttributes();
  }
  /**
   * @aspect CSP
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/mtvl/CSP.jadd:276
   */
  public Constraint collectConstraints(ChocoSolver s) {
    AttrConstraints acl = getAttrConstraints();
    for(int i = 0; i < acl.getNumConstr(); i++)
      s.addConstraint(acl.getConstr(i).collectConstraints(s));

    if (hasGroup())
        getGroup().includeGroupConstraints(s,getName());

    return Choco.TRUE;
  }
  /**
   * @aspect ErrorCheck
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/mtvl/ErrorCheck.jadd:32
   */
  public void collectErrors(SemanticErrorList c) {
    super.collectErrors(c);
    if (!((Model)calcContextNode(Model.class)).features().contains(getName()))
      c.add(new SemanticError(this,ErrorMessage.UNDECLARED_VARIABLE,getName()));
    AttrConstraints acl = getAttrConstraints();
    for(int i = 0; i < acl.getNumConstr(); i++)
      acl.getConstr(i).checkType(Types.BOOL,c);
    // check leafs
    if (hasGroup()) {
        Set<String> nonLeafs = getNonLeafs();
        if (nonLeafs.contains(getName())) {
            c.add(new SemanticError(this,ErrorMessage.NOT_A_LEAF,getName()));
        }
    }
  }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:88
   */
  public FExt parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @declaredat ASTNode:1
   */
  public FExt() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[2];
    setChild(new Opt(), 0);
  }
  /**
   * @declaredat ASTNode:14
   */
  public FExt(String p0, Opt<Group> p1, AttrConstraints p2) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
  }
  /**
   * @declaredat ASTNode:19
   */
  public FExt(beaver.Symbol p0, Opt<Group> p1, AttrConstraints p2) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:27
   */
  protected int numChildren() {
    return 2;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:33
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:39
   */
  public void flushCache() {
    super.flushCache();
    getNonLeafs_visited = -1;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:46
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:52
   */
  public FExt clone() throws CloneNotSupportedException {
    FExt node = (FExt) super.clone();
    node.getNonLeafs_visited = -1;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:62
   */
  public FExt copy() {
    try {
      FExt node = (FExt) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:80
   */
  public FExt fullCopy() {
    FExt tree = (FExt) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the lexeme Name.
   * @param value The new value for the lexeme Name.
   * @apilevel high-level
   */
  public void setName(String value) {
    tokenString_Name = value;
  }
  /**
   * @apilevel internal
   */
  protected String tokenString_Name;
  /**
   */
  public int Namestart;
  /**
   */
  public int Nameend;
  /**
   * JastAdd-internal setter for lexeme Name using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme Name
   * @apilevel internal
   */
  public void setName(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setName is only valid for String lexemes");
    tokenString_Name = (String)symbol.value;
    Namestart = symbol.getStart();
    Nameend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme Name.
   * @return The value for the lexeme Name.
   * @apilevel high-level
   */
  public String getName() {
    return tokenString_Name != null ? tokenString_Name : "";
  }
  /**
   * Replaces the optional node for the Group child. This is the <code>Opt</code>
   * node containing the child Group, not the actual child!
   * @param opt The new node to be used as the optional node for the Group child.
   * @apilevel low-level
   */
  public void setGroupOpt(Opt<Group> opt) {
    setChild(opt, 0);
  }
  /**
   * Replaces the (optional) Group child.
   * @param node The new node to be used as the Group child.
   * @apilevel high-level
   */
  public void setGroup(Group node) {
    getGroupOpt().setChild(node, 0);
  }
  /**
   * Check whether the optional Group child exists.
   * @return {@code true} if the optional Group child exists, {@code false} if it does not.
   * @apilevel high-level
   */
  public boolean hasGroup() {
    return getGroupOpt().getNumChild() != 0;
  }
  /**
   * Retrieves the (optional) Group child.
   * @return The Group child, if it exists. Returns {@code null} otherwise.
   * @apilevel low-level
   */
  public Group getGroup() {
    return (Group) getGroupOpt().getChild(0);
  }
  /**
   * Retrieves the optional node for the Group child. This is the <code>Opt</code> node containing the child Group, not the actual child!
   * @return The optional node for child the Group child.
   * @apilevel low-level
   */
  public Opt<Group> getGroupOpt() {
    return (Opt<Group>) getChild(0);
  }
  /**
   * Retrieves the optional node for child Group. This is the <code>Opt</code> node containing the child Group, not the actual child!
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The optional node for child Group.
   * @apilevel low-level
   */
  public Opt<Group> getGroupOptNoTransform() {
    return (Opt<Group>) getChildNoTransform(0);
  }
  /**
   * Replaces the AttrConstraints child.
   * @param node The new node to replace the AttrConstraints child.
   * @apilevel high-level
   */
  public void setAttrConstraints(AttrConstraints node) {
    setChild(node, 1);
  }
  /**
   * Retrieves the AttrConstraints child.
   * @return The current node used as the AttrConstraints child.
   * @apilevel high-level
   */
  public AttrConstraints getAttrConstraints() {
    return (AttrConstraints) getChild(1);
  }
  /**
   * Retrieves the AttrConstraints child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the AttrConstraints child.
   * @apilevel low-level
   */
  public AttrConstraints getAttrConstraintsNoTransform() {
    return (AttrConstraints) getChildNoTransform(1);
  }
  /**
   * @attribute inh
   * @aspect VerifyLeafs
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/mtvl/verifyLeafs.jadd:21
   */
  public Set<String> getNonLeafs() {
    ASTNode$State state = state();
    if (getNonLeafs_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getNonLeafs in class: org.jastadd.ast.AST.InhDecl");
    }
    getNonLeafs_visited = state().boundariesCrossed;
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    Set<String> getNonLeafs_value = getParent().Define_Set_String__getNonLeafs(this, null);

    getNonLeafs_visited = -1;
    return getNonLeafs_value;
  }
  /**
   * @apilevel internal
   */
  protected int getNonLeafs_visited = -1;
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/mtvl/Variables.jrag:31
   * @apilevel internal
   */
  public String Define_String_pname(ASTNode caller, ASTNode child) {
    if (caller == getAttrConstraintsNoTransform()) {
      return this.getName();
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_String_pname(this, caller);
    }
  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
