/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/mTVL.ast:15
 * @production AttrConstraints : {@link ASTNode} ::= <span class="component">{@link Attribute}*</span> <span class="component">{@link Constr}*</span>;

 */
public class AttrConstraints extends ASTNode<ASTNode> implements Cloneable {
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:30
   */
  public AttrConstraints parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @declaredat ASTNode:1
   */
  public AttrConstraints() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[2];
    setChild(new List(), 0);
    setChild(new List(), 1);
  }
  /**
   * @declaredat ASTNode:15
   */
  public AttrConstraints(List<Attribute> p0, List<Constr> p1) {
    setChild(p0, 0);
    setChild(p1, 1);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:22
   */
  protected int numChildren() {
    return 2;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:28
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:34
   */
  public void flushCache() {
    super.flushCache();
    pname_visited = -1;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:41
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:47
   */
  public AttrConstraints clone() throws CloneNotSupportedException {
    AttrConstraints node = (AttrConstraints) super.clone();
    node.pname_visited = -1;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:57
   */
  public AttrConstraints copy() {
    try {
      AttrConstraints node = (AttrConstraints) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:75
   */
  public AttrConstraints fullCopy() {
    AttrConstraints tree = (AttrConstraints) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the Attribute list.
   * @param list The new list node to be used as the Attribute list.
   * @apilevel high-level
   */
  public void setAttributeList(List<Attribute> list) {
    setChild(list, 0);
  }
  /**
   * Retrieves the number of children in the Attribute list.
   * @return Number of children in the Attribute list.
   * @apilevel high-level
   */
  public int getNumAttribute() {
    return getAttributeList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Attribute list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Attribute list.
   * @apilevel low-level
   */
  public int getNumAttributeNoTransform() {
    return getAttributeListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Attribute list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Attribute list.
   * @apilevel high-level
   */
  public Attribute getAttribute(int i) {
    return (Attribute) getAttributeList().getChild(i);
  }
  /**
   * Check whether the Attribute list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasAttribute() {
    return getAttributeList().getNumChild() != 0;
  }
  /**
   * Append an element to the Attribute list.
   * @param node The element to append to the Attribute list.
   * @apilevel high-level
   */
  public void addAttribute(Attribute node) {
    List<Attribute> list = (parent == null || state == null) ? getAttributeListNoTransform() : getAttributeList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addAttributeNoTransform(Attribute node) {
    List<Attribute> list = getAttributeListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Attribute list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setAttribute(Attribute node, int i) {
    List<Attribute> list = getAttributeList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Attribute list.
   * @return The node representing the Attribute list.
   * @apilevel high-level
   */
  public List<Attribute> getAttributeList() {
    List<Attribute> list = (List<Attribute>) getChild(0);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Attribute list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Attribute list.
   * @apilevel low-level
   */
  public List<Attribute> getAttributeListNoTransform() {
    return (List<Attribute>) getChildNoTransform(0);
  }
  /**
   * Retrieves the Attribute list.
   * @return The node representing the Attribute list.
   * @apilevel high-level
   */
  public List<Attribute> getAttributes() {
    return getAttributeList();
  }
  /**
   * Retrieves the Attribute list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Attribute list.
   * @apilevel low-level
   */
  public List<Attribute> getAttributesNoTransform() {
    return getAttributeListNoTransform();
  }
  /**
   * Replaces the Constr list.
   * @param list The new list node to be used as the Constr list.
   * @apilevel high-level
   */
  public void setConstrList(List<Constr> list) {
    setChild(list, 1);
  }
  /**
   * Retrieves the number of children in the Constr list.
   * @return Number of children in the Constr list.
   * @apilevel high-level
   */
  public int getNumConstr() {
    return getConstrList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Constr list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Constr list.
   * @apilevel low-level
   */
  public int getNumConstrNoTransform() {
    return getConstrListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Constr list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Constr list.
   * @apilevel high-level
   */
  public Constr getConstr(int i) {
    return (Constr) getConstrList().getChild(i);
  }
  /**
   * Check whether the Constr list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasConstr() {
    return getConstrList().getNumChild() != 0;
  }
  /**
   * Append an element to the Constr list.
   * @param node The element to append to the Constr list.
   * @apilevel high-level
   */
  public void addConstr(Constr node) {
    List<Constr> list = (parent == null || state == null) ? getConstrListNoTransform() : getConstrList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addConstrNoTransform(Constr node) {
    List<Constr> list = getConstrListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Constr list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setConstr(Constr node, int i) {
    List<Constr> list = getConstrList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Constr list.
   * @return The node representing the Constr list.
   * @apilevel high-level
   */
  public List<Constr> getConstrList() {
    List<Constr> list = (List<Constr>) getChild(1);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Constr list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Constr list.
   * @apilevel low-level
   */
  public List<Constr> getConstrListNoTransform() {
    return (List<Constr>) getChildNoTransform(1);
  }
  /**
   * Retrieves the Constr list.
   * @return The node representing the Constr list.
   * @apilevel high-level
   */
  public List<Constr> getConstrs() {
    return getConstrList();
  }
  /**
   * Retrieves the Constr list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Constr list.
   * @apilevel low-level
   */
  public List<Constr> getConstrsNoTransform() {
    return getConstrListNoTransform();
  }
  /**
   * @attribute inh
   * @aspect Variables
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/mtvl/Variables.jrag:29
   */
  public String pname() {
    ASTNode$State state = state();
    if (pname_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: pname in class: org.jastadd.ast.AST.InhDecl");
    }
    pname_visited = state().boundariesCrossed;
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    String pname_value = getParent().Define_String_pname(this, null);

    pname_visited = -1;
    return pname_value;
  }
  /**
   * @apilevel internal
   */
  protected int pname_visited = -1;
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
