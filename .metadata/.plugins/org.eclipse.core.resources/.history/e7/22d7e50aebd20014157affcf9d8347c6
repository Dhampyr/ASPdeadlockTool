/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:178
 * @production Block : {@link Stmt} ::= <span class="component">Stmt:{@link Stmt}*</span>;

 */
public class Block extends Stmt implements Cloneable, HasCogs {
  /**
   * @aspect GenerateCoreABS
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/coreabs/GenerateCoreAbs.jadd:100
   */
  public int hasRewriteBlockAt() {
      for(int i=0;i<getNumStmtNoTransform();i++) {
        if (getStmtsNoTransform().getChild(i) instanceof RewriteBlock)
          return i;
      }
      return -1;
    }
  /**
   * @aspect GenerateErlang
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/erlang/GenerateErlang.jadd:157
   */
  @Override
  public void generateErlangCode(ErlangCodeStream ecs,Vars vars)
  {
    boolean first=true;
    for (Stmt stmt : getStmts()) {
      if(!first)
        ecs.println(",");
      first=false;
      PureExp cost = MaudeCompilerHelper.getAnnotationValue(stmt.getAnnotationList(), "Cost");
      if (cost != null) {
          ecs.print("task:block_for_resource(Cog,cpu,");
          cost.generateErlangCode(ecs, vars);
          ecs.println(",Stack),");
      }
      stmt.generateErlangCode(ecs,vars);
    }
    if(first)
      ecs.print("ok");
  }
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:324
   */
  public void generateJava(PrintStream stream) {
        generateJava(stream, false);
    }
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:328
   */
  public void generateJava(PrintStream stream, boolean addReturn) {
        stream.println(" {");

        super.generateJava(stream);
        if (this instanceof MainBlock || this instanceof InitBlock) {
            stream.print("if (__ABS_getRuntime().debuggingEnabled()) ");
            String name = "init block";
            if (this instanceof MainBlock)
                name = "main block";
            stream.println("__ABS_getRuntime().getCurrentTask().newStackFrame(this,\"" + name + "\");");
        }

        for (Stmt stmt : getStmts()) {
            stmt.generateJava(stream);
        }

        if (this instanceof MainBlock) {
            for (VarDecl v : getVars()) {
                if (v.getName().equals("testresult")) {
                    stream.println("System.out.println(\"__ABS_TESTRESULT=\" + testresult.toBoolean());");
                }
            }
        }

        if (addReturn) {
            stream.println(JavaGeneratorHelper.getDebugString(this, getEndLine()));

            stream.print("if (__ABS_getRuntime().debuggingEnabled()) ");
            stream.println("__ABS_getRuntime().getCurrentTask().popStackFrame();");

            stream.println("return " + JavaBackendConstants.UNITVALUE + ";");
        }
        stream.println("}");
    }
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:361
   */
  public void generateJavaDynamic(PrintStream stream) {
        generateJavaDynamic(stream, false);
    }
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:365
   */
  public void generateJavaDynamic(PrintStream stream, boolean addReturn) {
        stream.println("{");

        super.generateJavaDynamic(stream);
        if (this instanceof MainBlock || this instanceof InitBlock) {
            stream.print("if (thisP.__ABS_getRuntime().debuggingEnabled()) ");
            String name = "init block";
            if (this instanceof MainBlock)
                name = "main block";
            stream.println("thisP.__ABS_getRuntime().getCurrentTask().newStackFrame(thisP,\"" + name + "\");");
        }

        for (Stmt stmt : getStmts()) {
            stmt.generateJavaDynamic(stream);
        }

        if (this instanceof MainBlock) {
            for (VarDecl v : getVars()) {
                if (v.getName().equals("testresult")) {
                    stream.println("System.out.println(\"__ABS_TESTRESULT=\" + testresult.toBoolean());");
                }
            }
        }

        if (addReturn) {
            stream.println(DynamicJavaGeneratorHelper.getDebugString(this, this.getEnd()));

            stream.print("if (thisP.__ABS_getRuntime().debuggingEnabled()) ");
            stream.println("thisP.__ABS_getRuntime().getCurrentTask().popStackFrame();");

            stream.println("return " + JavaBackendConstants.UNITVALUE + ";");
        }
        stream.println("}");
    }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:929
   */
  public void generateMaude(PrintStream stream) {
        stream.print("$beginscope ");
        for (Stmt stmt : getStmts()) {
            stream.print("; ");
            stmt.generateMaude(stream);
        }
        stream.print("; $endscope ");
	}
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:200
   */
  public void doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        getAnnotationList().doPrettyPrint(stream, formatter, "");
        if (getNumAnnotation() > 0) {
            stream.println();
            formatter.afterStmt();
        }
        formatter.beforeOpenBrace();
        stream.println("{");
        formatter.afterOpenBrace();
        formatter.afterStmt();
        getStmtList().doPrettyPrint(stream, formatter);
        stream.println();
        formatter.beforeCloseBrace();
        formatter.afterStmt();
        stream.print("}");
        formatter.afterCloseBrace();
    }
  /**
   * @aspect GenerateProlog
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prolog/GenerateProlog.jadd:655
   */
  public void generateProlog(PrintStream s,ReachabilityInformation reachInfo){
        //generates block(localVariablesDeclarationList,statementsList)
        //note: the local variables declarations are also in statements 
        Collection<VarDecl> vars =this.getVars();
        Iterator<VarDecl> it=vars.iterator();
        s.print("block([");
        if(it.hasNext()){
            it.next().generateProlog(s,reachInfo);
            while(it.hasNext()){
                s.print(",");
                it.next().generateProlog(s,reachInfo);
            }
        }
        s.print("],[");
        List<?> stmts = (List<?>) getChild(1);
        int n = stmts.getNumChild();
        for (int i = 0; i < n; i++){
            stmts.getChild(i).generateProlog(s,reachInfo);
            if (i != n-1) s.print(",");
        }
        s.print("])");
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:36
   */
  public Block parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:420
   */
  public void refined_TypeChecker_Block_typeCheck(SemanticErrorList e) {
        for (Stmt s : getStmts()) {
            s.typeCheck(e);
        }
    }
  /**
   * @declaredat ASTNode:1
   */
  public Block() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[2];
    setChild(new List(), 0);
    setChild(new List(), 1);
  }
  /**
   * @declaredat ASTNode:15
   */
  public Block(List<Annotation> p0, List<Stmt> p1) {
    setChild(p0, 0);
    setChild(p1, 1);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:22
   */
  protected int numChildren() {
    return 2;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:28
   */
  public boolean mayHaveRewrite() {
    return true;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:34
   */
  public void flushCache() {
    super.flushCache();
    getNumberOfNewCogExpr_visited = -1;
    getNumberOfNewCogExpr_computed = false;
    getNumVar_visited = -1;
    getVars_visited = -1;
    getVars_computed = false;
    getVars_value = null;
    sqlBlockRewriteRequired_visited = -1;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:47
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:53
   */
  public Block clone() throws CloneNotSupportedException {
    Block node = (Block) super.clone();
    node.getNumberOfNewCogExpr_visited = -1;
    node.getNumberOfNewCogExpr_computed = false;
    node.getNumVar_visited = -1;
    node.getVars_visited = -1;
    node.getVars_computed = false;
    node.getVars_value = null;
    node.sqlBlockRewriteRequired_visited = -1;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:69
   */
  public Block copy() {
    try {
      Block node = (Block) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:87
   */
  public Block fullCopy() {
    Block tree = (Block) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the Annotation list.
   * @param list The new list node to be used as the Annotation list.
   * @apilevel high-level
   */
  public void setAnnotationList(List<Annotation> list) {
    setChild(list, 0);
  }
  /**
   * Retrieves the number of children in the Annotation list.
   * @return Number of children in the Annotation list.
   * @apilevel high-level
   */
  public int getNumAnnotation() {
    return getAnnotationList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Annotation list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Annotation list.
   * @apilevel low-level
   */
  public int getNumAnnotationNoTransform() {
    return getAnnotationListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Annotation list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Annotation list.
   * @apilevel high-level
   */
  public Annotation getAnnotation(int i) {
    return (Annotation) getAnnotationList().getChild(i);
  }
  /**
   * Check whether the Annotation list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasAnnotation() {
    return getAnnotationList().getNumChild() != 0;
  }
  /**
   * Append an element to the Annotation list.
   * @param node The element to append to the Annotation list.
   * @apilevel high-level
   */
  public void addAnnotation(Annotation node) {
    List<Annotation> list = (parent == null || state == null) ? getAnnotationListNoTransform() : getAnnotationList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addAnnotationNoTransform(Annotation node) {
    List<Annotation> list = getAnnotationListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Annotation list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setAnnotation(Annotation node, int i) {
    List<Annotation> list = getAnnotationList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Annotation list.
   * @return The node representing the Annotation list.
   * @apilevel high-level
   */
  public List<Annotation> getAnnotationList() {
    List<Annotation> list = (List<Annotation>) getChild(0);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Annotation list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Annotation list.
   * @apilevel low-level
   */
  public List<Annotation> getAnnotationListNoTransform() {
    return (List<Annotation>) getChildNoTransform(0);
  }
  /**
   * Retrieves the Annotation list.
   * @return The node representing the Annotation list.
   * @apilevel high-level
   */
  public List<Annotation> getAnnotations() {
    return getAnnotationList();
  }
  /**
   * Retrieves the Annotation list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Annotation list.
   * @apilevel low-level
   */
  public List<Annotation> getAnnotationsNoTransform() {
    return getAnnotationListNoTransform();
  }
  /**
   * Replaces the Stmt list.
   * @param list The new list node to be used as the Stmt list.
   * @apilevel high-level
   */
  public void setStmtList(List<Stmt> list) {
    setChild(list, 1);
  }
  /**
   * Retrieves the number of children in the Stmt list.
   * @return Number of children in the Stmt list.
   * @apilevel high-level
   */
  public int getNumStmt() {
    return getStmtList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Stmt list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Stmt list.
   * @apilevel low-level
   */
  public int getNumStmtNoTransform() {
    return getStmtListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Stmt list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Stmt list.
   * @apilevel high-level
   */
  public Stmt getStmt(int i) {
    return (Stmt) getStmtList().getChild(i);
  }
  /**
   * Check whether the Stmt list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasStmt() {
    return getStmtList().getNumChild() != 0;
  }
  /**
   * Append an element to the Stmt list.
   * @param node The element to append to the Stmt list.
   * @apilevel high-level
   */
  public void addStmt(Stmt node) {
    List<Stmt> list = (parent == null || state == null) ? getStmtListNoTransform() : getStmtList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addStmtNoTransform(Stmt node) {
    List<Stmt> list = getStmtListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Stmt list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setStmt(Stmt node, int i) {
    List<Stmt> list = getStmtList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Stmt list.
   * @return The node representing the Stmt list.
   * @apilevel high-level
   */
  public List<Stmt> getStmtList() {
    List<Stmt> list = (List<Stmt>) getChild(1);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Stmt list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Stmt list.
   * @apilevel low-level
   */
  public List<Stmt> getStmtListNoTransform() {
    return (List<Stmt>) getChildNoTransform(1);
  }
  /**
   * Retrieves the Stmt list.
   * @return The node representing the Stmt list.
   * @apilevel high-level
   */
  public List<Stmt> getStmts() {
    return getStmtList();
  }
  /**
   * Retrieves the Stmt list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Stmt list.
   * @apilevel low-level
   */
  public List<Stmt> getStmtsNoTransform() {
    return getStmtListNoTransform();
  }
  /**
   * @aspect TypeCheckerExtension
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/ext/TypeCheckerExtension.jadd:138
   */
    public void typeCheck(SemanticErrorList s) {
        int size = s.size();
        refined_TypeChecker_Block_typeCheck(s);
        if (s.size() > size) return;
        getModel().getTypeExt().checkBlock(this);
    }
  /**
   * @apilevel internal
   */
  protected int getNumberOfNewCogExpr_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getNumberOfNewCogExpr_computed = false;
  /**
   * @apilevel internal
   */
  protected int getNumberOfNewCogExpr_value;
  /**
   * @attribute syn
   * @aspect NewExpCounter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/NewExprCounter.jrag:27
   */
  public int getNumberOfNewCogExpr() {
    if(getNumberOfNewCogExpr_computed) {
      return getNumberOfNewCogExpr_value;
    }
    ASTNode$State state = state();
    if (getNumberOfNewCogExpr_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getNumberOfNewCogExpr in class: org.jastadd.ast.AST.SynDecl");
    }
    getNumberOfNewCogExpr_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getNumberOfNewCogExpr_value = getNumberOfNewCogExpr_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getNumberOfNewCogExpr_computed = true;
    } else {
    }

    getNumberOfNewCogExpr_visited = -1;
    return getNumberOfNewCogExpr_value;
  }
  /**
   * @apilevel internal
   */
  private int getNumberOfNewCogExpr_compute() {  return super.getNumberOfNewCogExpr();  }
  /**
   * @apilevel internal
   */
  protected int getNumVar_visited = -1;
  /**
   * @attribute syn
   * @aspect VarResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/VarResolution.jrag:28
   */
  public int getNumVar() {
    ASTNode$State state = state();
    if (getNumVar_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getNumVar in class: org.jastadd.ast.AST.SynDecl");
    }
    getNumVar_visited = state().boundariesCrossed;
    try {  return getVars().size();  }
    finally {
      getNumVar_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int getVars_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getVars_computed = false;
  /**
   * @apilevel internal
   */
  protected Collection<VarDecl> getVars_value;
  /**
   * Get declared variables.
   * FIXME: descends into nested blocks, but not into IF/WHILE?!?
   * 
   * @attribute syn
   * @aspect VarResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/VarResolution.jrag:34
   */
  public Collection<VarDecl> getVars() {
    if(getVars_computed) {
      return getVars_value;
    }
    ASTNode$State state = state();
    if (getVars_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getVars in class: org.jastadd.ast.AST.SynDecl");
    }
    getVars_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getVars_value = getVars_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getVars_computed = true;
    } else {
    }

    getVars_visited = -1;
    return getVars_value;
  }
  /**
   * @apilevel internal
   */
  private Collection<VarDecl> getVars_compute() {
          ArrayList<VarDecl> res = new ArrayList<VarDecl>();
          for (Stmt stmt : getStmts()) {
              if (stmt instanceof VarDeclStmt) {
                  res.add(((VarDeclStmt) stmt).getVarDecl());
              } else if (stmt instanceof Block) {
                  res.addAll(((Block)stmt).getVars());
              }
          }
          return res;
      }
  /**
   * @apilevel internal
   */
  protected int sqlBlockRewriteRequired_visited = -1;
  /**
   * @attribute syn
   * @aspect SqlRewrites
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/sql/SqlRewrites.jrag:640
   */
  public boolean sqlBlockRewriteRequired() {
    ASTNode$State state = state();
    if (sqlBlockRewriteRequired_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: sqlBlockRewriteRequired in class: org.jastadd.ast.AST.SynDecl");
    }
    sqlBlockRewriteRequired_visited = state().boundariesCrossed;
    try {
    	   for (Stmt stmt : getStmts())
    	       if (stmt instanceof SqlStmt && ((SqlStmt) stmt).sqlSqlStmtRewriteRequired())
    	           return true;
    	   return false;
    	}
    finally {
      sqlBlockRewriteRequired_visited = -1;
    }
  }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/VarResolution.jrag:91
   * @apilevel internal
   */
  public VarOrFieldDecl Define_VarOrFieldDecl_lookupVarOrFieldName(ASTNode caller, ASTNode child, String name, boolean fieldOnly) {
    if (caller == getStmtListNoTransform()) {
      int i = caller.getIndexOfChild(child);
      {
      if (!fieldOnly) {
        while (i>0) {
            Stmt s = getStmt(i-1); // we can only see variables defined in previous statements
            if (s instanceof VarDeclStmt) {
                 VarDeclStmt vds = (VarDeclStmt) s;
                 VarOrFieldDecl d = vds.locallookupVarOrFieldName(name,fieldOnly);
                 if (d != null)
                     return d;
            }
            i--;
		}
	  }
      return lookupVarOrFieldName(name,fieldOnly);
    }
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_VarOrFieldDecl_lookupVarOrFieldName(this, caller, name, fieldOnly);
    }
  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    // Declared at @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/coreabs/GenerateCoreAbs.jadd:116
    if (hasRewriteBlockAt() > -1) {
      state().duringGenerateCoreABS++;
      ASTNode result = rewriteRule0();
      state().duringGenerateCoreABS--;
      return result;
    }    // Declared at @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/sql/SqlRewrites.jrag:648
    if (sqlBlockRewriteRequired()) {
      state().duringSqlRewrites++;
      ASTNode result = rewriteRule1();
      state().duringSqlRewrites--;
      return result;
    }    return super.rewriteTo();
  }  /**
   * @declaredat @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/coreabs/GenerateCoreAbs.jadd:116
   * @apilevel internal
   */  private Block rewriteRule0() {
    debugRewrite("Rewriting " + getClass().getName() + " using rule in /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/coreabs/GenerateCoreAbs.jadd at line 116");
{
	    int i =0;
	    do {
	      ASTNode<?> n = getStmtListNoTransform().getChild(i);
	      if (n != null && n instanceof RewriteBlock) {
	        RewriteBlock b = (RewriteBlock) n;
	        // Be careful not to confuse children with statements here!
	        List<Stmt> list = getStmtListNoTransform();
	        list.removeChild(i);
	        for(int j=0;j<b.getNumStmtNoTransform();j++) {
	          Stmt s = (Stmt) b.getStmtListNoTransform().getChild(j);
	          list.insertChild(s,i+j);
	        }
	        return this;
	      }
	      i++;   
	    } while (i<getNumStmt());
	    return this;
	}  }
  /**
   * @declaredat @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/sql/SqlRewrites.jrag:648
   * @apilevel internal
   */  private Block rewriteRule1() {
    debugRewrite("Rewriting " + getClass().getName() + " using rule in /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/sql/SqlRewrites.jrag at line 648");
{
	       final List<Stmt> stmts = getStmts();
	       for (int i = 0; i < stmts.getNumChild(); ) {
	           final Stmt stmt = stmts.getChild(i);
	           if (!(stmt instanceof SqlStmt)) {
	               i++;
	               continue;
	           }
	           final List<Stmt> newStmts = ((SqlStmt) stmt).rewriteToCoreAbs();
	           stmts.removeChild(i);
               for (int j = 0; j < newStmts.getNumChildNoTransform(); j++) {
                   final Stmt newStmt = newStmts.getChildNoTransform(j);
                   stmts.insertChild(newStmt, i++);
               }
	       }
	       return this;
	   }  }
}
