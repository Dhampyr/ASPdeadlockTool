// Generated from ASPgrammar.g4 by ANTLR 4.4
package asp.parser;

import asp.models.*;
import java.util.HashMap;
import java.util.LinkedList; 

import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.misc.*;
import org.antlr.v4.runtime.tree.*;
import java.util.List;
import java.util.Iterator;
import java.util.ArrayList;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class ASPgrammarParser extends Parser {
	static { RuntimeMetaData.checkVersion("4.4", RuntimeMetaData.VERSION); }

	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		LPAR=1, RPAR=2, RSBRACK=3, LSBRACK=4, RCBRACK=5, LCBRACK=6, PLUS=7, MINUS=8, 
		MULT=9, DIV=10, AND=11, OR=12, GT=13, LT=14, GEG=15, LEG=16, ASSIGN=17, 
		EQUALS=18, DISTINCT=19, NOT=20, SKIP=21, COMMA=22, COLON=23, SEMI=24, 
		DOT=25, NULL=26, TRUE=27, FALSE=28, MOD=29, CLASS=30, RETURN=31, THIS=32, 
		NEW=33, NEWACT=34, IF=35, THEN=36, ELSE=37, INT=38, BOOL=39, IDUC=40, 
		IDLC=41, NUMBER=42, WS=43, LINECOMENTS=44, BLOCKCOMENTS=45;
	public static final String[] tokenNames = {
		"<INVALID>", "'('", "')'", "']'", "'['", "'}'", "'{'", "'+'", "'-'", "'*'", 
		"'/'", "'&&'", "'||'", "'>'", "'<'", "'>='", "'<='", "'='", "'=='", "'!='", 
		"'!'", "'skip'", "','", "':'", "';'", "'.'", "'null'", "'True'", "'False'", 
		"'module'", "'class'", "'return'", "'this'", "'new'", "'newActive'", "'if'", 
		"'then'", "'else'", "'Int'", "'Bool'", "IDUC", "IDLC", "NUMBER", "WS", 
		"LINECOMENTS", "BLOCKCOMENTS"
	};
	public static final int
		RULE_program = 0, RULE_classDec = 1, RULE_methodDef = 2, RULE_body = 3, 
		RULE_varDeclaration = 4, RULE_varDec = 5, RULE_parDef = 6, RULE_type = 7, 
		RULE_intType = 8, RULE_boolType = 9, RULE_objType = 10, RULE_variable = 11, 
		RULE_stmt = 12, RULE_stmtblock = 13, RULE_expressionSideEffect = 14, RULE_expression = 15, 
		RULE_arithmeticExpression = 16, RULE_booleanExpression = 17, RULE_value = 18, 
		RULE_element = 19, RULE_lcbrak = 20, RULE_rcbrak = 21;
	public static final String[] ruleNames = {
		"program", "classDec", "methodDef", "body", "varDeclaration", "varDec", 
		"parDef", "type", "intType", "boolType", "objType", "variable", "stmt", 
		"stmtblock", "expressionSideEffect", "expression", "arithmeticExpression", 
		"booleanExpression", "value", "element", "lcbrak", "rcbrak"
	};

	@Override
	public String getGrammarFileName() { return "ASPgrammar.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public ATN getATN() { return _ATN; }

	public ASPgrammarParser(TokenStream input) {
		super(input);
		_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}
	public static class ProgramContext extends ParserRuleContext {
		public Program prog;
		public ClassDecContext classDec;
		public BodyContext main;
		public TerminalNode SEMI() { return getToken(ASPgrammarParser.SEMI, 0); }
		public TerminalNode MOD() { return getToken(ASPgrammarParser.MOD, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public TerminalNode IDUC() { return getToken(ASPgrammarParser.IDUC, 0); }
		public List<ClassDecContext> classDec() {
			return getRuleContexts(ClassDecContext.class);
		}
		public ClassDecContext classDec(int i) {
			return getRuleContext(ClassDecContext.class,i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_program; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterProgram(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitProgram(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitProgram(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ProgramContext program() throws RecognitionException {
		ProgramContext _localctx = new ProgramContext(_ctx, getState());
		enterRule(_localctx, 0, RULE_program);
		HashMap<String, ClassDecl> classMap = new HashMap<>();
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(44); match(MOD);
			setState(45); match(IDUC);
			setState(46); match(SEMI);
			setState(52);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==CLASS) {
				{
				{
				setState(47); ((ProgramContext)_localctx).classDec = classDec();
				classMap.put(((ProgramContext)_localctx).classDec.classObj.getClassName(),((ProgramContext)_localctx).classDec.classObj);
				}
				}
				setState(54);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(55); ((ProgramContext)_localctx).main = body();
			((ProgramContext)_localctx).prog =  new Program(classMap, ((ProgramContext)_localctx).main.stb);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ClassDecContext extends ParserRuleContext {
		public ClassDecl classObj;
		public Token className;
		public ParDefContext parameters;
		public VarDeclarationContext fields;
		public MethodDefContext method;
		public TerminalNode LCBRACK() { return getToken(ASPgrammarParser.LCBRACK, 0); }
		public List<MethodDefContext> methodDef() {
			return getRuleContexts(MethodDefContext.class);
		}
		public VarDeclarationContext varDeclaration() {
			return getRuleContext(VarDeclarationContext.class,0);
		}
		public ParDefContext parDef() {
			return getRuleContext(ParDefContext.class,0);
		}
		public TerminalNode LPAR() { return getToken(ASPgrammarParser.LPAR, 0); }
		public TerminalNode RPAR() { return getToken(ASPgrammarParser.RPAR, 0); }
		public TerminalNode CLASS() { return getToken(ASPgrammarParser.CLASS, 0); }
		public TerminalNode RCBRACK() { return getToken(ASPgrammarParser.RCBRACK, 0); }
		public TerminalNode IDUC() { return getToken(ASPgrammarParser.IDUC, 0); }
		public MethodDefContext methodDef(int i) {
			return getRuleContext(MethodDefContext.class,i);
		}
		public ClassDecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_classDec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterClassDec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitClassDec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitClassDec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ClassDecContext classDec() throws RecognitionException {
		ClassDecContext _localctx = new ClassDecContext(_ctx, getState());
		enterRule(_localctx, 2, RULE_classDec);
		HashMap<String, LinkedList<Method>> methods = new HashMap<>();
							  LinkedList<Method> methodList = null;
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(58); match(CLASS);
			setState(59); ((ClassDecContext)_localctx).className = match(IDUC);
			setState(60); match(LPAR);
			{
			setState(61); ((ClassDecContext)_localctx).parameters = parDef();
			}
			setState(62); match(RPAR);
			setState(63); match(LCBRACK);
			setState(64); ((ClassDecContext)_localctx).fields = varDeclaration();
			setState(70);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << BOOL) | (1L << IDUC))) != 0)) {
				{
				{
				setState(65); ((ClassDecContext)_localctx).method = methodDef();
				if (methods.containsKey(((ClassDecContext)_localctx).method.methodSign.getMethodName()))
								    	                                      	     { LinkedList<Method> list = methods.get(((ClassDecContext)_localctx).method.methodSign.getMethodName());
								    	                                       	  	   if (((ClassDecContext)_localctx).method.methodSign.isIn(list))
								    	                                       	  	   { System.out.println("The method "+ ((ClassDecContext)_localctx).method.methodSign.getMethodName() +  
								    	                                       	  		 		             " has been defined more than once! Rename it");
								    	                                       	  		 System.exit(0); }   
								    	                                       	  		else
								    	                                       	  		{ ((ClassDecContext)_localctx).method.methodSign.setID(methods.get(((ClassDecContext)_localctx).method.methodSign.getMethodName()).size());
																				    	  methods.get(((ClassDecContext)_localctx).method.methodSign.getMethodName()).add(((ClassDecContext)_localctx).method.methodSign);
																				  		}
				 					    										     }
									    										   	 else
									    										   	 {  methodList = new LinkedList<>();
									    										   	    ((ClassDecContext)_localctx).method.methodSign.setID(0);
									    										   	    methodList.add(((ClassDecContext)_localctx).method.methodSign); 
									    	                                            methods.put(((ClassDecContext)_localctx).method.methodSign.getMethodName(),methodList);
									    	                                       	  }
								    	                                     
				}
				}
				setState(72);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(73); match(RCBRACK);
			 ((ClassDecContext)_localctx).classObj =  new ClassDecl( (((ClassDecContext)_localctx).className!=null?((ClassDecContext)_localctx).className.getText():null),
							    	    				     ((ClassDecContext)_localctx).parameters.pars, 
							    	 					     ((ClassDecContext)_localctx).fields.vars,
							    	 					     methods
							    	 					   );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class MethodDefContext extends ParserRuleContext {
		public Method methodSign;
		public TypeContext returnedType;
		public Token methodName;
		public ParDefContext p;
		public BodyContext b;
		public ParDefContext parDef() {
			return getRuleContext(ParDefContext.class,0);
		}
		public TerminalNode IDLC() { return getToken(ASPgrammarParser.IDLC, 0); }
		public TypeContext type() {
			return getRuleContext(TypeContext.class,0);
		}
		public TerminalNode LPAR() { return getToken(ASPgrammarParser.LPAR, 0); }
		public TerminalNode RPAR() { return getToken(ASPgrammarParser.RPAR, 0); }
		public BodyContext body() {
			return getRuleContext(BodyContext.class,0);
		}
		public MethodDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_methodDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterMethodDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitMethodDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitMethodDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final MethodDefContext methodDef() throws RecognitionException {
		MethodDefContext _localctx = new MethodDefContext(_ctx, getState());
		enterRule(_localctx, 4, RULE_methodDef);
		HashMap<Integer,Declaration> parameters = new HashMap<>(); 
							    HashMap<String,Declaration> varDec = new HashMap<>();
								LinkedList<Statement> stmts = new LinkedList<>(); 
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(76); ((MethodDefContext)_localctx).returnedType = type();
			setState(77); ((MethodDefContext)_localctx).methodName = match(IDLC);
			setState(78); match(LPAR);
			{
			setState(79); ((MethodDefContext)_localctx).p = parDef();
			}
			setState(80); match(RPAR);
			setState(81); ((MethodDefContext)_localctx).b = body();
			((MethodDefContext)_localctx).methodSign =  new Method(((MethodDefContext)_localctx).returnedType.varType, (((MethodDefContext)_localctx).methodName!=null?((MethodDefContext)_localctx).methodName.getText():null), ((MethodDefContext)_localctx).p.pars,((MethodDefContext)_localctx).b.stb); 
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BodyContext extends ParserRuleContext {
		public StmtBlock stb;
		public VarDeclarationContext v;
		public StmtContext st;
		public TerminalNode LCBRACK() { return getToken(ASPgrammarParser.LCBRACK, 0); }
		public VarDeclarationContext varDeclaration() {
			return getRuleContext(VarDeclarationContext.class,0);
		}
		public StmtContext stmt(int i) {
			return getRuleContext(StmtContext.class,i);
		}
		public TerminalNode RCBRACK() { return getToken(ASPgrammarParser.RCBRACK, 0); }
		public List<StmtContext> stmt() {
			return getRuleContexts(StmtContext.class);
		}
		public BodyContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_body; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterBody(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitBody(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitBody(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BodyContext body() throws RecognitionException {
		BodyContext _localctx = new BodyContext(_ctx, getState());
		enterRule(_localctx, 6, RULE_body);
		LinkedList<Statement> stmts = new LinkedList<>();
						  	HashMap<String,Declaration> vars = null;
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(84); match(LCBRACK);
			{
			setState(85); ((BodyContext)_localctx).v = varDeclaration();
			vars=((BodyContext)_localctx).v.vars;
			}
			setState(93);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SKIP) | (1L << RETURN) | (1L << IF) | (1L << IDLC))) != 0)) {
				{
				{
				setState(88); ((BodyContext)_localctx).st = stmt();
				stmts.add(((BodyContext)_localctx).st.s);
				}
				}
				setState(95);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(96); match(RCBRACK);
			((BodyContext)_localctx).stb =  new StmtBlock(vars,stmts);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VarDeclarationContext extends ParserRuleContext {
		public HashMap<String,Declaration> vars;
		public VarDecContext v;
		public List<VarDecContext> varDec() {
			return getRuleContexts(VarDecContext.class);
		}
		public VarDecContext varDec(int i) {
			return getRuleContext(VarDecContext.class,i);
		}
		public VarDeclarationContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varDeclaration; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterVarDeclaration(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitVarDeclaration(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitVarDeclaration(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarDeclarationContext varDeclaration() throws RecognitionException {
		VarDeclarationContext _localctx = new VarDeclarationContext(_ctx, getState());
		enterRule(_localctx, 8, RULE_varDeclaration);
		 ((VarDeclarationContext)_localctx).vars =  new HashMap<>();
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(104);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					setState(99); ((VarDeclarationContext)_localctx).v = varDec();
					((VarDeclarationContext)_localctx).vars =  ((VarDeclarationContext)_localctx).v.vars;
					}
					} 
				}
				setState(106);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VarDecContext extends ParserRuleContext {
		public HashMap<String,Declaration> vars;
		public ObjTypeContext t;
		public VariableContext v;
		public IntTypeContext t1;
		public BoolTypeContext t2;
		public TerminalNode ASSIGN() { return getToken(ASPgrammarParser.ASSIGN, 0); }
		public ObjTypeContext objType() {
			return getRuleContext(ObjTypeContext.class,0);
		}
		public BoolTypeContext boolType() {
			return getRuleContext(BoolTypeContext.class,0);
		}
		public IntTypeContext intType() {
			return getRuleContext(IntTypeContext.class,0);
		}
		public TerminalNode FALSE() { return getToken(ASPgrammarParser.FALSE, 0); }
		public TerminalNode SEMI() { return getToken(ASPgrammarParser.SEMI, 0); }
		public TerminalNode TRUE() { return getToken(ASPgrammarParser.TRUE, 0); }
		public TerminalNode NUMBER() { return getToken(ASPgrammarParser.NUMBER, 0); }
		public VariableContext variable() {
			return getRuleContext(VariableContext.class,0);
		}
		public VarDecContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_varDec; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterVarDec(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitVarDec(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitVarDec(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VarDecContext varDec() throws RecognitionException {
		VarDecContext _localctx = new VarDecContext(_ctx, getState());
		enterRule(_localctx, 10, RULE_varDec);
		 ((VarDecContext)_localctx).vars =  new HashMap<>();
					   		  TypeBase type = null; 
					   		  Variable var = null; 
		int _la;
		try {
			setState(126);
			switch (_input.LA(1)) {
			case IDUC:
				enterOuterAlt(_localctx, 1);
				{
				{
				setState(107); ((VarDecContext)_localctx).t = objType();
				setState(108); ((VarDecContext)_localctx).v = variable();
				setState(109); match(SEMI);
				 type = ((VarDecContext)_localctx).t.varType;
				     									    var = ((VarDecContext)_localctx).v.var;
				     									    Declaration dec = new Declaration(type,var);
				     								        _localctx.vars.put(var.getName(),dec);
				}
				}
				break;
			case INT:
				enterOuterAlt(_localctx, 2);
				{
				{
				setState(112); ((VarDecContext)_localctx).t1 = intType();
				setState(113); ((VarDecContext)_localctx).v = variable();
				setState(114); match(ASSIGN);
				setState(115); match(NUMBER);
				setState(116); match(SEMI);
				 type = ((VarDecContext)_localctx).t1.varType;
				     									  				   var = ((VarDecContext)_localctx).v.var;
				     									  				   Declaration dec = new Declaration(type,var);
				     								      				   _localctx.vars.put(var.getName(),dec);
				}
				}
				break;
			case BOOL:
				enterOuterAlt(_localctx, 3);
				{
				{
				setState(119); ((VarDecContext)_localctx).t2 = boolType();
				setState(120); ((VarDecContext)_localctx).v = variable();
				setState(121); match(ASSIGN);
				setState(122);
				_la = _input.LA(1);
				if ( !(_la==TRUE || _la==FALSE) ) {
				_errHandler.recoverInline(this);
				}
				consume();
				setState(123); match(SEMI);
				 type = ((VarDecContext)_localctx).t2.varType;
				     									  				  		    var = ((VarDecContext)_localctx).v.var;
				     									  				  		    Declaration dec = new Declaration(type,var);
				     								      				  		    _localctx.vars.put(var.getName(),dec);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ParDefContext extends ParserRuleContext {
		public HashMap<Integer,Declaration> pars;
		public TypeContext t;
		public VariableContext v;
		public TypeContext t1;
		public VariableContext v1;
		public TypeContext type(int i) {
			return getRuleContext(TypeContext.class,i);
		}
		public List<TerminalNode> COMMA() { return getTokens(ASPgrammarParser.COMMA); }
		public List<TypeContext> type() {
			return getRuleContexts(TypeContext.class);
		}
		public VariableContext variable(int i) {
			return getRuleContext(VariableContext.class,i);
		}
		public TerminalNode COMMA(int i) {
			return getToken(ASPgrammarParser.COMMA, i);
		}
		public List<VariableContext> variable() {
			return getRuleContexts(VariableContext.class);
		}
		public ParDefContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_parDef; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterParDef(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitParDef(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitParDef(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ParDefContext parDef() throws RecognitionException {
		ParDefContext _localctx = new ParDefContext(_ctx, getState());
		enterRule(_localctx, 12, RULE_parDef);
		((ParDefContext)_localctx).pars =  new HashMap<>();
							  TypeBase type = null; 
					   		  Variable var = null; 
					   		  int parIndex = 0;
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(132);
			_la = _input.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << INT) | (1L << BOOL) | (1L << IDUC))) != 0)) {
				{
				setState(128); ((ParDefContext)_localctx).t = type();
				setState(129); ((ParDefContext)_localctx).v = variable();
				 type = ((ParDefContext)_localctx).t.varType;
				     								   var = ((ParDefContext)_localctx).v.var;
				     								   Declaration dec = new Declaration(type,var);
													   _localctx.pars.put((Integer) parIndex,dec); 
				}
			}

			setState(141);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while (_la==COMMA) {
				{
				{
				setState(134); match(COMMA);
				setState(135); ((ParDefContext)_localctx).t1 = type();
				setState(136); ((ParDefContext)_localctx).v1 = variable();
				type = ((ParDefContext)_localctx).t1.varType;
				     								   		   var = ((ParDefContext)_localctx).v1.var;
				     								   		   Declaration dec = new Declaration(type,var);
								  							   _localctx.pars.put((Integer) (parIndex +1),dec);
				}
				}
				setState(143);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class TypeContext extends ParserRuleContext {
		public TypeBase varType;
		public IntTypeContext t;
		public BoolTypeContext t1;
		public ObjTypeContext t2;
		public BoolTypeContext boolType() {
			return getRuleContext(BoolTypeContext.class,0);
		}
		public ObjTypeContext objType() {
			return getRuleContext(ObjTypeContext.class,0);
		}
		public IntTypeContext intType() {
			return getRuleContext(IntTypeContext.class,0);
		}
		public TypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_type; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final TypeContext type() throws RecognitionException {
		TypeContext _localctx = new TypeContext(_ctx, getState());
		enterRule(_localctx, 14, RULE_type);
		try {
			setState(153);
			switch (_input.LA(1)) {
			case INT:
				enterOuterAlt(_localctx, 1);
				{
				setState(144); ((TypeContext)_localctx).t = intType();
				((TypeContext)_localctx).varType =  ((TypeContext)_localctx).t.varType;
				}
				break;
			case BOOL:
				enterOuterAlt(_localctx, 2);
				{
				setState(147); ((TypeContext)_localctx).t1 = boolType();
				((TypeContext)_localctx).varType =  ((TypeContext)_localctx).t1.varType;
				}
				break;
			case IDUC:
				enterOuterAlt(_localctx, 3);
				{
				setState(150); ((TypeContext)_localctx).t2 = objType();
				((TypeContext)_localctx).varType =  ((TypeContext)_localctx).t2.varType;
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class IntTypeContext extends ParserRuleContext {
		public TypeBase varType;
		public TerminalNode INT() { return getToken(ASPgrammarParser.INT, 0); }
		public IntTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_intType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterIntType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitIntType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitIntType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final IntTypeContext intType() throws RecognitionException {
		IntTypeContext _localctx = new IntTypeContext(_ctx, getState());
		enterRule(_localctx, 16, RULE_intType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(155); match(INT);
			((IntTypeContext)_localctx).varType =  new TypeInt();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class BoolTypeContext extends ParserRuleContext {
		public TypeBase varType;
		public TerminalNode BOOL() { return getToken(ASPgrammarParser.BOOL, 0); }
		public BoolTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_boolType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterBoolType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitBoolType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitBoolType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BoolTypeContext boolType() throws RecognitionException {
		BoolTypeContext _localctx = new BoolTypeContext(_ctx, getState());
		enterRule(_localctx, 18, RULE_boolType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(158); match(BOOL);
			((BoolTypeContext)_localctx).varType =  new TypeBool();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ObjTypeContext extends ParserRuleContext {
		public TypeBase varType;
		public Token IDUC;
		public TerminalNode IDUC() { return getToken(ASPgrammarParser.IDUC, 0); }
		public ObjTypeContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_objType; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterObjType(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitObjType(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitObjType(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ObjTypeContext objType() throws RecognitionException {
		ObjTypeContext _localctx = new ObjTypeContext(_ctx, getState());
		enterRule(_localctx, 20, RULE_objType);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(161); ((ObjTypeContext)_localctx).IDUC = match(IDUC);
			((ObjTypeContext)_localctx).varType =  new TypeObject((((ObjTypeContext)_localctx).IDUC!=null?((ObjTypeContext)_localctx).IDUC.getText():null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class VariableContext extends ParserRuleContext {
		public Variable var;
		public Token v;
		public TerminalNode IDLC() { return getToken(ASPgrammarParser.IDLC, 0); }
		public VariableContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_variable; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterVariable(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitVariable(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitVariable(this);
			else return visitor.visitChildren(this);
		}
	}

	public final VariableContext variable() throws RecognitionException {
		VariableContext _localctx = new VariableContext(_ctx, getState());
		enterRule(_localctx, 22, RULE_variable);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(164); ((VariableContext)_localctx).v = match(IDLC);
			((VariableContext)_localctx).var =  new Variable((((VariableContext)_localctx).v!=null?((VariableContext)_localctx).v.getText():null));
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StmtContext extends ParserRuleContext {
		public Statement s;
		public Token l;
		public ExpressionSideEffectContext r;
		public BooleanExpressionContext guard;
		public StmtContext trueSideS;
		public StmtblockContext trueSideSB;
		public StmtContext falseSideS;
		public StmtblockContext falseSideSB;
		public ExpressionContext e;
		public List<StmtblockContext> stmtblock() {
			return getRuleContexts(StmtblockContext.class);
		}
		public TerminalNode ELSE() { return getToken(ASPgrammarParser.ELSE, 0); }
		public TerminalNode IF() { return getToken(ASPgrammarParser.IF, 0); }
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public TerminalNode LPAR() { return getToken(ASPgrammarParser.LPAR, 0); }
		public List<StmtContext> stmt() {
			return getRuleContexts(StmtContext.class);
		}
		public TerminalNode ASSIGN() { return getToken(ASPgrammarParser.ASSIGN, 0); }
		public StmtblockContext stmtblock(int i) {
			return getRuleContext(StmtblockContext.class,i);
		}
		public TerminalNode RETURN() { return getToken(ASPgrammarParser.RETURN, 0); }
		public TerminalNode SEMI() { return getToken(ASPgrammarParser.SEMI, 0); }
		public TerminalNode SKIP() { return getToken(ASPgrammarParser.SKIP, 0); }
		public TerminalNode IDLC() { return getToken(ASPgrammarParser.IDLC, 0); }
		public StmtContext stmt(int i) {
			return getRuleContext(StmtContext.class,i);
		}
		public TerminalNode RPAR() { return getToken(ASPgrammarParser.RPAR, 0); }
		public ExpressionContext expression() {
			return getRuleContext(ExpressionContext.class,0);
		}
		public ExpressionSideEffectContext expressionSideEffect() {
			return getRuleContext(ExpressionSideEffectContext.class,0);
		}
		public StmtContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmt; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterStmt(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitStmt(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitStmt(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtContext stmt() throws RecognitionException {
		StmtContext _localctx = new StmtContext(_ctx, getState());
		enterRule(_localctx, 24, RULE_stmt);
		  Variable var = null;
							ExpressionSideEffects exprse = null;
							Expression cond = null;
							Statement stTrue = null;
							Statement stFalse = null; 
		try {
			setState(210);
			switch (_input.LA(1)) {
			case SKIP:
				enterOuterAlt(_localctx, 1);
				{
				setState(167); match(SKIP);
				setState(168); match(SEMI);
				((StmtContext)_localctx).s =  new Skip();
				}
				break;
			case IDLC:
				enterOuterAlt(_localctx, 2);
				{
				setState(170); ((StmtContext)_localctx).l = match(IDLC);
				var = new Variable((((StmtContext)_localctx).l!=null?((StmtContext)_localctx).l.getText():null));
				setState(172); match(ASSIGN);
				setState(173); ((StmtContext)_localctx).r = expressionSideEffect();
				exprse = ((StmtContext)_localctx).r.exprse;
				setState(175); match(SEMI);
				((StmtContext)_localctx).s =  new Assignment(var,exprse);
				}
				break;
			case IF:
				enterOuterAlt(_localctx, 3);
				{
				setState(178); match(IF);
				setState(179); match(LPAR);
				{
				setState(180); ((StmtContext)_localctx).guard = booleanExpression(0);
				cond = ((StmtContext)_localctx).guard.exprBool;
				}
				setState(183); match(RPAR);
				setState(190);
				switch (_input.LA(1)) {
				case SKIP:
				case RETURN:
				case IF:
				case IDLC:
					{
					setState(184); ((StmtContext)_localctx).trueSideS = stmt();
					stTrue = ((StmtContext)_localctx).trueSideS.s;
					}
					break;
				case LCBRACK:
					{
					setState(187); ((StmtContext)_localctx).trueSideSB = stmtblock();
					stTrue = ((StmtContext)_localctx).trueSideSB.stb;
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				setState(201);
				switch ( getInterpreter().adaptivePredict(_input,10,_ctx) ) {
				case 1:
					{
					setState(192); match(ELSE);
					setState(199);
					switch (_input.LA(1)) {
					case SKIP:
					case RETURN:
					case IF:
					case IDLC:
						{
						setState(193); ((StmtContext)_localctx).falseSideS = stmt();
						stFalse = ((StmtContext)_localctx).falseSideS.s;
						}
						break;
					case LCBRACK:
						{
						setState(196); ((StmtContext)_localctx).falseSideSB = stmtblock();
						stFalse = ((StmtContext)_localctx).falseSideSB.stb;
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					break;
				}
				((StmtContext)_localctx).s =  new IfThenElse(cond,stTrue,stFalse);
				}
				break;
			case RETURN:
				enterOuterAlt(_localctx, 4);
				{
				setState(205); match(RETURN);
				setState(206); ((StmtContext)_localctx).e = expression();
				setState(207); match(SEMI);
				((StmtContext)_localctx).s =  new Return(((StmtContext)_localctx).e.expr);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class StmtblockContext extends ParserRuleContext {
		public StmtBlock stb;
		public StmtContext st;
		public TerminalNode LCBRACK() { return getToken(ASPgrammarParser.LCBRACK, 0); }
		public StmtContext stmt(int i) {
			return getRuleContext(StmtContext.class,i);
		}
		public TerminalNode RCBRACK() { return getToken(ASPgrammarParser.RCBRACK, 0); }
		public List<StmtContext> stmt() {
			return getRuleContexts(StmtContext.class);
		}
		public StmtblockContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_stmtblock; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterStmtblock(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitStmtblock(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitStmtblock(this);
			else return visitor.visitChildren(this);
		}
	}

	public final StmtblockContext stmtblock() throws RecognitionException {
		StmtblockContext _localctx = new StmtblockContext(_ctx, getState());
		enterRule(_localctx, 26, RULE_stmtblock);
		((StmtblockContext)_localctx).stb =  new StmtBlock();
						  		LinkedList<Statement> stmts = new LinkedList<>();
		int _la;
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(212); match(LCBRACK);
			setState(218);
			_errHandler.sync(this);
			_la = _input.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << SKIP) | (1L << RETURN) | (1L << IF) | (1L << IDLC))) != 0)) {
				{
				{
				setState(213); ((StmtblockContext)_localctx).st = stmt();
				stmts.add(((StmtblockContext)_localctx).st.s);
				}
				}
				setState(220);
				_errHandler.sync(this);
				_la = _input.LA(1);
			}
			setState(221); match(RCBRACK);
			_localctx.stb.setStmts(stmts);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionSideEffectContext extends ParserRuleContext {
		public ExpressionSideEffects exprse;
		public ExpressionContext exp;
		public ElementContext elem;
		public Token methodName;
		public ExpressionContext par;
		public Token className;
		public TerminalNode DOT() { return getToken(ASPgrammarParser.DOT, 0); }
		public ElementContext element() {
			return getRuleContext(ElementContext.class,0);
		}
		public TerminalNode NEWACT() { return getToken(ASPgrammarParser.NEWACT, 0); }
		public ExpressionContext expression(int i) {
			return getRuleContext(ExpressionContext.class,i);
		}
		public TerminalNode IDLC() { return getToken(ASPgrammarParser.IDLC, 0); }
		public TerminalNode LPAR() { return getToken(ASPgrammarParser.LPAR, 0); }
		public TerminalNode RPAR() { return getToken(ASPgrammarParser.RPAR, 0); }
		public List<ExpressionContext> expression() {
			return getRuleContexts(ExpressionContext.class);
		}
		public TerminalNode NEW() { return getToken(ASPgrammarParser.NEW, 0); }
		public TerminalNode IDUC() { return getToken(ASPgrammarParser.IDUC, 0); }
		public ExpressionSideEffectContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expressionSideEffect; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterExpressionSideEffect(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitExpressionSideEffect(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitExpressionSideEffect(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionSideEffectContext expressionSideEffect() throws RecognitionException {
		ExpressionSideEffectContext _localctx = new ExpressionSideEffectContext(_ctx, getState());
		enterRule(_localctx, 28, RULE_expressionSideEffect);
		LinkedList<Expression> param = new LinkedList<>();
									 	   Variable obj = null;
		int _la;
		try {
			setState(269);
			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(224); ((ExpressionSideEffectContext)_localctx).exp = expression();
				((ExpressionSideEffectContext)_localctx).exprse = ((ExpressionSideEffectContext)_localctx).exp.expr;
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(227); ((ExpressionSideEffectContext)_localctx).elem = element();
				obj = new Variable((((ExpressionSideEffectContext)_localctx).elem!=null?_input.getText(((ExpressionSideEffectContext)_localctx).elem.start,((ExpressionSideEffectContext)_localctx).elem.stop):null));
				setState(229); match(DOT);
				setState(230); ((ExpressionSideEffectContext)_localctx).methodName = match(IDLC);
				setState(231); match(LPAR);
				setState(237);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << NOT) | (1L << NULL) | (1L << TRUE) | (1L << FALSE) | (1L << THIS) | (1L << IDLC) | (1L << NUMBER))) != 0)) {
					{
					{
					setState(232); ((ExpressionSideEffectContext)_localctx).par = expression();
					param.add(((ExpressionSideEffectContext)_localctx).par.expr);
					}
					}
					setState(239);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(240); match(RPAR);
				((ExpressionSideEffectContext)_localctx).exprse =  new MethodCall(obj,(((ExpressionSideEffectContext)_localctx).methodName!=null?((ExpressionSideEffectContext)_localctx).methodName.getText():null),param);
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(243); match(NEW);
				setState(244); ((ExpressionSideEffectContext)_localctx).className = match(IDUC);
				setState(245); match(LPAR);
				setState(251);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << NOT) | (1L << NULL) | (1L << TRUE) | (1L << FALSE) | (1L << THIS) | (1L << IDLC) | (1L << NUMBER))) != 0)) {
					{
					{
					setState(246); ((ExpressionSideEffectContext)_localctx).par = expression();
					param.add(((ExpressionSideEffectContext)_localctx).par.expr);
					}
					}
					setState(253);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(254); match(RPAR);
				((ExpressionSideEffectContext)_localctx).exprse =  new New((((ExpressionSideEffectContext)_localctx).className!=null?((ExpressionSideEffectContext)_localctx).className.getText():null),param);
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(256); match(NEWACT);
				setState(257); ((ExpressionSideEffectContext)_localctx).className = match(IDUC);
				setState(258); match(LPAR);
				setState(264);
				_errHandler.sync(this);
				_la = _input.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << LPAR) | (1L << NOT) | (1L << NULL) | (1L << TRUE) | (1L << FALSE) | (1L << THIS) | (1L << IDLC) | (1L << NUMBER))) != 0)) {
					{
					{
					setState(259); ((ExpressionSideEffectContext)_localctx).par = expression();
					param.add(((ExpressionSideEffectContext)_localctx).par.expr);
					}
					}
					setState(266);
					_errHandler.sync(this);
					_la = _input.LA(1);
				}
				setState(267); match(RPAR);
				((ExpressionSideEffectContext)_localctx).exprse =  new NewActive((((ExpressionSideEffectContext)_localctx).className!=null?((ExpressionSideEffectContext)_localctx).className.getText():null),param);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ExpressionContext extends ParserRuleContext {
		public Expression expr;
		public ValueContext v;
		public ElementContext el;
		public ArithmeticExpressionContext expra;
		public BooleanExpressionContext exprb;
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public ElementContext element() {
			return getRuleContext(ElementContext.class,0);
		}
		public ArithmeticExpressionContext arithmeticExpression() {
			return getRuleContext(ArithmeticExpressionContext.class,0);
		}
		public BooleanExpressionContext booleanExpression() {
			return getRuleContext(BooleanExpressionContext.class,0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_expression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ExpressionContext expression() throws RecognitionException {
		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
		enterRule(_localctx, 30, RULE_expression);
		try {
			setState(283);
			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
			case 1:
				enterOuterAlt(_localctx, 1);
				{
				setState(271); ((ExpressionContext)_localctx).v = value();
				((ExpressionContext)_localctx).expr =  ((ExpressionContext)_localctx).v.val;
				}
				break;
			case 2:
				enterOuterAlt(_localctx, 2);
				{
				setState(274); ((ExpressionContext)_localctx).el = element();
				((ExpressionContext)_localctx).expr =  ((ExpressionContext)_localctx).el.elem;
				}
				break;
			case 3:
				enterOuterAlt(_localctx, 3);
				{
				setState(277); ((ExpressionContext)_localctx).expra = arithmeticExpression(0);
				((ExpressionContext)_localctx).expr =  ((ExpressionContext)_localctx).expra.exprArit;
				}
				break;
			case 4:
				enterOuterAlt(_localctx, 4);
				{
				setState(280); ((ExpressionContext)_localctx).exprb = booleanExpression(0);
				((ExpressionContext)_localctx).expr =  ((ExpressionContext)_localctx).exprb.exprBool;
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ArithmeticExpressionContext extends ParserRuleContext {
		public Expression exprArit;
		public ArithmeticExpressionContext l;
		public Token n;
		public Token v;
		public Token o;
		public ArithmeticExpressionContext r;
		public List<ArithmeticExpressionContext> arithmeticExpression() {
			return getRuleContexts(ArithmeticExpressionContext.class);
		}
		public TerminalNode IDLC() { return getToken(ASPgrammarParser.IDLC, 0); }
		public TerminalNode NUMBER() { return getToken(ASPgrammarParser.NUMBER, 0); }
		public ArithmeticExpressionContext arithmeticExpression(int i) {
			return getRuleContext(ArithmeticExpressionContext.class,i);
		}
		public ArithmeticExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_arithmeticExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterArithmeticExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitArithmeticExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitArithmeticExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ArithmeticExpressionContext arithmeticExpression() throws RecognitionException {
		return arithmeticExpression(0);
	}

	private ArithmeticExpressionContext arithmeticExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		ArithmeticExpressionContext _localctx = new ArithmeticExpressionContext(_ctx, _parentState);
		ArithmeticExpressionContext _prevctx = _localctx;
		int _startState = 32;
		enterRecursionRule(_localctx, 32, RULE_arithmeticExpression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(294);
			switch (_input.LA(1)) {
			case NUMBER:
				{
				setState(286); ((ArithmeticExpressionContext)_localctx).n = match(NUMBER);
				((ArithmeticExpressionContext)_localctx).exprArit =  new ExpressionIntValue(Integer.parseInt((((ArithmeticExpressionContext)_localctx).n!=null?((ArithmeticExpressionContext)_localctx).n.getText():null)));
				}
				break;
			case IDLC:
				{
				setState(288); ((ArithmeticExpressionContext)_localctx).v = match(IDLC);
				((ArithmeticExpressionContext)_localctx).exprArit =  new Variable((((ArithmeticExpressionContext)_localctx).v!=null?((ArithmeticExpressionContext)_localctx).v.getText():null));
				}
				break;
			case LPAR:
				{
				setState(290); match(LPAR);
				setState(291); arithmeticExpression(0);
				setState(292); match(RPAR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.LT(-1);
			setState(308);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,20,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					setState(306);
					switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
					case 1:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						setState(296);
						if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
						setState(297);
						((ArithmeticExpressionContext)_localctx).o = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==MULT || _la==DIV) ) {
							((ArithmeticExpressionContext)_localctx).o = (Token)_errHandler.recoverInline(this);
						}
						consume();
						setState(298); ((ArithmeticExpressionContext)_localctx).r = arithmeticExpression(6);
						((ArithmeticExpressionContext)_localctx).exprArit =  new ExpressionBinaryOperation(((ArithmeticExpressionContext)_localctx).l.exprArit,(((ArithmeticExpressionContext)_localctx).o!=null?((ArithmeticExpressionContext)_localctx).o.getText():null),((ArithmeticExpressionContext)_localctx).r.exprArit);
						}
						break;
					case 2:
						{
						_localctx = new ArithmeticExpressionContext(_parentctx, _parentState);
						_localctx.l = _prevctx;
						pushNewRecursionContext(_localctx, _startState, RULE_arithmeticExpression);
						setState(301);
						if (!(precpred(_ctx, 4))) throw new FailedPredicateException(this, "precpred(_ctx, 4)");
						setState(302);
						((ArithmeticExpressionContext)_localctx).o = _input.LT(1);
						_la = _input.LA(1);
						if ( !(_la==PLUS || _la==MINUS) ) {
							((ArithmeticExpressionContext)_localctx).o = (Token)_errHandler.recoverInline(this);
						}
						consume();
						setState(303); ((ArithmeticExpressionContext)_localctx).r = arithmeticExpression(5);
						((ArithmeticExpressionContext)_localctx).exprArit =  new ExpressionBinaryOperation(((ArithmeticExpressionContext)_localctx).l.exprArit,(((ArithmeticExpressionContext)_localctx).o!=null?((ArithmeticExpressionContext)_localctx).o.getText():null),((ArithmeticExpressionContext)_localctx).r.exprArit);
						}
						break;
					}
					} 
				}
				setState(310);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,20,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class BooleanExpressionContext extends ParserRuleContext {
		public Expression exprBool;
		public BooleanExpressionContext l;
		public Token n;
		public BooleanExpressionContext exb;
		public ArithmeticExpressionContext exa;
		public ValueContext v;
		public ElementContext e;
		public Token o;
		public BooleanExpressionContext r;
		public ValueContext value() {
			return getRuleContext(ValueContext.class,0);
		}
		public ElementContext element() {
			return getRuleContext(ElementContext.class,0);
		}
		public TerminalNode LT() { return getToken(ASPgrammarParser.LT, 0); }
		public TerminalNode GT() { return getToken(ASPgrammarParser.GT, 0); }
		public List<BooleanExpressionContext> booleanExpression() {
			return getRuleContexts(BooleanExpressionContext.class);
		}
		public TerminalNode OR() { return getToken(ASPgrammarParser.OR, 0); }
		public TerminalNode GEG() { return getToken(ASPgrammarParser.GEG, 0); }
		public TerminalNode NOT() { return getToken(ASPgrammarParser.NOT, 0); }
		public TerminalNode LEG() { return getToken(ASPgrammarParser.LEG, 0); }
		public TerminalNode EQUALS() { return getToken(ASPgrammarParser.EQUALS, 0); }
		public BooleanExpressionContext booleanExpression(int i) {
			return getRuleContext(BooleanExpressionContext.class,i);
		}
		public ArithmeticExpressionContext arithmeticExpression() {
			return getRuleContext(ArithmeticExpressionContext.class,0);
		}
		public TerminalNode AND() { return getToken(ASPgrammarParser.AND, 0); }
		public TerminalNode DISTINCT() { return getToken(ASPgrammarParser.DISTINCT, 0); }
		public BooleanExpressionContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_booleanExpression; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterBooleanExpression(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitBooleanExpression(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitBooleanExpression(this);
			else return visitor.visitChildren(this);
		}
	}

	public final BooleanExpressionContext booleanExpression() throws RecognitionException {
		return booleanExpression(0);
	}

	private BooleanExpressionContext booleanExpression(int _p) throws RecognitionException {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = getState();
		BooleanExpressionContext _localctx = new BooleanExpressionContext(_ctx, _parentState);
		BooleanExpressionContext _prevctx = _localctx;
		int _startState = 34;
		enterRecursionRule(_localctx, 34, RULE_booleanExpression, _p);
		int _la;
		try {
			int _alt;
			enterOuterAlt(_localctx, 1);
			{
			setState(329);
			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
			case 1:
				{
				setState(312); ((BooleanExpressionContext)_localctx).n = match(NOT);
				setState(313); ((BooleanExpressionContext)_localctx).exb = booleanExpression(6);
				((BooleanExpressionContext)_localctx).exprBool =  new ExpressionUnaryOperation((((BooleanExpressionContext)_localctx).n!=null?((BooleanExpressionContext)_localctx).n.getText():null),((BooleanExpressionContext)_localctx).exb.exprBool);
				}
				break;
			case 2:
				{
				setState(316); ((BooleanExpressionContext)_localctx).exa = arithmeticExpression(0);
				((BooleanExpressionContext)_localctx).exprBool = ((BooleanExpressionContext)_localctx).exa.exprArit;
				}
				break;
			case 3:
				{
				setState(319); ((BooleanExpressionContext)_localctx).v = value();
				((BooleanExpressionContext)_localctx).exprBool = ((BooleanExpressionContext)_localctx).v.val;
				}
				break;
			case 4:
				{
				setState(322); ((BooleanExpressionContext)_localctx).e = element();
				((BooleanExpressionContext)_localctx).exprBool = ((BooleanExpressionContext)_localctx).e.elem;
				}
				break;
			case 5:
				{
				setState(325); match(LPAR);
				setState(326); booleanExpression(0);
				setState(327); match(RPAR);
				}
				break;
			}
			_ctx.stop = _input.LT(-1);
			setState(338);
			_errHandler.sync(this);
			_alt = getInterpreter().adaptivePredict(_input,22,_ctx);
			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) triggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new BooleanExpressionContext(_parentctx, _parentState);
					_localctx.l = _prevctx;
					pushNewRecursionContext(_localctx, _startState, RULE_booleanExpression);
					setState(331);
					if (!(precpred(_ctx, 5))) throw new FailedPredicateException(this, "precpred(_ctx, 5)");
					setState(332);
					((BooleanExpressionContext)_localctx).o = _input.LT(1);
					_la = _input.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AND) | (1L << OR) | (1L << GT) | (1L << LT) | (1L << GEG) | (1L << LEG) | (1L << EQUALS) | (1L << DISTINCT))) != 0)) ) {
						((BooleanExpressionContext)_localctx).o = (Token)_errHandler.recoverInline(this);
					}
					consume();
					setState(333); ((BooleanExpressionContext)_localctx).r = booleanExpression(6);
					((BooleanExpressionContext)_localctx).exprBool =  new ExpressionBinaryOperation(((BooleanExpressionContext)_localctx).l.exprBool,(((BooleanExpressionContext)_localctx).o!=null?((BooleanExpressionContext)_localctx).o.getText():null),((BooleanExpressionContext)_localctx).r.exprBool);
					}
					} 
				}
				setState(340);
				_errHandler.sync(this);
				_alt = getInterpreter().adaptivePredict(_input,22,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			unrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public static class ValueContext extends ParserRuleContext {
		public ExpressionValue val;
		public Token n;
		public Token t;
		public Token f;
		public TerminalNode NULL() { return getToken(ASPgrammarParser.NULL, 0); }
		public TerminalNode FALSE() { return getToken(ASPgrammarParser.FALSE, 0); }
		public TerminalNode TRUE() { return getToken(ASPgrammarParser.TRUE, 0); }
		public TerminalNode NUMBER() { return getToken(ASPgrammarParser.NUMBER, 0); }
		public ValueContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_value; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterValue(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitValue(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitValue(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ValueContext value() throws RecognitionException {
		ValueContext _localctx = new ValueContext(_ctx, getState());
		enterRule(_localctx, 36, RULE_value);
		try {
			setState(349);
			switch (_input.LA(1)) {
			case NULL:
				enterOuterAlt(_localctx, 1);
				{
				setState(341); match(NULL);
				((ValueContext)_localctx).val =  new ExpressionNullValue();
				}
				break;
			case NUMBER:
				enterOuterAlt(_localctx, 2);
				{
				setState(343); ((ValueContext)_localctx).n = match(NUMBER);
				((ValueContext)_localctx).val =  new ExpressionIntValue(Integer.parseInt((((ValueContext)_localctx).n!=null?((ValueContext)_localctx).n.getText():null)));
				}
				break;
			case TRUE:
				enterOuterAlt(_localctx, 3);
				{
				setState(345); ((ValueContext)_localctx).t = match(TRUE);
				((ValueContext)_localctx).val =  new ExpressionBoolValue(Boolean.parseBoolean((((ValueContext)_localctx).t!=null?((ValueContext)_localctx).t.getText():null)));
				}
				break;
			case FALSE:
				enterOuterAlt(_localctx, 4);
				{
				setState(347); ((ValueContext)_localctx).f = match(FALSE);
				((ValueContext)_localctx).val =  new ExpressionBoolValue(Boolean.parseBoolean((((ValueContext)_localctx).f!=null?((ValueContext)_localctx).f.getText():null)));
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class ElementContext extends ParserRuleContext {
		public Element elem;
		public Token IDLC;
		public Token t;
		public TerminalNode IDLC() { return getToken(ASPgrammarParser.IDLC, 0); }
		public TerminalNode THIS() { return getToken(ASPgrammarParser.THIS, 0); }
		public ElementContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_element; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterElement(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitElement(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitElement(this);
			else return visitor.visitChildren(this);
		}
	}

	public final ElementContext element() throws RecognitionException {
		ElementContext _localctx = new ElementContext(_ctx, getState());
		enterRule(_localctx, 38, RULE_element);
		try {
			setState(355);
			switch (_input.LA(1)) {
			case IDLC:
				enterOuterAlt(_localctx, 1);
				{
				setState(351); ((ElementContext)_localctx).IDLC = match(IDLC);
				((ElementContext)_localctx).elem =  new Variable((((ElementContext)_localctx).IDLC!=null?((ElementContext)_localctx).IDLC.getText():null));
				}
				break;
			case THIS:
				enterOuterAlt(_localctx, 2);
				{
				setState(353); ((ElementContext)_localctx).t = match(THIS);
				((ElementContext)_localctx).elem =  new ExpressionValue((((ElementContext)_localctx).t!=null?((ElementContext)_localctx).t.getText():null));
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class LcbrakContext extends ParserRuleContext {
		public TerminalNode LCBRACK() { return getToken(ASPgrammarParser.LCBRACK, 0); }
		public LcbrakContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_lcbrak; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterLcbrak(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitLcbrak(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitLcbrak(this);
			else return visitor.visitChildren(this);
		}
	}

	public final LcbrakContext lcbrak() throws RecognitionException {
		LcbrakContext _localctx = new LcbrakContext(_ctx, getState());
		enterRule(_localctx, 40, RULE_lcbrak);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(357); match(LCBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public static class RcbrakContext extends ParserRuleContext {
		public TerminalNode RCBRACK() { return getToken(ASPgrammarParser.RCBRACK, 0); }
		public RcbrakContext(ParserRuleContext parent, int invokingState) {
			super(parent, invokingState);
		}
		@Override public int getRuleIndex() { return RULE_rcbrak; }
		@Override
		public void enterRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).enterRcbrak(this);
		}
		@Override
		public void exitRule(ParseTreeListener listener) {
			if ( listener instanceof ASPgrammarListener ) ((ASPgrammarListener)listener).exitRcbrak(this);
		}
		@Override
		public <T> T accept(ParseTreeVisitor<? extends T> visitor) {
			if ( visitor instanceof ASPgrammarVisitor ) return ((ASPgrammarVisitor<? extends T>)visitor).visitRcbrak(this);
			else return visitor.visitChildren(this);
		}
	}

	public final RcbrakContext rcbrak() throws RecognitionException {
		RcbrakContext _localctx = new RcbrakContext(_ctx, getState());
		enterRule(_localctx, 42, RULE_rcbrak);
		try {
			enterOuterAlt(_localctx, 1);
			{
			setState(359); match(RCBRACK);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.reportError(this, re);
			_errHandler.recover(this, re);
		}
		finally {
			exitRule();
		}
		return _localctx;
	}

	public boolean sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 16: return arithmeticExpression_sempred((ArithmeticExpressionContext)_localctx, predIndex);
		case 17: return booleanExpression_sempred((BooleanExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private boolean arithmeticExpression_sempred(ArithmeticExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return precpred(_ctx, 5);
		case 1: return precpred(_ctx, 4);
		}
		return true;
	}
	private boolean booleanExpression_sempred(BooleanExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return precpred(_ctx, 5);
		}
		return true;
	}

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3/\u016c\4\2\t\2\4"+
		"\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t"+
		"\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22"+
		"\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\3\2\3\2\3\2\3\2\3\2"+
		"\3\2\7\2\65\n\2\f\2\16\28\13\2\3\2\3\2\3\2\3\3\3\3\3\3\3\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\7\3G\n\3\f\3\16\3J\13\3\3\3\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3"+
		"\4\3\4\3\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\7\5^\n\5\f\5\16\5a\13\5\3\5\3\5"+
		"\3\5\3\6\3\6\3\6\7\6i\n\6\f\6\16\6l\13\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u0081\n\7\3\b\3\b\3"+
		"\b\3\b\5\b\u0087\n\b\3\b\3\b\3\b\3\b\3\b\7\b\u008e\n\b\f\b\16\b\u0091"+
		"\13\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\5\t\u009c\n\t\3\n\3\n\3\n\3"+
		"\13\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\16\3\16\3"+
		"\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\3"+
		"\16\3\16\3\16\5\16\u00c1\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16"+
		"\u00ca\n\16\5\16\u00cc\n\16\3\16\3\16\3\16\3\16\3\16\3\16\3\16\5\16\u00d5"+
		"\n\16\3\17\3\17\3\17\3\17\7\17\u00db\n\17\f\17\16\17\u00de\13\17\3\17"+
		"\3\17\3\17\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20\7\20"+
		"\u00ee\n\20\f\20\16\20\u00f1\13\20\3\20\3\20\3\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\7\20\u00fc\n\20\f\20\16\20\u00ff\13\20\3\20\3\20\3\20\3\20"+
		"\3\20\3\20\3\20\3\20\7\20\u0109\n\20\f\20\16\20\u010c\13\20\3\20\3\20"+
		"\5\20\u0110\n\20\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21"+
		"\3\21\5\21\u011e\n\21\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\5\22"+
		"\u0129\n\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\3\22\7\22\u0135"+
		"\n\22\f\22\16\22\u0138\13\22\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3"+
		"\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\3\23\5\23\u014c\n\23\3\23"+
		"\3\23\3\23\3\23\3\23\7\23\u0153\n\23\f\23\16\23\u0156\13\23\3\24\3\24"+
		"\3\24\3\24\3\24\3\24\3\24\3\24\5\24\u0160\n\24\3\25\3\25\3\25\3\25\5\25"+
		"\u0166\n\25\3\26\3\26\3\27\3\27\3\27\2\4\"$\30\2\4\6\b\n\f\16\20\22\24"+
		"\26\30\32\34\36 \"$&(*,\2\6\3\2\35\36\3\2\13\f\3\2\t\n\4\2\r\22\24\25"+
		"\u017c\2.\3\2\2\2\4<\3\2\2\2\6N\3\2\2\2\bV\3\2\2\2\nj\3\2\2\2\f\u0080"+
		"\3\2\2\2\16\u0086\3\2\2\2\20\u009b\3\2\2\2\22\u009d\3\2\2\2\24\u00a0\3"+
		"\2\2\2\26\u00a3\3\2\2\2\30\u00a6\3\2\2\2\32\u00d4\3\2\2\2\34\u00d6\3\2"+
		"\2\2\36\u010f\3\2\2\2 \u011d\3\2\2\2\"\u0128\3\2\2\2$\u014b\3\2\2\2&\u015f"+
		"\3\2\2\2(\u0165\3\2\2\2*\u0167\3\2\2\2,\u0169\3\2\2\2./\7\37\2\2/\60\7"+
		"*\2\2\60\66\7\32\2\2\61\62\5\4\3\2\62\63\b\2\1\2\63\65\3\2\2\2\64\61\3"+
		"\2\2\2\658\3\2\2\2\66\64\3\2\2\2\66\67\3\2\2\2\679\3\2\2\28\66\3\2\2\2"+
		"9:\5\b\5\2:;\b\2\1\2;\3\3\2\2\2<=\7 \2\2=>\7*\2\2>?\7\3\2\2?@\5\16\b\2"+
		"@A\7\4\2\2AB\7\b\2\2BH\5\n\6\2CD\5\6\4\2DE\b\3\1\2EG\3\2\2\2FC\3\2\2\2"+
		"GJ\3\2\2\2HF\3\2\2\2HI\3\2\2\2IK\3\2\2\2JH\3\2\2\2KL\7\7\2\2LM\b\3\1\2"+
		"M\5\3\2\2\2NO\5\20\t\2OP\7+\2\2PQ\7\3\2\2QR\5\16\b\2RS\7\4\2\2ST\5\b\5"+
		"\2TU\b\4\1\2U\7\3\2\2\2VW\7\b\2\2WX\5\n\6\2XY\b\5\1\2Y_\3\2\2\2Z[\5\32"+
		"\16\2[\\\b\5\1\2\\^\3\2\2\2]Z\3\2\2\2^a\3\2\2\2_]\3\2\2\2_`\3\2\2\2`b"+
		"\3\2\2\2a_\3\2\2\2bc\7\7\2\2cd\b\5\1\2d\t\3\2\2\2ef\5\f\7\2fg\b\6\1\2"+
		"gi\3\2\2\2he\3\2\2\2il\3\2\2\2jh\3\2\2\2jk\3\2\2\2k\13\3\2\2\2lj\3\2\2"+
		"\2mn\5\26\f\2no\5\30\r\2op\7\32\2\2pq\b\7\1\2q\u0081\3\2\2\2rs\5\22\n"+
		"\2st\5\30\r\2tu\7\23\2\2uv\7,\2\2vw\7\32\2\2wx\b\7\1\2x\u0081\3\2\2\2"+
		"yz\5\24\13\2z{\5\30\r\2{|\7\23\2\2|}\t\2\2\2}~\7\32\2\2~\177\b\7\1\2\177"+
		"\u0081\3\2\2\2\u0080m\3\2\2\2\u0080r\3\2\2\2\u0080y\3\2\2\2\u0081\r\3"+
		"\2\2\2\u0082\u0083\5\20\t\2\u0083\u0084\5\30\r\2\u0084\u0085\b\b\1\2\u0085"+
		"\u0087\3\2\2\2\u0086\u0082\3\2\2\2\u0086\u0087\3\2\2\2\u0087\u008f\3\2"+
		"\2\2\u0088\u0089\7\30\2\2\u0089\u008a\5\20\t\2\u008a\u008b\5\30\r\2\u008b"+
		"\u008c\b\b\1\2\u008c\u008e\3\2\2\2\u008d\u0088\3\2\2\2\u008e\u0091\3\2"+
		"\2\2\u008f\u008d\3\2\2\2\u008f\u0090\3\2\2\2\u0090\17\3\2\2\2\u0091\u008f"+
		"\3\2\2\2\u0092\u0093\5\22\n\2\u0093\u0094\b\t\1\2\u0094\u009c\3\2\2\2"+
		"\u0095\u0096\5\24\13\2\u0096\u0097\b\t\1\2\u0097\u009c\3\2\2\2\u0098\u0099"+
		"\5\26\f\2\u0099\u009a\b\t\1\2\u009a\u009c\3\2\2\2\u009b\u0092\3\2\2\2"+
		"\u009b\u0095\3\2\2\2\u009b\u0098\3\2\2\2\u009c\21\3\2\2\2\u009d\u009e"+
		"\7(\2\2\u009e\u009f\b\n\1\2\u009f\23\3\2\2\2\u00a0\u00a1\7)\2\2\u00a1"+
		"\u00a2\b\13\1\2\u00a2\25\3\2\2\2\u00a3\u00a4\7*\2\2\u00a4\u00a5\b\f\1"+
		"\2\u00a5\27\3\2\2\2\u00a6\u00a7\7+\2\2\u00a7\u00a8\b\r\1\2\u00a8\31\3"+
		"\2\2\2\u00a9\u00aa\7\27\2\2\u00aa\u00ab\7\32\2\2\u00ab\u00d5\b\16\1\2"+
		"\u00ac\u00ad\7+\2\2\u00ad\u00ae\b\16\1\2\u00ae\u00af\7\23\2\2\u00af\u00b0"+
		"\5\36\20\2\u00b0\u00b1\b\16\1\2\u00b1\u00b2\7\32\2\2\u00b2\u00b3\b\16"+
		"\1\2\u00b3\u00d5\3\2\2\2\u00b4\u00b5\7%\2\2\u00b5\u00b6\7\3\2\2\u00b6"+
		"\u00b7\5$\23\2\u00b7\u00b8\b\16\1\2\u00b8\u00b9\3\2\2\2\u00b9\u00c0\7"+
		"\4\2\2\u00ba\u00bb\5\32\16\2\u00bb\u00bc\b\16\1\2\u00bc\u00c1\3\2\2\2"+
		"\u00bd\u00be\5\34\17\2\u00be\u00bf\b\16\1\2\u00bf\u00c1\3\2\2\2\u00c0"+
		"\u00ba\3\2\2\2\u00c0\u00bd\3\2\2\2\u00c1\u00cb\3\2\2\2\u00c2\u00c9\7\'"+
		"\2\2\u00c3\u00c4\5\32\16\2\u00c4\u00c5\b\16\1\2\u00c5\u00ca\3\2\2\2\u00c6"+
		"\u00c7\5\34\17\2\u00c7\u00c8\b\16\1\2\u00c8\u00ca\3\2\2\2\u00c9\u00c3"+
		"\3\2\2\2\u00c9\u00c6\3\2\2\2\u00ca\u00cc\3\2\2\2\u00cb\u00c2\3\2\2\2\u00cb"+
		"\u00cc\3\2\2\2\u00cc\u00cd\3\2\2\2\u00cd\u00ce\b\16\1\2\u00ce\u00d5\3"+
		"\2\2\2\u00cf\u00d0\7!\2\2\u00d0\u00d1\5 \21\2\u00d1\u00d2\7\32\2\2\u00d2"+
		"\u00d3\b\16\1\2\u00d3\u00d5\3\2\2\2\u00d4\u00a9\3\2\2\2\u00d4\u00ac\3"+
		"\2\2\2\u00d4\u00b4\3\2\2\2\u00d4\u00cf\3\2\2\2\u00d5\33\3\2\2\2\u00d6"+
		"\u00dc\7\b\2\2\u00d7\u00d8\5\32\16\2\u00d8\u00d9\b\17\1\2\u00d9\u00db"+
		"\3\2\2\2\u00da\u00d7\3\2\2\2\u00db\u00de\3\2\2\2\u00dc\u00da\3\2\2\2\u00dc"+
		"\u00dd\3\2\2\2\u00dd\u00df\3\2\2\2\u00de\u00dc\3\2\2\2\u00df\u00e0\7\7"+
		"\2\2\u00e0\u00e1\b\17\1\2\u00e1\35\3\2\2\2\u00e2\u00e3\5 \21\2\u00e3\u00e4"+
		"\b\20\1\2\u00e4\u0110\3\2\2\2\u00e5\u00e6\5(\25\2\u00e6\u00e7\b\20\1\2"+
		"\u00e7\u00e8\7\33\2\2\u00e8\u00e9\7+\2\2\u00e9\u00ef\7\3\2\2\u00ea\u00eb"+
		"\5 \21\2\u00eb\u00ec\b\20\1\2\u00ec\u00ee\3\2\2\2\u00ed\u00ea\3\2\2\2"+
		"\u00ee\u00f1\3\2\2\2\u00ef\u00ed\3\2\2\2\u00ef\u00f0\3\2\2\2\u00f0\u00f2"+
		"\3\2\2\2\u00f1\u00ef\3\2\2\2\u00f2\u00f3\7\4\2\2\u00f3\u00f4\b\20\1\2"+
		"\u00f4\u0110\3\2\2\2\u00f5\u00f6\7#\2\2\u00f6\u00f7\7*\2\2\u00f7\u00fd"+
		"\7\3\2\2\u00f8\u00f9\5 \21\2\u00f9\u00fa\b\20\1\2\u00fa\u00fc\3\2\2\2"+
		"\u00fb\u00f8\3\2\2\2\u00fc\u00ff\3\2\2\2\u00fd\u00fb\3\2\2\2\u00fd\u00fe"+
		"\3\2\2\2\u00fe\u0100\3\2\2\2\u00ff\u00fd\3\2\2\2\u0100\u0101\7\4\2\2\u0101"+
		"\u0110\b\20\1\2\u0102\u0103\7$\2\2\u0103\u0104\7*\2\2\u0104\u010a\7\3"+
		"\2\2\u0105\u0106\5 \21\2\u0106\u0107\b\20\1\2\u0107\u0109\3\2\2\2\u0108"+
		"\u0105\3\2\2\2\u0109\u010c\3\2\2\2\u010a\u0108\3\2\2\2\u010a\u010b\3\2"+
		"\2\2\u010b\u010d\3\2\2\2\u010c\u010a\3\2\2\2\u010d\u010e\7\4\2\2\u010e"+
		"\u0110\b\20\1\2\u010f\u00e2\3\2\2\2\u010f\u00e5\3\2\2\2\u010f\u00f5\3"+
		"\2\2\2\u010f\u0102\3\2\2\2\u0110\37\3\2\2\2\u0111\u0112\5&\24\2\u0112"+
		"\u0113\b\21\1\2\u0113\u011e\3\2\2\2\u0114\u0115\5(\25\2\u0115\u0116\b"+
		"\21\1\2\u0116\u011e\3\2\2\2\u0117\u0118\5\"\22\2\u0118\u0119\b\21\1\2"+
		"\u0119\u011e\3\2\2\2\u011a\u011b\5$\23\2\u011b\u011c\b\21\1\2\u011c\u011e"+
		"\3\2\2\2\u011d\u0111\3\2\2\2\u011d\u0114\3\2\2\2\u011d\u0117\3\2\2\2\u011d"+
		"\u011a\3\2\2\2\u011e!\3\2\2\2\u011f\u0120\b\22\1\2\u0120\u0121\7,\2\2"+
		"\u0121\u0129\b\22\1\2\u0122\u0123\7+\2\2\u0123\u0129\b\22\1\2\u0124\u0125"+
		"\7\3\2\2\u0125\u0126\5\"\22\2\u0126\u0127\7\4\2\2\u0127\u0129\3\2\2\2"+
		"\u0128\u011f\3\2\2\2\u0128\u0122\3\2\2\2\u0128\u0124\3\2\2\2\u0129\u0136"+
		"\3\2\2\2\u012a\u012b\f\7\2\2\u012b\u012c\t\3\2\2\u012c\u012d\5\"\22\b"+
		"\u012d\u012e\b\22\1\2\u012e\u0135\3\2\2\2\u012f\u0130\f\6\2\2\u0130\u0131"+
		"\t\4\2\2\u0131\u0132\5\"\22\7\u0132\u0133\b\22\1\2\u0133\u0135\3\2\2\2"+
		"\u0134\u012a\3\2\2\2\u0134\u012f\3\2\2\2\u0135\u0138\3\2\2\2\u0136\u0134"+
		"\3\2\2\2\u0136\u0137\3\2\2\2\u0137#\3\2\2\2\u0138\u0136\3\2\2\2\u0139"+
		"\u013a\b\23\1\2\u013a\u013b\7\26\2\2\u013b\u013c\5$\23\b\u013c\u013d\b"+
		"\23\1\2\u013d\u014c\3\2\2\2\u013e\u013f\5\"\22\2\u013f\u0140\b\23\1\2"+
		"\u0140\u014c\3\2\2\2\u0141\u0142\5&\24\2\u0142\u0143\b\23\1\2\u0143\u014c"+
		"\3\2\2\2\u0144\u0145\5(\25\2\u0145\u0146\b\23\1\2\u0146\u014c\3\2\2\2"+
		"\u0147\u0148\7\3\2\2\u0148\u0149\5$\23\2\u0149\u014a\7\4\2\2\u014a\u014c"+
		"\3\2\2\2\u014b\u0139\3\2\2\2\u014b\u013e\3\2\2\2\u014b\u0141\3\2\2\2\u014b"+
		"\u0144\3\2\2\2\u014b\u0147\3\2\2\2\u014c\u0154\3\2\2\2\u014d\u014e\f\7"+
		"\2\2\u014e\u014f\t\5\2\2\u014f\u0150\5$\23\b\u0150\u0151\b\23\1\2\u0151"+
		"\u0153\3\2\2\2\u0152\u014d\3\2\2\2\u0153\u0156\3\2\2\2\u0154\u0152\3\2"+
		"\2\2\u0154\u0155\3\2\2\2\u0155%\3\2\2\2\u0156\u0154\3\2\2\2\u0157\u0158"+
		"\7\34\2\2\u0158\u0160\b\24\1\2\u0159\u015a\7,\2\2\u015a\u0160\b\24\1\2"+
		"\u015b\u015c\7\35\2\2\u015c\u0160\b\24\1\2\u015d\u015e\7\36\2\2\u015e"+
		"\u0160\b\24\1\2\u015f\u0157\3\2\2\2\u015f\u0159\3\2\2\2\u015f\u015b\3"+
		"\2\2\2\u015f\u015d\3\2\2\2\u0160\'\3\2\2\2\u0161\u0162\7+\2\2\u0162\u0166"+
		"\b\25\1\2\u0163\u0164\7\"\2\2\u0164\u0166\b\25\1\2\u0165\u0161\3\2\2\2"+
		"\u0165\u0163\3\2\2\2\u0166)\3\2\2\2\u0167\u0168\7\b\2\2\u0168+\3\2\2\2"+
		"\u0169\u016a\7\7\2\2\u016a-\3\2\2\2\33\66H_j\u0080\u0086\u008f\u009b\u00c0"+
		"\u00c9\u00cb\u00d4\u00dc\u00ef\u00fd\u010a\u010f\u011d\u0128\u0134\u0136"+
		"\u014b\u0154\u015f\u0165";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}