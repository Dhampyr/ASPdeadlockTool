/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:37
 * @production ClassDecl : {@link BehaviorDecl} ::= <span class="component">{@link Annotation}*</span> <span class="component">Param:{@link ParamDecl}*</span> <span class="component">ImplementedInterfaceUse:{@link InterfaceTypeUse}*</span> <span class="component">[{@link InitBlock}]</span> <span class="component">Field:{@link FieldDecl}*</span> <span class="component">Method:{@link MethodImpl}*</span>;

 */
public class ClassDecl extends BehaviorDecl implements Cloneable, HasTypeHierarchy, HasParams {
  /**
   * @aspect GenerateErlang
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/erlang/GenerateErlang.jadd:33
   */
  public void generateErlangCode(ErlApp ea) throws IOException {
    new ClassGenerator(ea,this);
  }
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:222
   */
  public void generateJava(PrintStream stream) {
        JavaGeneratorHelper.generateClassDecl(stream,this);
    }
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:264
   */
  public void generateJavaDynamic(PrintStream stream) {
        DynamicJavaGeneratorHelper.generateClassDecl(stream,this);
    }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:549
   */
  public void generateMaude(PrintStream stream) {
        boolean inlist = false;
        PureExp scheduler = CompilerUtils.getAnnotationValue(this.getAnnotationList(), "Scheduler");
		stream.println("\n\n< '" + qualifiedName() + " : Class | Param: ");
        if (getNumParam() == 0) {
            stream.print("noVid");
        } else {
            stream.print("(");
            for (ParamDecl param : getParams()) {
                if (inlist) stream.print(", "); else inlist = true;
                stream.print("'" + param.getName() + "");
            }
            stream.print(")");
        }
        stream.print(",\n  Att: ");
        if (getNumField() == 0) {
            stream.print("noSubst");
        } else {
            inlist = false;
            for (FieldDecl field : getFields()) {
                if (inlist) stream.print(", "); else inlist = true;
                stream.print("'" + field.getName() + " |-> null ");
            }
        }
        stream.print(",\n  Sched: ");
        if (scheduler != null) scheduler.generateMaude(stream);
        else stream.print("\"ABS.Scheduler.defaultscheduler\"('queue)");
        stream.print(",\n  Mtds: ");
        if (hasInitBlock()) {
            getInitBlock().generateMaude(stream, getFields(), isActiveClass());
        } else {
            // minimal init method - this block is not connected to the
            // AST so we pass in the field list in all cases.
            new InitBlock(new List<Annotation>(), new List<Stmt>()).generateMaude(stream, getFields(), isActiveClass());
        }
        for (MethodImpl method : getMethods()) {
            stream.print(",\n    ");
            method.generateMaude(stream);
        }
        stream.print(",\n  Ocnt: 0 > ");
	}
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:712
   */
  public void doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        getAnnotationList().doPrettyPrint(stream, formatter, "");
        if (getNumAnnotation() > 0) {
            stream.println();
            formatter.afterStmt();
        }
        stream.print("class ");
        stream.print(getName());

        if (getNumParam() > 0) {
            stream.print("(");
            getParams().doPrettyPrint(stream, formatter, ",");
            stream.print(")");
        }

        if (getNumImplementedInterfaceUse() > 0) {
            stream.print(" implements ");
            getImplementedInterfaceUseList().doPrettyPrint(stream, formatter, ",");
        }
        formatter.beforeOpenBrace();
        stream.println(" {");
        formatter.afterOpenBrace();
        formatter.afterStmt();

        getFieldList().doPrettyPrint(stream, formatter);

        stream.println();
        formatter.afterStmt();

        if (hasInitBlock()) {
            getInitBlock().doPrettyPrint(stream, formatter);
            stream.println();
            formatter.afterStmt();
        }

        stream.println();
        formatter.afterStmt();

        List<MethodImpl> methods = getMethodList();
        if (methods.getNumChild() > 0) {
            methods.doPrettyPrint(stream, formatter);        
            stream.println();
            formatter.afterStmt();
        }

        formatter.beforeCloseBrace();
        stream.print("}");
        formatter.afterCloseBrace();
    }
  /**
   * @aspect GenerateProlog
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prolog/GenerateProlog.jadd:521
   */
  public void generateProlog(PrintStream s,ReachabilityInformation reachInfo){
        //generates class(name,implementedInterfaces,opt(initBlock),fieldsList).
        //and call the generator for each method in the class
        if(reachInfo==null || reachInfo.isReachable(this)){
	        s.print("class(" + quote(getName()) + ",[");
	
	        List<ParamDecl> parameterList = this.getParamList();
	
	        // interfaces
	        List<?> interfacesList = (List<?>) getChild(2);
	        int n = interfacesList.getNumChild();
	        for (int i = 0; i < n; i++){
	            interfacesList.getChild(i).generateProlog(s,reachInfo); 
	            if (i != n-1) s.print(",");
	        }
	        s.print("],[");
	        //the fields for the prolog backend are the parameters and the actual fields
	        // parameters as fields
	        int numParameters = parameterList.getNumChild();
	        for (int i = 0; i < numParameters; i++){
	            parameterList.getChild(i).generatePrologField(s,reachInfo); 
	            if (i != numParameters-1) s.print(",");
	        }
	        
	        List<FieldDecl> fieldsList = this.getFieldList();
	        int numFields = fieldsList.getNumChild();
	        //if there are written elements and we are gonna write more we need an extra comma
	        if(numFields>0 && numParameters>0)
	            s.print(",");
	        for (int i = 0; i < numFields; i++){
	            fieldsList.getChild(i).generateProlog(s,reachInfo); // fields
	            if (i != numFields-1) s.print(",");
	        }
	        s.println("]).");
	        //once the header has been generated we have to generate the init method
	        Opt<InitBlock> initBlockOpt=(Opt<InitBlock>) getChild(3);
	        if(initBlockOpt.getNumChild()>0){
	            initBlockOpt.getChild(0).generateProlog(s,reachInfo,quote(getName()),parameterList,fieldsList);
	        }else{
	            //if there is no init block the easiest way is to create an empty one
	            InitBlock block=new InitBlock();
	            block.setPosition(this.getStartPos(), this.getStartPos());
	            block.generateProlog(s,reachInfo,quote(getName()),parameterList,fieldsList);
	        }
	        //we generate the rest of the methods implemented by the class
	        List<MethodImpl> methodsList = (List<MethodImpl>) getChild(5);
	        n = methodsList.getNumChild();
	        for (int i = 0; i < n; i++){
	            methodsList.getChild(i).generateProlog(s,reachInfo,quote(getName())); // cons here is a DataConstructor
	        }
        }
    }
  /**
   * @aspect collectReachableCode
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prolog/collectReachableCode.jadd:44
   */
  public void collectReachableCode(ReachabilityInformation reachInfo){
        if(reachInfo.isReachable(this))
            super.collectReachableCode(reachInfo);

    }
  /**
   * @aspect DeltaParameterSubstitution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/delta/DeltaParameterSubstitution.jadd:148
   */
  protected void applySubstitution(Map<String,Value> subst) throws DeltaModellingWithNodeException {
        HashMap<String,Value> subst2 = new HashMap<String,Value>(subst);
        for (ParamDecl p : getParams()) 
            p.updateSubstitution(subst2);
        if (hasInitBlock())
            getInitBlock().applySubstitution(subst2);
        for (FieldDecl f : getFields())
            f.applySubstitution(subst2);
        for (MethodImpl m : getMethods())
            m.applySubstitution(subst2);
    }
  /**
   * @aspect PrettyPrint
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/tests/PrettyPrint.jadd:88
   */
  public void prettyPrintChildren(PrintWriter w, ABSFormatter f) {
        w.print(getName());
        w.print(' ');
        super.prettyPrintChildren(w,f);        
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:49
   */
  public ClassDecl parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:155
   */
  public Collection<MethodSig> getAllMethodSigs() {
        HashMap<String, MethodSig> sigs = new HashMap<String, MethodSig>();
        for (MethodImpl m : getMethods()) {
            String name = m.getMethodSig().getName();
            sigs.put(name,m.getMethodSig());        
        }
        return sigs.values();
    }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:189
   */
  public void addAllMethodSigs(HashMap<String, MethodSig> sigs, SemanticErrorList e) {
        for (InterfaceTypeUse u : getImplementedInterfaceUses()) {
            Decl d = u.getDecl();
            if (d.isInterface()) {
                InterfaceDecl id = (InterfaceDecl) d;
                HashMap<String, MethodSig> mysigs = new HashMap<String, MethodSig>(); 
                id.addAllMethodSigs(mysigs, new HashSet<InterfaceDecl>());
                checkOverloading(sigs,mysigs,u,e);
                mysigs.putAll(sigs);
                sigs.clear();
                sigs.putAll(mysigs);
            }
        }
    }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:233
   */
  public void refined_TypeChecker_ClassDecl_typeCheck(SemanticErrorList e) {
        Set<String> fields = new HashSet<String>();
        for (ParamDecl d : getParams()) {
            d.typeCheck(e);
            if (!fields.add(d.getName())) {
                e.add(new TypeError(d, ErrorMessage.DUPLICATE_FIELD_NAME, d.getName()));
            }
        }

        for (InterfaceTypeUse i : getImplementedInterfaceUses()) {
            i.typeCheck(e);
        }

        for (FieldDecl f : getFields()) {
            f.typeCheck(e);
            if (!fields.add(f.getName())) {
                e.add(new TypeError(f, ErrorMessage.DUPLICATE_FIELD_NAME, f.getName()));
            }
        }

        if (hasInitBlock()) {
            getInitBlock().typeCheck(e);
            getInitBlock().checkLegalInit(e, ErrorMessage.NOT_ALLOWED_IN_INIT_CODE);
        }

        HashMap<String, MethodSig> sigs = new HashMap<String, MethodSig>();
        addAllMethodSigs(sigs,e);  

        HashMap<String, MethodImpl> methodImpls = new HashMap<String, MethodImpl>(); 

        for (MethodImpl m : getMethods()) {
            m.typeCheck(e);
            String name = m.getMethodSig().getName();
            if (methodImpls.put(name,m) != null) {
                e.add(new TypeError(m, ErrorMessage.DUPLICATE_METHOD_NAME, name));
            }
            MethodSig s = sigs.get(name);
            if (s != null) {
                MethodSig ms = m.getMethodSig();
                InterfaceDecl d = (InterfaceDecl) s.getParent().getParent();
                if (s.getNumParam() != ms.getNumParam()) {
                    e.add(new TypeError(m,ErrorMessage.METHOD_IMPL_WRONG_NUM_PARAMS, name, d.getName(), ""+s.getNumParam(), ""+ms.getNumParam()));
                } else {
                    for (int i = 0; i < s.getNumParam(); i++) {
                        Type texpected = s.getParam(i).getType();
                        Type t = ms.getParam(i).getType();
                        if (!texpected.equals(t)) {
                            e.add(new TypeError(m,ErrorMessage.METHOD_IMPL_WRONG_PARAM_TYPE, 
                                    ms.getParam(i).getName(), name, d.getName(), 
                                    texpected.toString(), t.toString()));
                        }
                    }
                }

                Type expectedReturnType = s.getReturnType().getType();
                Type actualReturnType = ms.getReturnType().getType(); 
                if (!expectedReturnType.equals(actualReturnType)) {
                    e.add(new TypeError(m,ErrorMessage.METHOD_IMPL_WRONG_RETURN_TYPE, 
                            name, d.getName(),
                            expectedReturnType.toString(), actualReturnType.toString()));

                }
            }
        }

        for (MethodSig s : sigs.values()) {
            if (!methodImpls.containsKey(s.getName())) {
                ASTNode<?> location = this;
                InterfaceDecl d = (InterfaceDecl) s.getParent().getParent();
                // find the location where the error should be marked:
                for (InterfaceTypeUse implementedInterface : getImplementedInterfaceUses()) {
                    if (implementedInterface.getDecl().getType().isAssignable(d.getType())) {
                        location = implementedInterface;
                        break;
                    }
                }
                e.add(new TypeError(location, ErrorMessage.METHOD_NOT_IMPLEMENTED, s.getName(), d.getName(), getName()));
            }
        }

    }
  /**
   * returns all supertypes
   * results are not cached
   * @aspect TypeHierarchy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/TypeHierarchy.jadd:46
   */
  public Collection<InterfaceDecl> getSuperTypes() {
        return TypeHierarchyHelper.addSuperTypes(new HashSet<InterfaceDecl>(), this);
    }
  /**
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:394
   */
  public java.util.List<Type> getTypes()              { return TypeCheckerHelper.getTypes(getParams()); }
  /**
   * @declaredat ASTNode:1
   */
  public ClassDecl() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[6];
    setChild(new List(), 0);
    setChild(new List(), 1);
    setChild(new List(), 2);
    setChild(new Opt(), 3);
    setChild(new List(), 4);
    setChild(new List(), 5);
  }
  /**
   * @declaredat ASTNode:19
   */
  public ClassDecl(String p0, List<Annotation> p1, List<ParamDecl> p2, List<InterfaceTypeUse> p3, Opt<InitBlock> p4, List<FieldDecl> p5, List<MethodImpl> p6) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
    setChild(p3, 2);
    setChild(p4, 3);
    setChild(p5, 4);
    setChild(p6, 5);
  }
  /**
   * @declaredat ASTNode:28
   */
  public ClassDecl(beaver.Symbol p0, List<Annotation> p1, List<ParamDecl> p2, List<InterfaceTypeUse> p3, Opt<InitBlock> p4, List<FieldDecl> p5, List<MethodImpl> p6) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
    setChild(p3, 2);
    setChild(p4, 3);
    setChild(p5, 4);
    setChild(p6, 5);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:40
   */
  protected int numChildren() {
    return 6;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:46
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:52
   */
  public void flushCache() {
    super.flushCache();
    isActiveClass_visited = -1;
    isForeign_visited = -1;
    isForeign_computed = false;
    getDirectSuperTypes_visited = -1;
    locallookupVarOrFieldName_String_boolean_visited = null;
    locallookupVarOrFieldName_String_boolean_values = null;
    getNodeAnnotations_visited = -1;
    isClass_visited = -1;
    lookupMethod_String_visited = null;
    lookupMethod_String_values = null;
    getType_visited = -1;
    getType_computed = false;
    getType_value = null;
    lookup_KindedName_visited = null;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:72
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:78
   */
  public ClassDecl clone() throws CloneNotSupportedException {
    ClassDecl node = (ClassDecl) super.clone();
    node.isActiveClass_visited = -1;
    node.isForeign_visited = -1;
    node.isForeign_computed = false;
    node.getDirectSuperTypes_visited = -1;
    node.locallookupVarOrFieldName_String_boolean_visited = null;
    node.locallookupVarOrFieldName_String_boolean_values = null;
    node.getNodeAnnotations_visited = -1;
    node.isClass_visited = -1;
    node.lookupMethod_String_visited = null;
    node.lookupMethod_String_values = null;
    node.getType_visited = -1;
    node.getType_computed = false;
    node.getType_value = null;
    node.lookup_KindedName_visited = null;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:101
   */
  public ClassDecl copy() {
    try {
      ClassDecl node = (ClassDecl) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:119
   */
  public ClassDecl fullCopy() {
    ClassDecl tree = (ClassDecl) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the lexeme Name.
   * @param value The new value for the lexeme Name.
   * @apilevel high-level
   */
  public void setName(String value) {
    tokenString_Name = value;
  }
  /**
   * JastAdd-internal setter for lexeme Name using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme Name
   * @apilevel internal
   */
  public void setName(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setName is only valid for String lexemes");
    tokenString_Name = (String)symbol.value;
    Namestart = symbol.getStart();
    Nameend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme Name.
   * @return The value for the lexeme Name.
   * @apilevel high-level
   */
  public String getName() {
    return tokenString_Name != null ? tokenString_Name : "";
  }
  /**
   * Replaces the Annotation list.
   * @param list The new list node to be used as the Annotation list.
   * @apilevel high-level
   */
  public void setAnnotationList(List<Annotation> list) {
    setChild(list, 0);
  }
  /**
   * Retrieves the number of children in the Annotation list.
   * @return Number of children in the Annotation list.
   * @apilevel high-level
   */
  public int getNumAnnotation() {
    return getAnnotationList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Annotation list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Annotation list.
   * @apilevel low-level
   */
  public int getNumAnnotationNoTransform() {
    return getAnnotationListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Annotation list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Annotation list.
   * @apilevel high-level
   */
  public Annotation getAnnotation(int i) {
    return (Annotation) getAnnotationList().getChild(i);
  }
  /**
   * Check whether the Annotation list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasAnnotation() {
    return getAnnotationList().getNumChild() != 0;
  }
  /**
   * Append an element to the Annotation list.
   * @param node The element to append to the Annotation list.
   * @apilevel high-level
   */
  public void addAnnotation(Annotation node) {
    List<Annotation> list = (parent == null || state == null) ? getAnnotationListNoTransform() : getAnnotationList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addAnnotationNoTransform(Annotation node) {
    List<Annotation> list = getAnnotationListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Annotation list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setAnnotation(Annotation node, int i) {
    List<Annotation> list = getAnnotationList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Annotation list.
   * @return The node representing the Annotation list.
   * @apilevel high-level
   */
  public List<Annotation> getAnnotationList() {
    List<Annotation> list = (List<Annotation>) getChild(0);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Annotation list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Annotation list.
   * @apilevel low-level
   */
  public List<Annotation> getAnnotationListNoTransform() {
    return (List<Annotation>) getChildNoTransform(0);
  }
  /**
   * Retrieves the Annotation list.
   * @return The node representing the Annotation list.
   * @apilevel high-level
   */
  public List<Annotation> getAnnotations() {
    return getAnnotationList();
  }
  /**
   * Retrieves the Annotation list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Annotation list.
   * @apilevel low-level
   */
  public List<Annotation> getAnnotationsNoTransform() {
    return getAnnotationListNoTransform();
  }
  /**
   * Replaces the Param list.
   * @param list The new list node to be used as the Param list.
   * @apilevel high-level
   */
  public void setParamList(List<ParamDecl> list) {
    setChild(list, 1);
  }
  /**
   * Retrieves the number of children in the Param list.
   * @return Number of children in the Param list.
   * @apilevel high-level
   */
  public int getNumParam() {
    return getParamList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Param list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Param list.
   * @apilevel low-level
   */
  public int getNumParamNoTransform() {
    return getParamListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Param list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Param list.
   * @apilevel high-level
   */
  public ParamDecl getParam(int i) {
    return (ParamDecl) getParamList().getChild(i);
  }
  /**
   * Check whether the Param list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasParam() {
    return getParamList().getNumChild() != 0;
  }
  /**
   * Append an element to the Param list.
   * @param node The element to append to the Param list.
   * @apilevel high-level
   */
  public void addParam(ParamDecl node) {
    List<ParamDecl> list = (parent == null || state == null) ? getParamListNoTransform() : getParamList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addParamNoTransform(ParamDecl node) {
    List<ParamDecl> list = getParamListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Param list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setParam(ParamDecl node, int i) {
    List<ParamDecl> list = getParamList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Param list.
   * @return The node representing the Param list.
   * @apilevel high-level
   */
  public List<ParamDecl> getParamList() {
    List<ParamDecl> list = (List<ParamDecl>) getChild(1);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Param list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Param list.
   * @apilevel low-level
   */
  public List<ParamDecl> getParamListNoTransform() {
    return (List<ParamDecl>) getChildNoTransform(1);
  }
  /**
   * Retrieves the Param list.
   * @return The node representing the Param list.
   * @apilevel high-level
   */
  public List<ParamDecl> getParams() {
    return getParamList();
  }
  /**
   * Retrieves the Param list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Param list.
   * @apilevel low-level
   */
  public List<ParamDecl> getParamsNoTransform() {
    return getParamListNoTransform();
  }
  /**
   * Replaces the ImplementedInterfaceUse list.
   * @param list The new list node to be used as the ImplementedInterfaceUse list.
   * @apilevel high-level
   */
  public void setImplementedInterfaceUseList(List<InterfaceTypeUse> list) {
    setChild(list, 2);
  }
  /**
   * Retrieves the number of children in the ImplementedInterfaceUse list.
   * @return Number of children in the ImplementedInterfaceUse list.
   * @apilevel high-level
   */
  public int getNumImplementedInterfaceUse() {
    return getImplementedInterfaceUseList().getNumChild();
  }
  /**
   * Retrieves the number of children in the ImplementedInterfaceUse list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the ImplementedInterfaceUse list.
   * @apilevel low-level
   */
  public int getNumImplementedInterfaceUseNoTransform() {
    return getImplementedInterfaceUseListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the ImplementedInterfaceUse list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the ImplementedInterfaceUse list.
   * @apilevel high-level
   */
  public InterfaceTypeUse getImplementedInterfaceUse(int i) {
    return (InterfaceTypeUse) getImplementedInterfaceUseList().getChild(i);
  }
  /**
   * Check whether the ImplementedInterfaceUse list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasImplementedInterfaceUse() {
    return getImplementedInterfaceUseList().getNumChild() != 0;
  }
  /**
   * Append an element to the ImplementedInterfaceUse list.
   * @param node The element to append to the ImplementedInterfaceUse list.
   * @apilevel high-level
   */
  public void addImplementedInterfaceUse(InterfaceTypeUse node) {
    List<InterfaceTypeUse> list = (parent == null || state == null) ? getImplementedInterfaceUseListNoTransform() : getImplementedInterfaceUseList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addImplementedInterfaceUseNoTransform(InterfaceTypeUse node) {
    List<InterfaceTypeUse> list = getImplementedInterfaceUseListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the ImplementedInterfaceUse list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setImplementedInterfaceUse(InterfaceTypeUse node, int i) {
    List<InterfaceTypeUse> list = getImplementedInterfaceUseList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the ImplementedInterfaceUse list.
   * @return The node representing the ImplementedInterfaceUse list.
   * @apilevel high-level
   */
  public List<InterfaceTypeUse> getImplementedInterfaceUseList() {
    List<InterfaceTypeUse> list = (List<InterfaceTypeUse>) getChild(2);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the ImplementedInterfaceUse list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the ImplementedInterfaceUse list.
   * @apilevel low-level
   */
  public List<InterfaceTypeUse> getImplementedInterfaceUseListNoTransform() {
    return (List<InterfaceTypeUse>) getChildNoTransform(2);
  }
  /**
   * Retrieves the ImplementedInterfaceUse list.
   * @return The node representing the ImplementedInterfaceUse list.
   * @apilevel high-level
   */
  public List<InterfaceTypeUse> getImplementedInterfaceUses() {
    return getImplementedInterfaceUseList();
  }
  /**
   * Retrieves the ImplementedInterfaceUse list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the ImplementedInterfaceUse list.
   * @apilevel low-level
   */
  public List<InterfaceTypeUse> getImplementedInterfaceUsesNoTransform() {
    return getImplementedInterfaceUseListNoTransform();
  }
  /**
   * Replaces the optional node for the InitBlock child. This is the <code>Opt</code>
   * node containing the child InitBlock, not the actual child!
   * @param opt The new node to be used as the optional node for the InitBlock child.
   * @apilevel low-level
   */
  public void setInitBlockOpt(Opt<InitBlock> opt) {
    setChild(opt, 3);
  }
  /**
   * Replaces the (optional) InitBlock child.
   * @param node The new node to be used as the InitBlock child.
   * @apilevel high-level
   */
  public void setInitBlock(InitBlock node) {
    getInitBlockOpt().setChild(node, 0);
  }
  /**
   * Check whether the optional InitBlock child exists.
   * @return {@code true} if the optional InitBlock child exists, {@code false} if it does not.
   * @apilevel high-level
   */
  public boolean hasInitBlock() {
    return getInitBlockOpt().getNumChild() != 0;
  }
  /**
   * Retrieves the (optional) InitBlock child.
   * @return The InitBlock child, if it exists. Returns {@code null} otherwise.
   * @apilevel low-level
   */
  public InitBlock getInitBlock() {
    return (InitBlock) getInitBlockOpt().getChild(0);
  }
  /**
   * Retrieves the optional node for the InitBlock child. This is the <code>Opt</code> node containing the child InitBlock, not the actual child!
   * @return The optional node for child the InitBlock child.
   * @apilevel low-level
   */
  public Opt<InitBlock> getInitBlockOpt() {
    return (Opt<InitBlock>) getChild(3);
  }
  /**
   * Retrieves the optional node for child InitBlock. This is the <code>Opt</code> node containing the child InitBlock, not the actual child!
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The optional node for child InitBlock.
   * @apilevel low-level
   */
  public Opt<InitBlock> getInitBlockOptNoTransform() {
    return (Opt<InitBlock>) getChildNoTransform(3);
  }
  /**
   * Replaces the Field list.
   * @param list The new list node to be used as the Field list.
   * @apilevel high-level
   */
  public void setFieldList(List<FieldDecl> list) {
    setChild(list, 4);
  }
  /**
   * Retrieves the number of children in the Field list.
   * @return Number of children in the Field list.
   * @apilevel high-level
   */
  public int getNumField() {
    return getFieldList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Field list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Field list.
   * @apilevel low-level
   */
  public int getNumFieldNoTransform() {
    return getFieldListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Field list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Field list.
   * @apilevel high-level
   */
  public FieldDecl getField(int i) {
    return (FieldDecl) getFieldList().getChild(i);
  }
  /**
   * Check whether the Field list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasField() {
    return getFieldList().getNumChild() != 0;
  }
  /**
   * Append an element to the Field list.
   * @param node The element to append to the Field list.
   * @apilevel high-level
   */
  public void addField(FieldDecl node) {
    List<FieldDecl> list = (parent == null || state == null) ? getFieldListNoTransform() : getFieldList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addFieldNoTransform(FieldDecl node) {
    List<FieldDecl> list = getFieldListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Field list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setField(FieldDecl node, int i) {
    List<FieldDecl> list = getFieldList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Field list.
   * @return The node representing the Field list.
   * @apilevel high-level
   */
  public List<FieldDecl> getFieldList() {
    List<FieldDecl> list = (List<FieldDecl>) getChild(4);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Field list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Field list.
   * @apilevel low-level
   */
  public List<FieldDecl> getFieldListNoTransform() {
    return (List<FieldDecl>) getChildNoTransform(4);
  }
  /**
   * Retrieves the Field list.
   * @return The node representing the Field list.
   * @apilevel high-level
   */
  public List<FieldDecl> getFields() {
    return getFieldList();
  }
  /**
   * Retrieves the Field list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Field list.
   * @apilevel low-level
   */
  public List<FieldDecl> getFieldsNoTransform() {
    return getFieldListNoTransform();
  }
  /**
   * Replaces the Method list.
   * @param list The new list node to be used as the Method list.
   * @apilevel high-level
   */
  public void setMethodList(List<MethodImpl> list) {
    setChild(list, 5);
  }
  /**
   * Retrieves the number of children in the Method list.
   * @return Number of children in the Method list.
   * @apilevel high-level
   */
  public int getNumMethod() {
    return getMethodList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Method list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Method list.
   * @apilevel low-level
   */
  public int getNumMethodNoTransform() {
    return getMethodListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Method list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Method list.
   * @apilevel high-level
   */
  public MethodImpl getMethod(int i) {
    return (MethodImpl) getMethodList().getChild(i);
  }
  /**
   * Check whether the Method list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasMethod() {
    return getMethodList().getNumChild() != 0;
  }
  /**
   * Append an element to the Method list.
   * @param node The element to append to the Method list.
   * @apilevel high-level
   */
  public void addMethod(MethodImpl node) {
    List<MethodImpl> list = (parent == null || state == null) ? getMethodListNoTransform() : getMethodList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addMethodNoTransform(MethodImpl node) {
    List<MethodImpl> list = getMethodListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Method list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setMethod(MethodImpl node, int i) {
    List<MethodImpl> list = getMethodList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Method list.
   * @return The node representing the Method list.
   * @apilevel high-level
   */
  public List<MethodImpl> getMethodList() {
    List<MethodImpl> list = (List<MethodImpl>) getChild(5);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Method list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Method list.
   * @apilevel low-level
   */
  public List<MethodImpl> getMethodListNoTransform() {
    return (List<MethodImpl>) getChildNoTransform(5);
  }
  /**
   * Retrieves the Method list.
   * @return The node representing the Method list.
   * @apilevel high-level
   */
  public List<MethodImpl> getMethods() {
    return getMethodList();
  }
  /**
   * Retrieves the Method list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Method list.
   * @apilevel low-level
   */
  public List<MethodImpl> getMethodsNoTransform() {
    return getMethodListNoTransform();
  }
  /**
   * @aspect TypeCheckerExtension
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/ext/TypeCheckerExtension.jadd:222
   */
    public void typeCheck(SemanticErrorList s) {
        int size = s.size();
        refined_TypeChecker_ClassDecl_typeCheck(s);
        if (s.size() > size) return;

        HashMap<String, MethodSig> sigs = new HashMap<String, MethodSig>();
        addAllMethodSigs(sigs,s);  

        HashMap<String, MethodImpl> methodImpls = new HashMap<String, MethodImpl>(); 

        for (MethodImpl m : getMethods()) {
            String name = m.getMethodSig().getName();
            if (sigs.containsKey(name)) {
                MethodSig sig = sigs.get(name);
                MethodSig ms = m.getMethodSig();
                getModel().getTypeExt().checkOverride(ms,sig);
            }
        }
		getModel().getTypeExt().checkClassDecl(this);
    }
  /**
   * @apilevel internal
   */
  protected int isActiveClass_visited = -1;
  /**
   * @attribute syn
   * @aspect ActiveClasses
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/ActiveClasses.jrag:4
   */
  public boolean isActiveClass() {
    ASTNode$State state = state();
    if (isActiveClass_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isActiveClass in class: org.jastadd.ast.AST.SynDecl");
    }
    isActiveClass_visited = state().boundariesCrossed;
    try {  return lookupMethod("run") != null;  }
    finally {
      isActiveClass_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int isForeign_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean isForeign_computed = false;
  /**
   * @apilevel internal
   */
  protected boolean isForeign_value;
  /**
   * @attribute syn
   * @aspect FLIAnnotation
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/FLIAnnotation.jrag:3
   */
  public boolean isForeign() {
    if(isForeign_computed) {
      return isForeign_value;
    }
    ASTNode$State state = state();
    if (isForeign_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isForeign in class: org.jastadd.ast.AST.SynDecl");
    }
    isForeign_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    isForeign_value = isForeign_compute();
    if(isFinal && num == state().boundariesCrossed) {
      isForeign_computed = true;
    } else {
    }

    isForeign_visited = -1;
    return isForeign_value;
  }
  /**
   * @apilevel internal
   */
  private boolean isForeign_compute() {
          return !AnnotationHelper.getAnnotationsOfType(getAnnotations(),"ABS.FLI.FLIAnnotation").isEmpty();
      }
  /**
   * @apilevel internal
   */
  protected int getDirectSuperTypes_visited = -1;
  /**
   * @attribute syn
   * @aspect TypeHierarchy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/TypeHierarchy.jadd:40
   */
  public Collection<InterfaceDecl> getDirectSuperTypes() {
    ASTNode$State state = state();
    if (getDirectSuperTypes_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getDirectSuperTypes in class: org.jastadd.ast.AST.SynDecl");
    }
    getDirectSuperTypes_visited = state().boundariesCrossed;
    try {  return TypeHierarchyHelper.getTypeDecls(getImplementedInterfaceUseList());  }
    finally {
      getDirectSuperTypes_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected java.util.Map locallookupVarOrFieldName_String_boolean_visited;
  protected java.util.Map locallookupVarOrFieldName_String_boolean_values;
  /**
   * FIXME: ignores fieldOnly - refactor to avoid confusion?
   * @attribute syn
   * @aspect VarResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/VarResolution.jrag:78
   */
  public VarOrFieldDecl locallookupVarOrFieldName(String name, boolean fieldOnly) {
    java.util.List _parameters = new java.util.ArrayList(2);
    _parameters.add(name);
    _parameters.add(Boolean.valueOf(fieldOnly));
    if(locallookupVarOrFieldName_String_boolean_visited == null) locallookupVarOrFieldName_String_boolean_visited = new java.util.HashMap(4);
    if(locallookupVarOrFieldName_String_boolean_values == null) locallookupVarOrFieldName_String_boolean_values = new java.util.HashMap(4);
    if(locallookupVarOrFieldName_String_boolean_values.containsKey(_parameters)) {
      return (VarOrFieldDecl)locallookupVarOrFieldName_String_boolean_values.get(_parameters);
    }
    ASTNode$State state = state();
    if (Integer.valueOf(state().boundariesCrossed).equals(locallookupVarOrFieldName_String_boolean_visited.get(_parameters))) {
      throw new RuntimeException("Circular definition of attr: locallookupVarOrFieldName in class: org.jastadd.ast.AST.SynDecl");
    }
    locallookupVarOrFieldName_String_boolean_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    VarOrFieldDecl locallookupVarOrFieldName_String_boolean_value = locallookupVarOrFieldName_compute(name, fieldOnly);
    if(isFinal && num == state().boundariesCrossed) {
      locallookupVarOrFieldName_String_boolean_values.put(_parameters, locallookupVarOrFieldName_String_boolean_value);
    } else {
    }

    locallookupVarOrFieldName_String_boolean_visited.remove(_parameters);
    return locallookupVarOrFieldName_String_boolean_value;
  }
  /**
   * @apilevel internal
   */
  private VarOrFieldDecl locallookupVarOrFieldName_compute(String name, boolean fieldOnly) {
     	  for (ParamDecl p : getParams()) {
     		  if (p.getName().equals(name)) 
     			  return p;
     	  }
     	 
          for (FieldDecl d : getFields()) {
              if (d.getName().equals(name))
                  return d;
          }
          return null;
      }
  /**
   * @apilevel internal
   */
  protected int getNodeAnnotations_visited = -1;
  /**
   * @attribute syn
   * @aspect SqlHelpers
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/sql/SqlHelpers.jadd:4
   */
  public List<Annotation> getNodeAnnotations() {
    ASTNode$State state = state();
    if (getNodeAnnotations_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getNodeAnnotations in class: org.jastadd.ast.AST.SynDecl");
    }
    getNodeAnnotations_visited = state().boundariesCrossed;
    try {  return getAnnotations();  }
    finally {
      getNodeAnnotations_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int isClass_visited = -1;
  /**
   * @attribute syn
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:14
   */
  public boolean isClass() {
    ASTNode$State state = state();
    if (isClass_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isClass in class: org.jastadd.ast.AST.SynDecl");
    }
    isClass_visited = state().boundariesCrossed;
    try {  return true;  }
    finally {
      isClass_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected java.util.Map lookupMethod_String_visited;
  protected java.util.Map lookupMethod_String_values;
  /**
   * @attribute syn
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:484
   */
  public MethodImpl lookupMethod(String name) {
    Object _parameters = name;
    if(lookupMethod_String_visited == null) lookupMethod_String_visited = new java.util.HashMap(4);
    if(lookupMethod_String_values == null) lookupMethod_String_values = new java.util.HashMap(4);
    if(lookupMethod_String_values.containsKey(_parameters)) {
      return (MethodImpl)lookupMethod_String_values.get(_parameters);
    }
    ASTNode$State state = state();
    if (Integer.valueOf(state().boundariesCrossed).equals(lookupMethod_String_visited.get(_parameters))) {
      throw new RuntimeException("Circular definition of attr: lookupMethod in class: org.jastadd.ast.AST.SynDecl");
    }
    lookupMethod_String_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    MethodImpl lookupMethod_String_value = lookupMethod_compute(name);
    if(isFinal && num == state().boundariesCrossed) {
      lookupMethod_String_values.put(_parameters, lookupMethod_String_value);
    } else {
    }

    lookupMethod_String_visited.remove(_parameters);
    return lookupMethod_String_value;
  }
  /**
   * @apilevel internal
   */
  private MethodImpl lookupMethod_compute(String name) {
          for (MethodImpl m : getMethods()) {
              if (m.getMethodSig().getName().equals(name))
                  return m;
          }
          return null;
      }
  /**
   * @apilevel internal
   */
  protected int getType_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getType_computed = false;
  /**
   * @apilevel internal
   */
  protected Type getType_value;
  /**
   * @attribute syn
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:71
   */
  public Type getType() {
    if(getType_computed) {
      return getType_value;
    }
    ASTNode$State state = state();
    if (getType_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getType in class: org.jastadd.ast.AST.SynDecl");
    }
    getType_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getType_value = getType_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getType_computed = true;
    } else {
    }

    getType_visited = -1;
    return getType_value;
  }
  /**
   * @apilevel internal
   */
  private Type getType_compute() {  return new UnionType(this, getImplementedInterfaceUses());  }
  /**
   * @attribute inh
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:272
   */
  public Decl lookup(KindedName name) {
    Object _parameters = name;
    if(lookup_KindedName_visited == null) lookup_KindedName_visited = new java.util.HashMap(4);
    ASTNode$State state = state();
    if (Integer.valueOf(state().boundariesCrossed).equals(lookup_KindedName_visited.get(_parameters))) {
      throw new RuntimeException("Circular definition of attr: lookup in class: org.jastadd.ast.AST.InhDecl");
    }
    lookup_KindedName_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    Decl lookup_KindedName_value = getParent().Define_Decl_lookup(this, null, name);

    lookup_KindedName_visited.remove(_parameters);
    return lookup_KindedName_value;
  }
  /**
   * @apilevel internal
   */
  protected java.util.Map lookup_KindedName_visited;
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/VarResolution.jrag:279
   * @apilevel internal
   */
  public VarOrFieldDecl Define_VarOrFieldDecl_lookupVarOrFieldName(ASTNode caller, ASTNode child, String name, boolean fieldOnly) {
    if (caller == getFieldListNoTransform()) {
      int i = caller.getIndexOfChild(child);
      return locallookupVarOrFieldName(name,fieldOnly);
    }
    else if (caller == getInitBlockOptNoTransform()) {
      return locallookupVarOrFieldName(name,fieldOnly);
    }
    else if (caller == getMethodListNoTransform()) {
      int i = caller.getIndexOfChild(child);
      return locallookupVarOrFieldName(name,fieldOnly);
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_VarOrFieldDecl_lookupVarOrFieldName(this, caller, name, fieldOnly);
    }
  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }  protected void collect_contributors_InterfaceDecl_getDirectSubTypes() {
  /**
   * @attribute coll
   * @aspect TypeHierarchy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/TypeHierarchy.jadd:24
   */
      for(java.util.Iterator iter = (getDirectSuperTypes()).iterator(); iter.hasNext(); ) {
        InterfaceDecl ref = (InterfaceDecl) iter.next();
        if (ref != null) {
          ref.InterfaceDecl_getDirectSubTypes_contributors().add(this);
        }
      }
    super.collect_contributors_InterfaceDecl_getDirectSubTypes();
  }
  protected void collect_contributors_InterfaceDecl_getSubTypes() {
  /**
   * @attribute coll
   * @aspect TypeHierarchy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/TypeHierarchy.jadd:33
   */
      for(java.util.Iterator iter = (getSuperTypes()).iterator(); iter.hasNext(); ) {
        InterfaceDecl ref = (InterfaceDecl) iter.next();
        if (ref != null) {
          ref.InterfaceDecl_getSubTypes_contributors().add(this);
        }
      }
    super.collect_contributors_InterfaceDecl_getSubTypes();
  }
  protected void contributeTo_InterfaceDecl_InterfaceDecl_getDirectSubTypes(Collection<HasTypeHierarchy> collection) {
    super.contributeTo_InterfaceDecl_InterfaceDecl_getDirectSubTypes(collection);
    collection.add(this);
  }

  protected void contributeTo_InterfaceDecl_InterfaceDecl_getSubTypes(Collection<HasTypeHierarchy> collection) {
    super.contributeTo_InterfaceDecl_InterfaceDecl_getSubTypes(collection);
    collection.add(this);
  }

}
