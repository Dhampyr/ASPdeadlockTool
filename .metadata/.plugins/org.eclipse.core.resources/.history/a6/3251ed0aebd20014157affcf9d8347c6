/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:283
 * @production RebindStmt : {@link Stmt} ::= <span class="component">Obj:{@link Exp}</span> <span class="component">&lt;Field:String&gt;</span> <span class="component">Val:{@link Exp}</span>;

 */
public class RebindStmt extends Stmt implements Cloneable {
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:983
   */
  public void generateJava(String indent, PrintStream stream) { }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:976
   */
  public void generateMaude(PrintStream stream) { // I guess the access to the elements of the Rebind is done as specified in ABS.ast
      stream.print("rebind( ");
      getObj().generateMaude(stream);
      stream.print("; '" + getField() + " ; ");
      getVal().generateMaude(stream);
      stream.print(") ");
    }
  /**
   * @aspect TypeCheckComponents
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:1116
   */
  public void typeCheck(SemanticErrorList e) {}
  /**
   * @declaredat ASTNode:1
   */
  public RebindStmt() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[3];
    setChild(new List(), 0);
  }
  /**
   * @declaredat ASTNode:14
   */
  public RebindStmt(List<Annotation> p0, Exp p1, String p2, Exp p3) {
    setChild(p0, 0);
    setChild(p1, 1);
    setField(p2);
    setChild(p3, 2);
  }
  /**
   * @declaredat ASTNode:20
   */
  public RebindStmt(List<Annotation> p0, Exp p1, beaver.Symbol p2, Exp p3) {
    setChild(p0, 0);
    setChild(p1, 1);
    setField(p2);
    setChild(p3, 2);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:29
   */
  protected int numChildren() {
    return 3;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:35
   */
  public boolean mayHaveRewrite() {
    return true;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:41
   */
  public void flushCache() {
    super.flushCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:47
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:53
   */
  public RebindStmt clone() throws CloneNotSupportedException {
    RebindStmt node = (RebindStmt) super.clone();
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:62
   */
  public RebindStmt copy() {
    try {
      RebindStmt node = (RebindStmt) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:80
   */
  public RebindStmt fullCopy() {
    RebindStmt tree = (RebindStmt) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the Annotation list.
   * @param list The new list node to be used as the Annotation list.
   * @apilevel high-level
   */
  public void setAnnotationList(List<Annotation> list) {
    setChild(list, 0);
  }
  /**
   * Retrieves the number of children in the Annotation list.
   * @return Number of children in the Annotation list.
   * @apilevel high-level
   */
  public int getNumAnnotation() {
    return getAnnotationList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Annotation list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Annotation list.
   * @apilevel low-level
   */
  public int getNumAnnotationNoTransform() {
    return getAnnotationListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Annotation list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Annotation list.
   * @apilevel high-level
   */
  public Annotation getAnnotation(int i) {
    return (Annotation) getAnnotationList().getChild(i);
  }
  /**
   * Check whether the Annotation list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasAnnotation() {
    return getAnnotationList().getNumChild() != 0;
  }
  /**
   * Append an element to the Annotation list.
   * @param node The element to append to the Annotation list.
   * @apilevel high-level
   */
  public void addAnnotation(Annotation node) {
    List<Annotation> list = (parent == null || state == null) ? getAnnotationListNoTransform() : getAnnotationList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addAnnotationNoTransform(Annotation node) {
    List<Annotation> list = getAnnotationListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Annotation list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setAnnotation(Annotation node, int i) {
    List<Annotation> list = getAnnotationList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Annotation list.
   * @return The node representing the Annotation list.
   * @apilevel high-level
   */
  public List<Annotation> getAnnotationList() {
    List<Annotation> list = (List<Annotation>) getChild(0);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Annotation list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Annotation list.
   * @apilevel low-level
   */
  public List<Annotation> getAnnotationListNoTransform() {
    return (List<Annotation>) getChildNoTransform(0);
  }
  /**
   * Retrieves the Annotation list.
   * @return The node representing the Annotation list.
   * @apilevel high-level
   */
  public List<Annotation> getAnnotations() {
    return getAnnotationList();
  }
  /**
   * Retrieves the Annotation list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Annotation list.
   * @apilevel low-level
   */
  public List<Annotation> getAnnotationsNoTransform() {
    return getAnnotationListNoTransform();
  }
  /**
   * Replaces the Obj child.
   * @param node The new node to replace the Obj child.
   * @apilevel high-level
   */
  public void setObj(Exp node) {
    setChild(node, 1);
  }
  /**
   * Retrieves the Obj child.
   * @return The current node used as the Obj child.
   * @apilevel high-level
   */
  public Exp getObj() {
    return (Exp) getChild(1);
  }
  /**
   * Retrieves the Obj child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the Obj child.
   * @apilevel low-level
   */
  public Exp getObjNoTransform() {
    return (Exp) getChildNoTransform(1);
  }
  /**
   * Replaces the lexeme Field.
   * @param value The new value for the lexeme Field.
   * @apilevel high-level
   */
  public void setField(String value) {
    tokenString_Field = value;
  }
  /**
   * @apilevel internal
   */
  protected String tokenString_Field;
  /**
   */
  public int Fieldstart;
  /**
   */
  public int Fieldend;
  /**
   * JastAdd-internal setter for lexeme Field using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme Field
   * @apilevel internal
   */
  public void setField(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setField is only valid for String lexemes");
    tokenString_Field = (String)symbol.value;
    Fieldstart = symbol.getStart();
    Fieldend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme Field.
   * @return The value for the lexeme Field.
   * @apilevel high-level
   */
  public String getField() {
    return tokenString_Field != null ? tokenString_Field : "";
  }
  /**
   * Replaces the Val child.
   * @param node The new node to replace the Val child.
   * @apilevel high-level
   */
  public void setVal(Exp node) {
    setChild(node, 2);
  }
  /**
   * Retrieves the Val child.
   * @return The current node used as the Val child.
   * @apilevel high-level
   */
  public Exp getVal() {
    return (Exp) getChild(2);
  }
  /**
   * Retrieves the Val child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the Val child.
   * @apilevel low-level
   */
  public Exp getValNoTransform() {
    return (Exp) getChildNoTransform(2);
  }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/FnAppContext.jrag:34
   * @apilevel internal
   */
  public boolean Define_boolean_isContextImperative(ASTNode caller, ASTNode child) {
    if (caller == getValNoTransform()) {
      return true;
    }
    else if (caller == getObjNoTransform()) {
      return true;
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_boolean_isContextImperative(this, caller);
    }
  }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeReferences.jrag:74
   * @apilevel internal
   */
  public List<Annotation> Define_List_Annotation__getAnnotations(ASTNode caller, ASTNode child) {
    if (caller == getObjNoTransform()) {
      return getAnnotations();
    }
    else if (caller == getValNoTransform()) {
      return getAnnotations();
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_List_Annotation__getAnnotations(this, caller);
    }
  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
