/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:223
 * @production PatternVarUse : {@link Pattern} ::= <span class="component">&lt;Name:String&gt;</span>;

 */
public class PatternVarUse extends Pattern implements Cloneable {
  /**
   * @aspect GenerateErlang
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/erlang/GenerateErlang.jadd:746
   */
  @Override
  public void generateErlangCode(ErlangCodeStream prePattern,ErlangCodeStream ecs,Vars vars){
     if(vars.containsKey(getName()))
       ecs.print(vars.get(getName()));
     else{
       String tmp=vars.getTemp();
       prePattern.pf("%s=get(O,%s),",tmp,getName());
       ecs.print(tmp);
     }
  }
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:729
   */
  public void generateJava(PrintStream stream) {
        stream.print("new " + PatternValue.class.getName() + "(" + JavaBackend.getVariableName(getName()) + ")");
    }
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:757
   */
  public void generateJavaDynamic(PrintStream stream) {
        stream.print("new " + PatternValue.class.getName() + "(" + JavaBackend.getVariableName(getName()) + ")");
    }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:517
   */
  public void generateMaude(PrintStream stream) {
        stream.print("'" + getName() + " ");
    }
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:1018
   */
  public void doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print(getName());
    }
  /**
   * @aspect GenerateProlog
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prolog/GenerateProlog.jadd:409
   */
  public void generateProlog(PrintStream s,ReachabilityInformation reachInfo){
        s.print(varTransform(getName()));
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:198
   */
  public PatternVarUse parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:885
   */
  public void typeCheck(SemanticErrorList e, Type t) {
        if (!getType().equals(t)) {
            e.add(new TypeError(this,ErrorMessage.TYPE_MISMATCH,getType(),t));
        }
    }
  /**
   * @declaredat ASTNode:1
   */
  public PatternVarUse() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
  }
  /**
   * @declaredat ASTNode:12
   */
  public PatternVarUse(String p0) {
    setName(p0);
  }
  /**
   * @declaredat ASTNode:15
   */
  public PatternVarUse(beaver.Symbol p0) {
    setName(p0);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:21
   */
  protected int numChildren() {
    return 0;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:27
   */
  public boolean mayHaveRewrite() {
    return true;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:33
   */
  public void flushCache() {
    super.flushCache();
    getFreePatternVars_visited = -1;
    getFreePatternVars_computed = false;
    getFreePatternVars_value = null;
    getFreeVars_visited = -1;
    getFreeVars_computed = false;
    getFreeVars_value = null;
    locallookupVarOrFieldName_String_boolean_visited = null;
    locallookupVarOrFieldName_String_boolean_values = null;
    getFields_FieldUseInfo_visited = null;
    getFields_FieldUseInfo_values = null;
    getType_visited = -1;
    getType_computed = false;
    getType_value = null;
    lookupVarOrFieldName_String_boolean_visited = null;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:53
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:59
   */
  public PatternVarUse clone() throws CloneNotSupportedException {
    PatternVarUse node = (PatternVarUse) super.clone();
    node.getFreePatternVars_visited = -1;
    node.getFreePatternVars_computed = false;
    node.getFreePatternVars_value = null;
    node.getFreeVars_visited = -1;
    node.getFreeVars_computed = false;
    node.getFreeVars_value = null;
    node.locallookupVarOrFieldName_String_boolean_visited = null;
    node.locallookupVarOrFieldName_String_boolean_values = null;
    node.getFields_FieldUseInfo_visited = null;
    node.getFields_FieldUseInfo_values = null;
    node.getType_visited = -1;
    node.getType_computed = false;
    node.getType_value = null;
    node.lookupVarOrFieldName_String_boolean_visited = null;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:82
   */
  public PatternVarUse copy() {
    try {
      PatternVarUse node = (PatternVarUse) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:100
   */
  public PatternVarUse fullCopy() {
    PatternVarUse tree = (PatternVarUse) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the lexeme Name.
   * @param value The new value for the lexeme Name.
   * @apilevel high-level
   */
  public void setName(String value) {
    tokenString_Name = value;
  }
  /**
   * @apilevel internal
   */
  protected String tokenString_Name;
  /**
   */
  public int Namestart;
  /**
   */
  public int Nameend;
  /**
   * JastAdd-internal setter for lexeme Name using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme Name
   * @apilevel internal
   */
  public void setName(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setName is only valid for String lexemes");
    tokenString_Name = (String)symbol.value;
    Namestart = symbol.getStart();
    Nameend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme Name.
   * @return The value for the lexeme Name.
   * @apilevel high-level
   */
  public String getName() {
    return tokenString_Name != null ? tokenString_Name : "";
  }
  /**
   * @apilevel internal
   */
  protected int getFreePatternVars_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getFreePatternVars_computed = false;
  /**
   * @apilevel internal
   */
  protected java.util.List<PatternVar> getFreePatternVars_value;
  /**
   * @attribute syn
   * @aspect FreePatternVars
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/FreePatternVars.jrag:12
   */
  public java.util.List<PatternVar> getFreePatternVars() {
    if(getFreePatternVars_computed) {
      return getFreePatternVars_value;
    }
    ASTNode$State state = state();
    if (getFreePatternVars_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getFreePatternVars in class: org.jastadd.ast.AST.SynDecl");
    }
    getFreePatternVars_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getFreePatternVars_value = getFreePatternVars_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getFreePatternVars_computed = true;
    } else {
    }

    getFreePatternVars_visited = -1;
    return getFreePatternVars_value;
  }
  /**
   * @apilevel internal
   */
  private java.util.List<PatternVar> getFreePatternVars_compute() {  return Collections.emptyList();  }
  /**
   * @apilevel internal
   */
  protected int getFreeVars_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getFreeVars_computed = false;
  /**
   * @apilevel internal
   */
  protected Collection<String> getFreeVars_value;
  /**
   * @attribute syn
   * @aspect VarUsage
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/FreeVars.jrag:104
   */
  public Collection<String> getFreeVars() {
    if(getFreeVars_computed) {
      return getFreeVars_value;
    }
    ASTNode$State state = state();
    if (getFreeVars_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getFreeVars in class: org.jastadd.ast.AST.SynDecl");
    }
    getFreeVars_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getFreeVars_value = getFreeVars_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getFreeVars_computed = true;
    } else {
    }

    getFreeVars_visited = -1;
    return getFreeVars_value;
  }
  /**
   * @apilevel internal
   */
  private Collection<String> getFreeVars_compute() {  return Collections.singleton(getName());  }
  /**
   * @apilevel internal
   */
  protected java.util.Map locallookupVarOrFieldName_String_boolean_visited;
  protected java.util.Map locallookupVarOrFieldName_String_boolean_values;
  /**
   * @attribute syn
   * @aspect VarResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/VarResolution.jrag:48
   */
  public PatternVarDecl locallookupVarOrFieldName(String name, boolean fieldOnly) {
    java.util.List _parameters = new java.util.ArrayList(2);
    _parameters.add(name);
    _parameters.add(Boolean.valueOf(fieldOnly));
    if(locallookupVarOrFieldName_String_boolean_visited == null) locallookupVarOrFieldName_String_boolean_visited = new java.util.HashMap(4);
    if(locallookupVarOrFieldName_String_boolean_values == null) locallookupVarOrFieldName_String_boolean_values = new java.util.HashMap(4);
    if(locallookupVarOrFieldName_String_boolean_values.containsKey(_parameters)) {
      return (PatternVarDecl)locallookupVarOrFieldName_String_boolean_values.get(_parameters);
    }
    ASTNode$State state = state();
    if (Integer.valueOf(state().boundariesCrossed).equals(locallookupVarOrFieldName_String_boolean_visited.get(_parameters))) {
      throw new RuntimeException("Circular definition of attr: locallookupVarOrFieldName in class: org.jastadd.ast.AST.SynDecl");
    }
    locallookupVarOrFieldName_String_boolean_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    PatternVarDecl locallookupVarOrFieldName_String_boolean_value = locallookupVarOrFieldName_compute(name, fieldOnly);
    if(isFinal && num == state().boundariesCrossed) {
      locallookupVarOrFieldName_String_boolean_values.put(_parameters, locallookupVarOrFieldName_String_boolean_value);
    } else {
    }

    locallookupVarOrFieldName_String_boolean_visited.remove(_parameters);
    return locallookupVarOrFieldName_String_boolean_value;
  }
  /**
   * @apilevel internal
   */
  private PatternVarDecl locallookupVarOrFieldName_compute(String name, boolean fieldOnly) {  return null;  }
  /**
   * @apilevel internal
   */
  protected java.util.Map getFields_FieldUseInfo_visited;
  protected java.util.Map getFields_FieldUseInfo_values;
  /**
   * @attribute syn
   * @aspect FieldUsage
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/FieldAccesses.jrag:153
   */
  public FieldUseInfo getFields(FieldUseInfo fui) {
    Object _parameters = fui;
    if(getFields_FieldUseInfo_visited == null) getFields_FieldUseInfo_visited = new java.util.HashMap(4);
    if(getFields_FieldUseInfo_values == null) getFields_FieldUseInfo_values = new java.util.HashMap(4);
    if(getFields_FieldUseInfo_values.containsKey(_parameters)) {
      return (FieldUseInfo)getFields_FieldUseInfo_values.get(_parameters);
    }
    ASTNode$State state = state();
    if (Integer.valueOf(state().boundariesCrossed).equals(getFields_FieldUseInfo_visited.get(_parameters))) {
      throw new RuntimeException("Circular definition of attr: getFields in class: org.jastadd.ast.AST.SynDecl");
    }
    getFields_FieldUseInfo_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    FieldUseInfo getFields_FieldUseInfo_value = getFields_compute(fui);
    if(isFinal && num == state().boundariesCrossed) {
      getFields_FieldUseInfo_values.put(_parameters, getFields_FieldUseInfo_value);
    } else {
    }

    getFields_FieldUseInfo_visited.remove(_parameters);
    return getFields_FieldUseInfo_value;
  }
  /**
   * @apilevel internal
   */
  private FieldUseInfo getFields_compute(FieldUseInfo fui) {  return fui;  }
  /**
   * @apilevel internal
   */
  protected int getType_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getType_computed = false;
  /**
   * @apilevel internal
   */
  protected Type getType_value;
  /**
   * @attribute syn
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:299
   */
  public Type getType() {
    if(getType_computed) {
      return getType_value;
    }
    ASTNode$State state = state();
    if (getType_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getType in class: org.jastadd.ast.AST.SynDecl");
    }
    getType_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getType_value = getType_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getType_computed = true;
    } else {
    }

    getType_visited = -1;
    return getType_value;
  }
  /**
   * @apilevel internal
   */
  private Type getType_compute() {
          VarOrFieldDecl d = lookupVarOrFieldName(getName(),false);
          if (d == null) return UnknownType.INSTANCE;
          return d.getType();
      	
      }
  /**
   * @attribute inh
   * @aspect VarResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/VarResolution.jrag:273
   */
  public VarOrFieldDecl lookupVarOrFieldName(String name, boolean fieldOnly) {
    java.util.List _parameters = new java.util.ArrayList(2);
    _parameters.add(name);
    _parameters.add(Boolean.valueOf(fieldOnly));
    if(lookupVarOrFieldName_String_boolean_visited == null) lookupVarOrFieldName_String_boolean_visited = new java.util.HashMap(4);
    ASTNode$State state = state();
    if (Integer.valueOf(state().boundariesCrossed).equals(lookupVarOrFieldName_String_boolean_visited.get(_parameters))) {
      throw new RuntimeException("Circular definition of attr: lookupVarOrFieldName in class: org.jastadd.ast.AST.InhDecl");
    }
    lookupVarOrFieldName_String_boolean_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    VarOrFieldDecl lookupVarOrFieldName_String_boolean_value = getParent().Define_VarOrFieldDecl_lookupVarOrFieldName(this, null, name, fieldOnly);

    lookupVarOrFieldName_String_boolean_visited.remove(_parameters);
    return lookupVarOrFieldName_String_boolean_value;
  }
  /**
   * @apilevel internal
   */
  protected java.util.Map lookupVarOrFieldName_String_boolean_visited;
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    // Declared at @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/VarResolution.jrag:287
    if (lookupVarOrFieldName(getName(),false) == null) {
      state().duringVarResolution++;
      ASTNode result = rewriteRule0();
      state().duringVarResolution--;
      return result;
    }    return super.rewriteTo();
  }  /**
   * @declaredat @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/VarResolution.jrag:287
   * @apilevel internal
   */  private PatternVar rewriteRule0() {
    debugRewrite("Rewriting " + getClass().getName() + " using rule in /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/VarResolution.jrag at line 287");
{
            PatternVarDecl decl = new PatternVarDecl(getName());
            decl.setPosition(getStartPos(), getEndPos());
            PatternVar v = new PatternVar(decl);
            v.setPosition(getStartPos(), getEndPos());
            return v;
        }  }
}
