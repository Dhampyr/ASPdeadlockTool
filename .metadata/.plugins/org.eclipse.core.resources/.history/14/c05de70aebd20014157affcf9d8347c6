/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:225
 * @production ConstructorPattern : {@link Pattern} ::= <span class="component">&lt;Constructor:String&gt;</span> <span class="component">Param:{@link Pattern}*</span>;

 */
public class ConstructorPattern extends Pattern implements Cloneable, HasTypes {
  /**
   * @aspect GenerateErlang
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/erlang/GenerateErlang.jadd:762
   */
  @Override
  public void generateErlangCode(ErlangCodeStream prePattern,ErlangCodeStream ecs,Vars vars){
    //Handling for bool
    final String c = getDataConstructor().getName();
    if("True".equals(c) || "False".equals(c))
      ecs.print(c.toLowerCase());
    else{
      if(getParams().getNumChild() > 0)
        ecs.print("{");
      ecs.print("data");
      ecs.print(c);
      for (Pattern p : getParams()) {
        ecs.print(",");
        p.generateErlangCode(prePattern,ecs,vars);
      }
      if(getParams().getNumChild() > 0)
        ecs.print("}");
    }
  }
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:710
   */
  public void generateJava(PrintStream stream) {
        DataConstructor decl = getDataConstructor();
        assert decl != null : "We typechecked it!";
        stream.print("new " + PatternConstructor.class.getName() + "(" + JavaBackend.getQualifiedString(decl) + ".class");
        for (Pattern p : getParams()) {
            stream.print(",");
            p.generateJava(stream);
        }
        stream.print(")");
    }
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:734
   */
  public void generateJavaDynamic(PrintStream stream) {
        DataConstructor decl = getDataConstructor();
        assert decl != null : "We typechecked it!";
        stream.println("new " + PatternConstructor.class.getName() + "(");
        stream.print(JavaBackend.getQualifiedString(decl) + ".class");
        for (Pattern p : getParams()) {
            stream.println(", ");
            p.generateJavaDynamic(stream);
        }
        stream.println();
        stream.print(")");
    }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:529
   */
  public void generateMaude(PrintStream stream) {
        boolean inlist = false;
        final DataConstructor c = getDataConstructor();
        assert c != null : "We typechecked it!";
        stream.print("\"" + c.getModuleDecl().getName() + "." + getConstructor() + "\"[");
        if (getNumParam() == 0) {
            stream.print("emp ");
        } else {
            for (Pattern pattern : getParamList()) {
                if (inlist) stream.print(":: "); else inlist = true;
                pattern.generateMaude(stream);
            }
        }
        stream.print("] ");
    }
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:997
   */
  public void doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print(getConstructor());
        if (getNumParam() > 0) {
            stream.print("( ");
            getParamList().doPrettyPrint(stream, formatter, ",");
            stream.print(" )");
        }
    }
  /**
   * @aspect GenerateProlog
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prolog/GenerateProlog.jadd:413
   */
  public void generateProlog(PrintStream s,ReachabilityInformation reachInfo){
        s.print(quote(getConstructor()));
        List<?> subterms = (List<?>) getChild(0); // ? = Pattern
        int n = subterms.getNumChild();
        if (n == 0) return;
        else {
            s.print("(");
            for (int i = 0; i < n; i++){
                subterms.getChild(i).generateProlog(s,reachInfo);
                if (i != n-1) s.print(",");
            }
            s.print(")");
        }
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:56
   */
  public ConstructorPattern parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:897
   */
  public void typeCheck(SemanticErrorList e, Type t) {
        TypeCheckerHelper.typeCheck(this,e,t);
    }
  /**
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:404
   */
  @CheckForNull
    public DataConstructor getDataConstructor() {
        Decl decl = lookup(new KindedName(Kind.DATA_CONSTRUCTOR,getConstructor()));
        if (decl instanceof DataConstructor)
          return (DataConstructor) decl;
        else
          return null;    
    }
  /**
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:369
   */
  public java.util.List<Type> getTypes() {
        return TypeCheckerHelper.getTypes(getParams());
    }
  /**
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:381
   */
  public java.util.List<Type> applyBindings(Map<TypeParameter, Type> binding) {
		return TypeCheckerHelper.applyBindings(binding, getTypes());
    }
  /**
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:416
   */
  public Map<TypeParameter, Type> getTypeParamBinding(ASTNode<?> node, java.util.List<Type> args) {
        Map<TypeParameter, Type> binding = new HashMap<TypeParameter, Type>();
        TypeCheckerHelper.addTypeParamBinding(node, binding, getTypes(), args);
        return binding;
    }
  /**
   * @declaredat ASTNode:1
   */
  public ConstructorPattern() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[1];
    setChild(new List(), 0);
  }
  /**
   * @declaredat ASTNode:14
   */
  public ConstructorPattern(String p0, List<Pattern> p1) {
    setConstructor(p0);
    setChild(p1, 0);
  }
  /**
   * @declaredat ASTNode:18
   */
  public ConstructorPattern(beaver.Symbol p0, List<Pattern> p1) {
    setConstructor(p0);
    setChild(p1, 0);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:25
   */
  protected int numChildren() {
    return 1;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:31
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:37
   */
  public void flushCache() {
    super.flushCache();
    getFreePatternVars_visited = -1;
    getFreePatternVars_computed = false;
    getFreePatternVars_value = null;
    getFreeVars_visited = -1;
    getFreeVars_computed = false;
    getFreeVars_value = null;
    locallookupVarOrFieldName_String_boolean_visited = null;
    locallookupVarOrFieldName_String_boolean_values = null;
    getFields_FieldUseInfo_visited = null;
    getFields_FieldUseInfo_values = null;
    getType_visited = -1;
    getType_computed = false;
    getType_value = null;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:56
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:62
   */
  public ConstructorPattern clone() throws CloneNotSupportedException {
    ConstructorPattern node = (ConstructorPattern) super.clone();
    node.getFreePatternVars_visited = -1;
    node.getFreePatternVars_computed = false;
    node.getFreePatternVars_value = null;
    node.getFreeVars_visited = -1;
    node.getFreeVars_computed = false;
    node.getFreeVars_value = null;
    node.locallookupVarOrFieldName_String_boolean_visited = null;
    node.locallookupVarOrFieldName_String_boolean_values = null;
    node.getFields_FieldUseInfo_visited = null;
    node.getFields_FieldUseInfo_values = null;
    node.getType_visited = -1;
    node.getType_computed = false;
    node.getType_value = null;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:84
   */
  public ConstructorPattern copy() {
    try {
      ConstructorPattern node = (ConstructorPattern) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:102
   */
  public ConstructorPattern fullCopy() {
    ConstructorPattern tree = (ConstructorPattern) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the lexeme Constructor.
   * @param value The new value for the lexeme Constructor.
   * @apilevel high-level
   */
  public void setConstructor(String value) {
    tokenString_Constructor = value;
  }
  /**
   * @apilevel internal
   */
  protected String tokenString_Constructor;
  /**
   */
  public int Constructorstart;
  /**
   */
  public int Constructorend;
  /**
   * JastAdd-internal setter for lexeme Constructor using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme Constructor
   * @apilevel internal
   */
  public void setConstructor(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setConstructor is only valid for String lexemes");
    tokenString_Constructor = (String)symbol.value;
    Constructorstart = symbol.getStart();
    Constructorend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme Constructor.
   * @return The value for the lexeme Constructor.
   * @apilevel high-level
   */
  public String getConstructor() {
    return tokenString_Constructor != null ? tokenString_Constructor : "";
  }
  /**
   * Replaces the Param list.
   * @param list The new list node to be used as the Param list.
   * @apilevel high-level
   */
  public void setParamList(List<Pattern> list) {
    setChild(list, 0);
  }
  /**
   * Retrieves the number of children in the Param list.
   * @return Number of children in the Param list.
   * @apilevel high-level
   */
  public int getNumParam() {
    return getParamList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Param list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Param list.
   * @apilevel low-level
   */
  public int getNumParamNoTransform() {
    return getParamListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Param list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Param list.
   * @apilevel high-level
   */
  public Pattern getParam(int i) {
    return (Pattern) getParamList().getChild(i);
  }
  /**
   * Check whether the Param list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasParam() {
    return getParamList().getNumChild() != 0;
  }
  /**
   * Append an element to the Param list.
   * @param node The element to append to the Param list.
   * @apilevel high-level
   */
  public void addParam(Pattern node) {
    List<Pattern> list = (parent == null || state == null) ? getParamListNoTransform() : getParamList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addParamNoTransform(Pattern node) {
    List<Pattern> list = getParamListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Param list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setParam(Pattern node, int i) {
    List<Pattern> list = getParamList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Param list.
   * @return The node representing the Param list.
   * @apilevel high-level
   */
  public List<Pattern> getParamList() {
    List<Pattern> list = (List<Pattern>) getChild(0);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Param list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Param list.
   * @apilevel low-level
   */
  public List<Pattern> getParamListNoTransform() {
    return (List<Pattern>) getChildNoTransform(0);
  }
  /**
   * Retrieves the Param list.
   * @return The node representing the Param list.
   * @apilevel high-level
   */
  public List<Pattern> getParams() {
    return getParamList();
  }
  /**
   * Retrieves the Param list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Param list.
   * @apilevel low-level
   */
  public List<Pattern> getParamsNoTransform() {
    return getParamListNoTransform();
  }
  /**
   * @apilevel internal
   */
  protected int getFreePatternVars_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getFreePatternVars_computed = false;
  /**
   * @apilevel internal
   */
  protected java.util.List<PatternVar> getFreePatternVars_value;
  /**
   * @attribute syn
   * @aspect FreePatternVars
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/FreePatternVars.jrag:15
   */
  public java.util.List<PatternVar> getFreePatternVars() {
    if(getFreePatternVars_computed) {
      return getFreePatternVars_value;
    }
    ASTNode$State state = state();
    if (getFreePatternVars_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getFreePatternVars in class: org.jastadd.ast.AST.SynDecl");
    }
    getFreePatternVars_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getFreePatternVars_value = getFreePatternVars_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getFreePatternVars_computed = true;
    } else {
    }

    getFreePatternVars_visited = -1;
    return getFreePatternVars_value;
  }
  /**
   * @apilevel internal
   */
  private java.util.List<PatternVar> getFreePatternVars_compute() {
          ArrayList<PatternVar> res = new ArrayList<PatternVar>();
          for (Pattern p : getParams()) {
              res.addAll(p.getFreePatternVars());
          }
          return res;
      }
  /**
   * @apilevel internal
   */
  protected int getFreeVars_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getFreeVars_computed = false;
  /**
   * @apilevel internal
   */
  protected Collection<String> getFreeVars_value;
  /**
   * @attribute syn
   * @aspect VarUsage
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/FreeVars.jrag:106
   */
  public Collection<String> getFreeVars() {
    if(getFreeVars_computed) {
      return getFreeVars_value;
    }
    ASTNode$State state = state();
    if (getFreeVars_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getFreeVars in class: org.jastadd.ast.AST.SynDecl");
    }
    getFreeVars_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getFreeVars_value = getFreeVars_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getFreeVars_computed = true;
    } else {
    }

    getFreeVars_visited = -1;
    return getFreeVars_value;
  }
  /**
   * @apilevel internal
   */
  private Collection<String> getFreeVars_compute() {
  		HashSet<String> res = new HashSet<String>(1);
  		for (Pattern p : getParams()) {
  			res.addAll(p.getFreeVars());
  		}
  		return res;		
  	}
  /**
   * @apilevel internal
   */
  protected java.util.Map locallookupVarOrFieldName_String_boolean_visited;
  protected java.util.Map locallookupVarOrFieldName_String_boolean_values;
  /**
   * @attribute syn
   * @aspect VarResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/VarResolution.jrag:54
   */
  public PatternVarDecl locallookupVarOrFieldName(String name, boolean fieldOnly) {
    java.util.List _parameters = new java.util.ArrayList(2);
    _parameters.add(name);
    _parameters.add(Boolean.valueOf(fieldOnly));
    if(locallookupVarOrFieldName_String_boolean_visited == null) locallookupVarOrFieldName_String_boolean_visited = new java.util.HashMap(4);
    if(locallookupVarOrFieldName_String_boolean_values == null) locallookupVarOrFieldName_String_boolean_values = new java.util.HashMap(4);
    if(locallookupVarOrFieldName_String_boolean_values.containsKey(_parameters)) {
      return (PatternVarDecl)locallookupVarOrFieldName_String_boolean_values.get(_parameters);
    }
    ASTNode$State state = state();
    if (Integer.valueOf(state().boundariesCrossed).equals(locallookupVarOrFieldName_String_boolean_visited.get(_parameters))) {
      throw new RuntimeException("Circular definition of attr: locallookupVarOrFieldName in class: org.jastadd.ast.AST.SynDecl");
    }
    locallookupVarOrFieldName_String_boolean_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    PatternVarDecl locallookupVarOrFieldName_String_boolean_value = locallookupVarOrFieldName_compute(name, fieldOnly);
    if(isFinal && num == state().boundariesCrossed) {
      locallookupVarOrFieldName_String_boolean_values.put(_parameters, locallookupVarOrFieldName_String_boolean_value);
    } else {
    }

    locallookupVarOrFieldName_String_boolean_visited.remove(_parameters);
    return locallookupVarOrFieldName_String_boolean_value;
  }
  /**
   * @apilevel internal
   */
  private PatternVarDecl locallookupVarOrFieldName_compute(String name, boolean fieldOnly) {
          if (!fieldOnly) {
              for (Pattern p : getParams()) {
                  PatternVarDecl d = p.locallookupVarOrFieldName(name,fieldOnly);
                  if (d != null)
                      return d;
              }
          }
          return null;
      }
  /**
   * @apilevel internal
   */
  protected java.util.Map getFields_FieldUseInfo_visited;
  protected java.util.Map getFields_FieldUseInfo_values;
  /**
   * @attribute syn
   * @aspect FieldUsage
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/FieldAccesses.jrag:155
   */
  public FieldUseInfo getFields(FieldUseInfo fui) {
    Object _parameters = fui;
    if(getFields_FieldUseInfo_visited == null) getFields_FieldUseInfo_visited = new java.util.HashMap(4);
    if(getFields_FieldUseInfo_values == null) getFields_FieldUseInfo_values = new java.util.HashMap(4);
    if(getFields_FieldUseInfo_values.containsKey(_parameters)) {
      return (FieldUseInfo)getFields_FieldUseInfo_values.get(_parameters);
    }
    ASTNode$State state = state();
    if (Integer.valueOf(state().boundariesCrossed).equals(getFields_FieldUseInfo_visited.get(_parameters))) {
      throw new RuntimeException("Circular definition of attr: getFields in class: org.jastadd.ast.AST.SynDecl");
    }
    getFields_FieldUseInfo_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    FieldUseInfo getFields_FieldUseInfo_value = getFields_compute(fui);
    if(isFinal && num == state().boundariesCrossed) {
      getFields_FieldUseInfo_values.put(_parameters, getFields_FieldUseInfo_value);
    } else {
    }

    getFields_FieldUseInfo_visited.remove(_parameters);
    return getFields_FieldUseInfo_value;
  }
  /**
   * @apilevel internal
   */
  private FieldUseInfo getFields_compute(FieldUseInfo fui) {
  	    for (Pattern p : getParams())
  	      fui.merge(p.getFields(fui));
  	    return new FieldUseInfo(fui);
  	}
  /**
   * @apilevel internal
   */
  protected int getType_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getType_computed = false;
  /**
   * @apilevel internal
   */
  protected Type getType_value;
  /**
   * @attribute syn
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:298
   */
  public Type getType() {
    if(getType_computed) {
      return getType_value;
    }
    ASTNode$State state = state();
    if (getType_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getType in class: org.jastadd.ast.AST.SynDecl");
    }
    getType_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getType_value = getType_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getType_computed = true;
    } else {
    }

    getType_visited = -1;
    return getType_value;
  }
  /**
   * @apilevel internal
   */
  private Type getType_compute() {  return getInhType();  }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:316
   * @apilevel internal
   */
  public Type Define_Type_getInhType(ASTNode caller, ASTNode child) {
    if (caller == getParamListNoTransform()) {
      int i = caller.getIndexOfChild(child);
      {
        Decl decl = lookup(new KindedName(Kind.DATA_CONSTRUCTOR,this.getConstructor()));
        if (decl == null || !(decl instanceof DataConstructor)) return UnknownType.INSTANCE;
        DataConstructor d = (DataConstructor) decl;
        if (i >= d.getNumConstructorArg()) 
            return UnknownType.INSTANCE;

        Type declaredType = d.getConstructorArg(i).getType(); 
        
        Type dataType = getType();
        if (dataType == null || !dataType.isDataType())
            return UnknownType.INSTANCE;

        DataTypeType dt = (DataTypeType) dataType;
        Type res = dt.substituteTypeParams(declaredType);
        if (res == null)
            return UnknownType.INSTANCE;
        return res;
    }
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_Type_getInhType(this, caller);
    }
  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
