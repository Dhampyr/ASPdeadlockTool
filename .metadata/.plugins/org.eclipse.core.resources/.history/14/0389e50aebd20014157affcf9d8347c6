/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/mTVL.ast:28
 * @production Attribute : {@link ASTNode} ::= <span class="component">&lt;Name:String&gt;</span> <span class="component">AType:{@link MType}</span>;

 */
public class Attribute extends ASTNode<ASTNode> implements Cloneable {
  /**
   * @aspect ErrorCheck
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/mtvl/ErrorCheck.jadd:54
   */
  public void collectErrors(SemanticErrorList c) {
    super.collectErrors(c);
    if (isRepeated) {
        c.add(new SemanticError(this, ErrorMessage.DUPLICATE_VARIABLE, pname()+"."+getName()));
    }
    this.getAType().collectErrors(c);
  }
  /**
   * @aspect Variables
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/mtvl/Variables.jrag:56
   */
  public boolean isRepeated = false;
  /**
   * @aspect Variables
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/mtvl/Variables.jrag:59
   */
  Entry<String,BoundaryInt[]> getIntFVarsHelp() {
    if (getAType() instanceof IntMType) {
//       System.out.println("searching for att "+pname()+"."+getName()+" in "+ivars);
      // check also for bools, but not check in bool for ints!
      if (((Model)calcContextNode(Model.class)).bools().contains(pname()+"."+getName()))
        isRepeated = true;
      IntMType type = (IntMType) getAType();
      final BoundaryInt[] boundaries = {type.getMin(),type.getMax()};
      return new Entry<String,BoundaryInt[]>(){ public String getKey(){return pname()+"."+getName();}
                          public BoundaryInt[] getValue(){return boundaries;}
                          public Attribute getAttribute(){return Attribute.this;}};
    } else
    if (getAType() instanceof IntListMType) {
//      System.out.println("searching for att "+pname()+"."+getName()+" in "+ivars);
     // check also for bools, but not check in bool for ints!
     if (((Model)calcContextNode(Model.class)).bools().contains(pname()+"."+getName()))
       isRepeated = true;
     IntListMType type = (IntListMType) getAType();
     // note that "type" is a list with at least a value, because of the parser
     int bsize = type.getBoundaryVals().getNumChild()+1;
     final BoundaryInt[] values = new BoundaryInt[bsize];
     values[0] = type.getBoundaryVal(0); // duplicate first value;
     for (int i=1; i<bsize; i++) {
    	 values[i] = type.getBoundaryVal(i-1);
     }
     return new Entry<String,BoundaryInt[]>(){ public String getKey(){return pname()+"."+getName();}
                         public BoundaryInt[] getValue(){return values;}
                         public Attribute getAttribute(){return Attribute.this;}};
    } else return null;
  }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:31
   */
  public Attribute parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @declaredat ASTNode:1
   */
  public Attribute() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[1];
  }
  /**
   * @declaredat ASTNode:13
   */
  public Attribute(String p0, MType p1) {
    setName(p0);
    setChild(p1, 0);
  }
  /**
   * @declaredat ASTNode:17
   */
  public Attribute(beaver.Symbol p0, MType p1) {
    setName(p0);
    setChild(p1, 0);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:24
   */
  protected int numChildren() {
    return 1;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:30
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:36
   */
  public void flushCache() {
    super.flushCache();
    pname_visited = -1;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:43
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:49
   */
  public Attribute clone() throws CloneNotSupportedException {
    Attribute node = (Attribute) super.clone();
    node.pname_visited = -1;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:59
   */
  public Attribute copy() {
    try {
      Attribute node = (Attribute) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:77
   */
  public Attribute fullCopy() {
    Attribute tree = (Attribute) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the lexeme Name.
   * @param value The new value for the lexeme Name.
   * @apilevel high-level
   */
  public void setName(String value) {
    tokenString_Name = value;
  }
  /**
   * @apilevel internal
   */
  protected String tokenString_Name;
  /**
   */
  public int Namestart;
  /**
   */
  public int Nameend;
  /**
   * JastAdd-internal setter for lexeme Name using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme Name
   * @apilevel internal
   */
  public void setName(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setName is only valid for String lexemes");
    tokenString_Name = (String)symbol.value;
    Namestart = symbol.getStart();
    Nameend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme Name.
   * @return The value for the lexeme Name.
   * @apilevel high-level
   */
  public String getName() {
    return tokenString_Name != null ? tokenString_Name : "";
  }
  /**
   * Replaces the AType child.
   * @param node The new node to replace the AType child.
   * @apilevel high-level
   */
  public void setAType(MType node) {
    setChild(node, 0);
  }
  /**
   * Retrieves the AType child.
   * @return The current node used as the AType child.
   * @apilevel high-level
   */
  public MType getAType() {
    return (MType) getChild(0);
  }
  /**
   * Retrieves the AType child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the AType child.
   * @apilevel low-level
   */
  public MType getATypeNoTransform() {
    return (MType) getChildNoTransform(0);
  }
  /**
   * @attribute inh
   * @aspect Variables
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/mtvl/Variables.jrag:28
   */
  public String pname() {
    ASTNode$State state = state();
    if (pname_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: pname in class: org.jastadd.ast.AST.InhDecl");
    }
    pname_visited = state().boundariesCrossed;
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    String pname_value = getParent().Define_String_pname(this, null);

    pname_visited = -1;
    return pname_value;
  }
  /**
   * @apilevel internal
   */
  protected int pname_visited = -1;
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }  protected void collect_contributors_Model_ints() {
  /**
   * @attribute coll
   * @aspect Variables
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/mtvl/Variables.jrag:57
   */
      {
        Model ref = (Model) (calcContextNode(Model.class));
        if (ref != null) {
          ref.Model_ints_contributors().add(this);
        }
      }
    super.collect_contributors_Model_ints();
  }
  protected void collect_contributors_Model_bools() {
  /**
   * @attribute coll
   * @aspect Variables
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/mtvl/Variables.jrag:90
   */
    if ((getAType() instanceof BoolMType)) {
      {
        Model ref = (Model) (calcContextNode(Model.class));
        if (ref != null) {
          ref.Model_bools_contributors().add(this);
        }
      }
    }
    super.collect_contributors_Model_bools();
  }
  protected void contributeTo_Model_Model_ints(RepeatMap<String,BoundaryInt[]> collection) {
    super.contributeTo_Model_Model_ints(collection);
    collection.add(getIntFVarsHelp());
  }

  protected void contributeTo_Model_Model_bools(RepeatList collection) {
    super.contributeTo_Model_Model_bools(collection);
    if((getAType() instanceof BoolMType))
      collection.addNonNull((new RLEntry(){ public String getItem(){return pname()+"."+getName();}
                                        public void setRepeated(boolean rep){isRepeated |= rep;}}));
  }

}
