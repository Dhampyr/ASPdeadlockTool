/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:110
 * @production FieldDecl : {@link TypedVarOrFieldDecl} ::= <span class="component">[InitExp:{@link PureExp}]</span> <span class="component">{@link Annotation}*</span> <span class="component">&lt;Port:boolean&gt;</span>;

 */
public class FieldDecl extends TypedVarOrFieldDecl implements Cloneable {
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:234
   */
  public void generateJava(PrintStream stream) {
        JavaGeneratorHelper.generateHelpLine(this,stream);
        stream.print("private ");
        getAccess().generateJava(stream);
        stream.print(" ");
        stream.print(JavaBackend.getVariableName(getName()));
        stream.println(";");
    }
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:273
   */
  public void generateJavaDynamic(PrintStream stream) {
        DynamicJavaGeneratorHelper.generateField(stream, this);
        
//        if (getAccess().getType().isReferenceType()) {
//            stream.print(ABSValue.class.getName());
//        } else {
//            getAccess().generateJavaDynamic(stream);
//        }
//        stream.print(" " + JavaBackend.getVariableName(getName()));
//        stream.println(";");
    }
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:762
   */
  public void doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        getAnnotationList().doPrettyPrint(stream, formatter, "");
        if (getNumAnnotation() > 0) {
            stream.println();
            formatter.afterStmt();
        }
        getAccess().doPrettyPrint(stream, formatter);
        stream.print(" ");
        stream.print(getName());
        if (hasInitExp()) {
            stream.print(" = ");
            getInitExp().doPrettyPrint(stream, formatter);
        }
        stream.print(";");
    }
  /**
   * @aspect GenerateProlog
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prolog/GenerateProlog.jadd:490
   */
  public void generateProlog(PrintStream s,ReachabilityInformation reachInfo){
        //generates field(name,type,opt(initializer)).
        s.print("field(" + quote(getName()) + ",");
        getChild(0).generateProlog(s,reachInfo);
        s.print(",");
        getChild(1).generateProlog(s,reachInfo);
        s.print(")");
    }
  /**
   * @aspect CompareNodes
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/delta/CompareNodes.jadd:32
   */
  public boolean matches(FieldDecl other) {
        if (! this.getAccess().matches(other.getAccess()))
            return false;
        if (! this.getName().equals(other.getName()))
            return false;
        
        return true;
    }
  /**
   * @aspect DeltaParameterSubstitution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/delta/DeltaParameterSubstitution.jadd:159
   */
  @Override
    protected void applySubstitution(Map<String,Value> subst) throws DeltaModellingWithNodeException {
        if (hasInitExp()) 
            getInitExp().applySubstitution(subst);
        for (Annotation a : getAnnotations()) 
            a.applySubstitution(subst);
        // Removal should not be necessary with well-typed deltas
        subst.remove(getName());
    }
  /**
   * @aspect SQL
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/sql/Sql.jadd:62
   */
  public void collectErrors(SemanticErrorList c) {
        super.collectErrors(c);
        if (CompilerUtils.hasAnnotation(getAnnotations(), "SqlProc"))
            c.add(new SemanticError(getAnnotations(), ErrorMessage.SQL_PROC_AT_INVALID_LOCATION, new String[0]));
    }
  /**
   * @aspect PrettyPrint
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/tests/PrettyPrint.jadd:69
   */
  public void prettyPrint(PrintWriter w, ABSFormatter f) {
        w.print(getAccess());
        w.print(' ');
        w.print(getName());
        if (hasInitExp()) w.print(" = "+getInitExp());
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:91
   */
  public FieldDecl parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:478
   */
  public void refined_TypeChecker_FieldDecl_typeCheck(SemanticErrorList e) {
        int nerrors = e.size();            
        getAccess().typeCheck(e);
        if (e.size() > nerrors) return;

        Type t = getAccess().getType();
        if (hasInitExp()) {
            getInitExp().typeCheck(e);
            if (e.size() > nerrors) return;
            TypeCheckerHelper.checkAssignment(e,this,t,getInitExp());
        } else {
            if (!t.isReferenceType() && !t.isFutureType()) {
                e.add(new TypeError(this, ErrorMessage.FIELD_INIT_REQUIRED, new String[0]));
            }
        }
    }
  /**
   * @aspect InitChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/ext/InitChecker.jrag:43
   */
  @Override
    void checkLegalInit(SemanticErrorList l, ErrorMessage msg) {
        if (hasInitExp()) {
            getInitExp().checkLegalInit(l, msg);
         }
    }
  /**
   * @declaredat ASTNode:1
   */
  public FieldDecl() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[3];
    setChild(new Opt(), 1);
    setChild(new List(), 2);
  }
  /**
   * @declaredat ASTNode:15
   */
  public FieldDecl(String p0, Access p1, Opt<PureExp> p2, List<Annotation> p3, boolean p4) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
    setChild(p3, 2);
    setPort(p4);
  }
  /**
   * @declaredat ASTNode:22
   */
  public FieldDecl(beaver.Symbol p0, Access p1, Opt<PureExp> p2, List<Annotation> p3, boolean p4) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
    setChild(p3, 2);
    setPort(p4);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:32
   */
  protected int numChildren() {
    return 3;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:38
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:44
   */
  public void flushCache() {
    super.flushCache();
    lookupVarOrFieldName_String_boolean_visited = null;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:51
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:57
   */
  public FieldDecl clone() throws CloneNotSupportedException {
    FieldDecl node = (FieldDecl) super.clone();
    node.lookupVarOrFieldName_String_boolean_visited = null;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:67
   */
  public FieldDecl copy() {
    try {
      FieldDecl node = (FieldDecl) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:85
   */
  public FieldDecl fullCopy() {
    FieldDecl tree = (FieldDecl) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the lexeme Name.
   * @param value The new value for the lexeme Name.
   * @apilevel high-level
   */
  public void setName(String value) {
    tokenString_Name = value;
  }
  /**
   * JastAdd-internal setter for lexeme Name using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme Name
   * @apilevel internal
   */
  public void setName(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setName is only valid for String lexemes");
    tokenString_Name = (String)symbol.value;
    Namestart = symbol.getStart();
    Nameend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme Name.
   * @return The value for the lexeme Name.
   * @apilevel high-level
   */
  public String getName() {
    return tokenString_Name != null ? tokenString_Name : "";
  }
  /**
   * Replaces the Access child.
   * @param node The new node to replace the Access child.
   * @apilevel high-level
   */
  public void setAccess(Access node) {
    setChild(node, 0);
  }
  /**
   * Retrieves the Access child.
   * @return The current node used as the Access child.
   * @apilevel high-level
   */
  public Access getAccess() {
    return (Access) getChild(0);
  }
  /**
   * Retrieves the Access child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the Access child.
   * @apilevel low-level
   */
  public Access getAccessNoTransform() {
    return (Access) getChildNoTransform(0);
  }
  /**
   * Replaces the optional node for the InitExp child. This is the <code>Opt</code>
   * node containing the child InitExp, not the actual child!
   * @param opt The new node to be used as the optional node for the InitExp child.
   * @apilevel low-level
   */
  public void setInitExpOpt(Opt<PureExp> opt) {
    setChild(opt, 1);
  }
  /**
   * Replaces the (optional) InitExp child.
   * @param node The new node to be used as the InitExp child.
   * @apilevel high-level
   */
  public void setInitExp(PureExp node) {
    getInitExpOpt().setChild(node, 0);
  }
  /**
   * Check whether the optional InitExp child exists.
   * @return {@code true} if the optional InitExp child exists, {@code false} if it does not.
   * @apilevel high-level
   */
  public boolean hasInitExp() {
    return getInitExpOpt().getNumChild() != 0;
  }
  /**
   * Retrieves the (optional) InitExp child.
   * @return The InitExp child, if it exists. Returns {@code null} otherwise.
   * @apilevel low-level
   */
  public PureExp getInitExp() {
    return (PureExp) getInitExpOpt().getChild(0);
  }
  /**
   * Retrieves the optional node for the InitExp child. This is the <code>Opt</code> node containing the child InitExp, not the actual child!
   * @return The optional node for child the InitExp child.
   * @apilevel low-level
   */
  public Opt<PureExp> getInitExpOpt() {
    return (Opt<PureExp>) getChild(1);
  }
  /**
   * Retrieves the optional node for child InitExp. This is the <code>Opt</code> node containing the child InitExp, not the actual child!
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The optional node for child InitExp.
   * @apilevel low-level
   */
  public Opt<PureExp> getInitExpOptNoTransform() {
    return (Opt<PureExp>) getChildNoTransform(1);
  }
  /**
   * Replaces the Annotation list.
   * @param list The new list node to be used as the Annotation list.
   * @apilevel high-level
   */
  public void setAnnotationList(List<Annotation> list) {
    setChild(list, 2);
  }
  /**
   * Retrieves the number of children in the Annotation list.
   * @return Number of children in the Annotation list.
   * @apilevel high-level
   */
  public int getNumAnnotation() {
    return getAnnotationList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Annotation list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Annotation list.
   * @apilevel low-level
   */
  public int getNumAnnotationNoTransform() {
    return getAnnotationListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Annotation list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Annotation list.
   * @apilevel high-level
   */
  public Annotation getAnnotation(int i) {
    return (Annotation) getAnnotationList().getChild(i);
  }
  /**
   * Check whether the Annotation list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasAnnotation() {
    return getAnnotationList().getNumChild() != 0;
  }
  /**
   * Append an element to the Annotation list.
   * @param node The element to append to the Annotation list.
   * @apilevel high-level
   */
  public void addAnnotation(Annotation node) {
    List<Annotation> list = (parent == null || state == null) ? getAnnotationListNoTransform() : getAnnotationList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addAnnotationNoTransform(Annotation node) {
    List<Annotation> list = getAnnotationListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Annotation list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setAnnotation(Annotation node, int i) {
    List<Annotation> list = getAnnotationList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Annotation list.
   * @return The node representing the Annotation list.
   * @apilevel high-level
   */
  public List<Annotation> getAnnotationList() {
    List<Annotation> list = (List<Annotation>) getChild(2);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Annotation list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Annotation list.
   * @apilevel low-level
   */
  public List<Annotation> getAnnotationListNoTransform() {
    return (List<Annotation>) getChildNoTransform(2);
  }
  /**
   * Retrieves the Annotation list.
   * @return The node representing the Annotation list.
   * @apilevel high-level
   */
  public List<Annotation> getAnnotations() {
    return getAnnotationList();
  }
  /**
   * Retrieves the Annotation list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Annotation list.
   * @apilevel low-level
   */
  public List<Annotation> getAnnotationsNoTransform() {
    return getAnnotationListNoTransform();
  }
  /**
   * Replaces the lexeme Port.
   * @param value The new value for the lexeme Port.
   * @apilevel high-level
   */
  public void setPort(boolean value) {
    tokenboolean_Port = value;
  }
  /**
   * @apilevel internal
   */
  protected boolean tokenboolean_Port;
  /**
   * Retrieves the value for the lexeme Port.
   * @return The value for the lexeme Port.
   * @apilevel high-level
   */
  public boolean getPort() {
    return tokenboolean_Port;
  }
  /**
   * @aspect TypeCheckerExtension
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/ext/TypeCheckerExtension.jadd:282
   */
    public void typeCheck(SemanticErrorList s) {
        int size = s.size();
        refined_TypeChecker_FieldDecl_typeCheck(s);
        if (s.size() > size) return;

        if (hasInitExp()) {
            getModel().getTypeExt().checkAssignable(getInitExp().getType(), getType(), this);
        }
 
     }
  /**
   * @attribute inh
   * @aspect VarResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/VarResolution.jrag:275
   */
  public VarOrFieldDecl lookupVarOrFieldName(String name, boolean fieldOnly) {
    java.util.List _parameters = new java.util.ArrayList(2);
    _parameters.add(name);
    _parameters.add(Boolean.valueOf(fieldOnly));
    if(lookupVarOrFieldName_String_boolean_visited == null) lookupVarOrFieldName_String_boolean_visited = new java.util.HashMap(4);
    ASTNode$State state = state();
    if (Integer.valueOf(state().boundariesCrossed).equals(lookupVarOrFieldName_String_boolean_visited.get(_parameters))) {
      throw new RuntimeException("Circular definition of attr: lookupVarOrFieldName in class: org.jastadd.ast.AST.InhDecl");
    }
    lookupVarOrFieldName_String_boolean_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    VarOrFieldDecl lookupVarOrFieldName_String_boolean_value = getParent().Define_VarOrFieldDecl_lookupVarOrFieldName(this, null, name, fieldOnly);

    lookupVarOrFieldName_String_boolean_visited.remove(_parameters);
    return lookupVarOrFieldName_String_boolean_value;
  }
  /**
   * @apilevel internal
   */
  protected java.util.Map lookupVarOrFieldName_String_boolean_visited;
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/FnAppContext.jrag:18
   * @apilevel internal
   */
  public boolean Define_boolean_isContextImperative(ASTNode caller, ASTNode child) {
    if (caller == getInitExpOptNoTransform()) {
      return true;
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_boolean_isContextImperative(this, caller);
    }
  }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/VarResolution.jrag:276
   * @apilevel internal
   */
  public VarOrFieldDecl Define_VarOrFieldDecl_lookupVarOrFieldName(ASTNode caller, ASTNode child, String name, boolean fieldOnly) {
    if (caller == getInitExpOptNoTransform()){
        return lookupVarOrFieldName(name,fieldOnly);
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_VarOrFieldDecl_lookupVarOrFieldName(this, caller, name, fieldOnly);
    }
  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
