/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/mTVL.ast:35
 * @production IntListMType : {@link MType} ::= <span class="component">{@link BoundaryVal}*</span>;

 */
public class IntListMType extends MType implements Cloneable {
  /**
   * @aspect ErrorCheck
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/mtvl/ErrorCheck.jadd:84
   */
  public void collectErrors(SemanticErrorList c) {
      if (!(this.getTypename().equals("Int"))) {
          c.add(new SemanticError(this, ErrorMessage.UNEXPECTED_ATTRIBUTE_TYPE,
                                  this.getTypename(), "Int"));
      }
  }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:127
   */
  public IntListMType parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @declaredat ASTNode:1
   */
  public IntListMType() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[1];
    setChild(new List(), 0);
  }
  /**
   * @declaredat ASTNode:14
   */
  public IntListMType(String p0, List<BoundaryVal> p1) {
    setTypename(p0);
    setChild(p1, 0);
  }
  /**
   * @declaredat ASTNode:18
   */
  public IntListMType(beaver.Symbol p0, List<BoundaryVal> p1) {
    setTypename(p0);
    setChild(p1, 0);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:25
   */
  protected int numChildren() {
    return 1;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:31
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:37
   */
  public void flushCache() {
    super.flushCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:43
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:49
   */
  public IntListMType clone() throws CloneNotSupportedException {
    IntListMType node = (IntListMType) super.clone();
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:58
   */
  public IntListMType copy() {
    try {
      IntListMType node = (IntListMType) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:76
   */
  public IntListMType fullCopy() {
    IntListMType tree = (IntListMType) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the lexeme Typename.
   * @param value The new value for the lexeme Typename.
   * @apilevel high-level
   */
  public void setTypename(String value) {
    tokenString_Typename = value;
  }
  /**
   * JastAdd-internal setter for lexeme Typename using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme Typename
   * @apilevel internal
   */
  public void setTypename(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setTypename is only valid for String lexemes");
    tokenString_Typename = (String)symbol.value;
    Typenamestart = symbol.getStart();
    Typenameend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme Typename.
   * @return The value for the lexeme Typename.
   * @apilevel high-level
   */
  public String getTypename() {
    return tokenString_Typename != null ? tokenString_Typename : "";
  }
  /**
   * Replaces the BoundaryVal list.
   * @param list The new list node to be used as the BoundaryVal list.
   * @apilevel high-level
   */
  public void setBoundaryValList(List<BoundaryVal> list) {
    setChild(list, 0);
  }
  /**
   * Retrieves the number of children in the BoundaryVal list.
   * @return Number of children in the BoundaryVal list.
   * @apilevel high-level
   */
  public int getNumBoundaryVal() {
    return getBoundaryValList().getNumChild();
  }
  /**
   * Retrieves the number of children in the BoundaryVal list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the BoundaryVal list.
   * @apilevel low-level
   */
  public int getNumBoundaryValNoTransform() {
    return getBoundaryValListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the BoundaryVal list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the BoundaryVal list.
   * @apilevel high-level
   */
  public BoundaryVal getBoundaryVal(int i) {
    return (BoundaryVal) getBoundaryValList().getChild(i);
  }
  /**
   * Check whether the BoundaryVal list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasBoundaryVal() {
    return getBoundaryValList().getNumChild() != 0;
  }
  /**
   * Append an element to the BoundaryVal list.
   * @param node The element to append to the BoundaryVal list.
   * @apilevel high-level
   */
  public void addBoundaryVal(BoundaryVal node) {
    List<BoundaryVal> list = (parent == null || state == null) ? getBoundaryValListNoTransform() : getBoundaryValList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addBoundaryValNoTransform(BoundaryVal node) {
    List<BoundaryVal> list = getBoundaryValListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the BoundaryVal list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setBoundaryVal(BoundaryVal node, int i) {
    List<BoundaryVal> list = getBoundaryValList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the BoundaryVal list.
   * @return The node representing the BoundaryVal list.
   * @apilevel high-level
   */
  public List<BoundaryVal> getBoundaryValList() {
    List<BoundaryVal> list = (List<BoundaryVal>) getChild(0);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the BoundaryVal list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the BoundaryVal list.
   * @apilevel low-level
   */
  public List<BoundaryVal> getBoundaryValListNoTransform() {
    return (List<BoundaryVal>) getChildNoTransform(0);
  }
  /**
   * Retrieves the BoundaryVal list.
   * @return The node representing the BoundaryVal list.
   * @apilevel high-level
   */
  public List<BoundaryVal> getBoundaryVals() {
    return getBoundaryValList();
  }
  /**
   * Retrieves the BoundaryVal list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the BoundaryVal list.
   * @apilevel low-level
   */
  public List<BoundaryVal> getBoundaryValsNoTransform() {
    return getBoundaryValListNoTransform();
  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
