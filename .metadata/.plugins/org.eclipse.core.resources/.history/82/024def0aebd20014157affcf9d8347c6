/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:210
 * @production StringLiteral : {@link LiteralExp} ::= <span class="component">&lt;Content:String&gt;</span>;

 */
public class StringLiteral extends LiteralExp implements Cloneable {
  /**
   * @aspect GenerateErlang
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/erlang/GenerateErlang.jadd:349
   */
  @Override
  public void generateErlangCode(ErlangCodeStream ecs,Vars vars) {
      String content = getContent();
      StringBuilder result = new StringBuilder();
      for (char c : content.toCharArray()) {
          switch (c) {
          case '\\' : result.append("\\\\"); break;
          case '"' : result.append("\\\""); break;
          default: result.append(c);
          }
      }
      ecs.print('"' + result.toString() + '"');
  }
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:864
   */
  public void generateJava(PrintStream stream) {
        stream.print(ABSString.class.getName());
        stream.print(".fromString(\"");
        JavaGeneratorHelper.printEscapedString(stream, getContent());
        stream.print("\")");
    }
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:893
   */
  public void generateJavaDynamic(PrintStream stream) {
        stream.print(ABSString.class.getName());
        stream.print(".fromString(\"");
        DynamicJavaGeneratorHelper.printEscapedString(stream, getContent());
        stream.print("\")");
    }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:306
   */
  public void generateMaude(PrintStream stream) {
        String content = getContent();
        StringBuilder result = new StringBuilder();
        for (char c : content.toCharArray()) {
            switch (c) {
            case '\\' : result.append("\\\\"); break;
            case '\t' : result.append("\\t"); break;
            case '\r' : result.append("\\r"); break;
            case '\n' : result.append("\\n"); break;
            case '"' : result.append("\\\""); break;
            default: result.append(c);
            }
        }
        stream.print("\"str\"[\"" + result.toString() + "\"] ");
    }
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:1071
   */
  public void doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("\"");
        stream.print(getContent());
        stream.print("\"");
    }
  /**
   * @aspect GenerateProlog
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prolog/GenerateProlog.jadd:319
   */
  public void generateProlog(PrintStream s,ReachabilityInformation reachInfo){
        s.print(strTransform(getContent()));
    }
  /**
   * @aspect DumpTree
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/tests/DumpTree.jadd:147
   */
  public void dumpTree(String indent, java.io.PrintStream pStream) {
		pStream.print("StrLit: " + this.getContent() + " ");
	}
  /**
   * @aspect MyDumpTree
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/tests/MyDumpTree.jadd:147
   */
  protected void printInfo(PrintStream stream)
    {
        stream.print(this.getContent());
    }
  /**
   * @aspect PrettyPrint
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/tests/PrettyPrint.jadd:164
   */
  public void prettyPrint(PrintWriter w, ABSFormatter f) {
        w.print("StringLiteral(" + this.getContent() + ")");
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:214
   */
  public StringLiteral parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @declaredat ASTNode:1
   */
  public StringLiteral() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
  }
  /**
   * @declaredat ASTNode:12
   */
  public StringLiteral(String p0) {
    setContent(p0);
  }
  /**
   * @declaredat ASTNode:15
   */
  public StringLiteral(beaver.Symbol p0) {
    setContent(p0);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:21
   */
  protected int numChildren() {
    return 0;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:27
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:33
   */
  public void flushCache() {
    super.flushCache();
    getType_visited = -1;
    getType_computed = false;
    getType_value = null;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:42
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:48
   */
  public StringLiteral clone() throws CloneNotSupportedException {
    StringLiteral node = (StringLiteral) super.clone();
    node.getType_visited = -1;
    node.getType_computed = false;
    node.getType_value = null;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:60
   */
  public StringLiteral copy() {
    try {
      StringLiteral node = (StringLiteral) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:78
   */
  public StringLiteral fullCopy() {
    StringLiteral tree = (StringLiteral) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the lexeme Content.
   * @param value The new value for the lexeme Content.
   * @apilevel high-level
   */
  public void setContent(String value) {
    tokenString_Content = value;
  }
  /**
   * @apilevel internal
   */
  protected String tokenString_Content;
  /**
   */
  public int Contentstart;
  /**
   */
  public int Contentend;
  /**
   * JastAdd-internal setter for lexeme Content using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme Content
   * @apilevel internal
   */
  public void setContent(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setContent is only valid for String lexemes");
    tokenString_Content = (String)symbol.value;
    Contentstart = symbol.getStart();
    Contentend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme Content.
   * @return The value for the lexeme Content.
   * @apilevel high-level
   */
  public String getContent() {
    return tokenString_Content != null ? tokenString_Content : "";
  }
  /**
   * @apilevel internal
   */
  protected int getType_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getType_computed = false;
  /**
   * @apilevel internal
   */
  protected Type getType_value;
  /**
   * @attribute syn
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:282
   */
  public Type getType() {
    if(getType_computed) {
      return getType_value;
    }
    ASTNode$State state = state();
    if (getType_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getType in class: org.jastadd.ast.AST.SynDecl");
    }
    getType_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getType_value = getType_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getType_computed = true;
    } else {
    }

    getType_visited = -1;
    return getType_value;
  }
  /**
   * @apilevel internal
   */
  private Type getType_compute() {  return getModel().getStringType();  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
