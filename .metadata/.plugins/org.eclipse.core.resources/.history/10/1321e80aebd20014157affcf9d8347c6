/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:197
 * @production Exp : {@link ASTNode};

 */
public abstract class Exp extends ASTNode<ASTNode> implements Cloneable, HasType {
  /**
   * @aspect GenerateErlang
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/erlang/GenerateErlang.jadd:244
   */
  public void generateErlangCode(ErlangCodeStream ecs,Vars vars) {
    throw new NotImplementedYetException(this);
  }
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:534
   */
  public abstract void generateJava(PrintStream stream);
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:557
   */
  public abstract void generateJavaDynamic(PrintStream stream);
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:120
   */
  abstract public void generateMaude(PrintStream stream);
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:121
   */
  abstract public int numberOfRandom(Set<String> visitedFunctions);
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:139
   */
  abstract public void generateMaudeAsStatement(PrintStream stream, String var, List<Annotation> annotations);
  /**
   * @aspect SqlHelpers
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/sql/SqlHelpers.jadd:52
   */
  public String getUnusedVarName(final Set<? super String> occupiedNames, final String pattern) {
        String name;
        int i = 1;
        do {
            name = String.format(pattern, i == 1 ? "" : Integer.toString(i));
            i++;
        } while (lookupVarOrFieldName(name, false) != null || !occupiedNames.add(name));
        return name;
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:79
   */
  public Exp parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:688
   */
  public void typeCheck(SemanticErrorList e) { }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:901
   */
  public void assertHasType(SemanticErrorList l, Type t) {
        if (!getType().isAssignable(t)) {
            l.add(new TypeError(this, ErrorMessage.EXPECTED_TYPE, t, getType()));
        }
    }
  /**
   * @declaredat ASTNode:1
   */
  public Exp() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:15
   */
  protected int numChildren() {
    return 0;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:21
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:27
   */
  public void flushCache() {
    super.flushCache();
    isConstant_visited = -1;
    hasSideEffects_visited = -1;
    hasSideEffects_computed = false;
    isPure_visited = -1;
    isPure_computed = false;
    getFreeVars_visited = -1;
    getFreeVars_computed = false;
    getFreeVars_value = null;
    toSqlExp_visited = -1;
    isSqlExp_visited = -1;
    lookupVarOrFieldName_String_boolean_visited = null;
    lookup_KindedName_visited = null;
    getModel_visited = -1;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:46
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:52
   */
  public Exp clone() throws CloneNotSupportedException {
    Exp node = (Exp) super.clone();
    node.isConstant_visited = -1;
    node.hasSideEffects_visited = -1;
    node.hasSideEffects_computed = false;
    node.isPure_visited = -1;
    node.isPure_computed = false;
    node.getFreeVars_visited = -1;
    node.getFreeVars_computed = false;
    node.getFreeVars_value = null;
    node.toSqlExp_visited = -1;
    node.isSqlExp_visited = -1;
    node.lookupVarOrFieldName_String_boolean_visited = null;
    node.lookup_KindedName_visited = null;
    node.getModel_visited = -1;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @attribute syn
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:118
   */
  public abstract Type getType();
  /**
   * @apilevel internal
   */
  protected int isConstant_visited = -1;
  /**
   * @attribute syn
   * @aspect ConstantFolding
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/Constants.jrag:2
   */
  public boolean isConstant() {
    ASTNode$State state = state();
    if (isConstant_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isConstant in class: org.jastadd.ast.AST.SynDecl");
    }
    isConstant_visited = state().boundariesCrossed;
    try {  return false;  }
    finally {
      isConstant_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int hasSideEffects_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean hasSideEffects_computed = false;
  /**
   * @apilevel internal
   */
  protected boolean hasSideEffects_value;
  /**
   * @attribute syn
   * @aspect EffectAnalysis
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/EffectAnalysis.jrag:5
   */
  public boolean hasSideEffects() {
    if(hasSideEffects_computed) {
      return hasSideEffects_value;
    }
    ASTNode$State state = state();
    if (hasSideEffects_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: hasSideEffects in class: org.jastadd.ast.AST.SynDecl");
    }
    hasSideEffects_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    hasSideEffects_value = hasSideEffects_compute();
    if(isFinal && num == state().boundariesCrossed) {
      hasSideEffects_computed = true;
    } else {
    }

    hasSideEffects_visited = -1;
    return hasSideEffects_value;
  }
  /**
   * @apilevel internal
   */
  private boolean hasSideEffects_compute() {  return ! isPure();  }
  /**
   * @apilevel internal
   */
  protected int isPure_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean isPure_computed = false;
  /**
   * @apilevel internal
   */
  protected boolean isPure_value;
  /**
   * @attribute syn
   * @aspect EffectAnalysis
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/EffectAnalysis.jrag:8
   */
  public boolean isPure() {
    if(isPure_computed) {
      return isPure_value;
    }
    ASTNode$State state = state();
    if (isPure_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isPure in class: org.jastadd.ast.AST.SynDecl");
    }
    isPure_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    isPure_value = isPure_compute();
    if(isFinal && num == state().boundariesCrossed) {
      isPure_computed = true;
    } else {
    }

    isPure_visited = -1;
    return isPure_value;
  }
  /**
   * @apilevel internal
   */
  private boolean isPure_compute() {  return false;  }
  /**
   * @apilevel internal
   */
  protected int getFreeVars_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getFreeVars_computed = false;
  /**
   * @apilevel internal
   */
  protected Set<String> getFreeVars_value;
  /**
   * @attribute syn
   * @aspect VarUsage
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/FreeVars.jrag:8
   */
  public Set<String> getFreeVars() {
    if(getFreeVars_computed) {
      return getFreeVars_value;
    }
    ASTNode$State state = state();
    if (getFreeVars_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getFreeVars in class: org.jastadd.ast.AST.SynDecl");
    }
    getFreeVars_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getFreeVars_value = getFreeVars_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getFreeVars_computed = true;
    } else {
    }

    getFreeVars_visited = -1;
    return getFreeVars_value;
  }
  /**
   * @apilevel internal
   */
  private Set<String> getFreeVars_compute() {  return Collections.emptySet();  }
  /**
   * @apilevel internal
   */
  protected int toSqlExp_visited = -1;
  /**
   * @attribute syn
   * @aspect SqlRewrites
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/sql/SqlRewrites.jrag:3
   */
  public SqlExp toSqlExp() {
    ASTNode$State state = state();
    if (toSqlExp_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: toSqlExp in class: org.jastadd.ast.AST.SynDecl");
    }
    toSqlExp_visited = state().boundariesCrossed;
    try {  return null;  }
    finally {
      toSqlExp_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int isSqlExp_visited = -1;
  /**
   * @attribute syn
   * @aspect SqlRewrites
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/sql/SqlRewrites.jrag:6
   */
  public boolean isSqlExp() {
    ASTNode$State state = state();
    if (isSqlExp_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isSqlExp in class: org.jastadd.ast.AST.SynDecl");
    }
    isSqlExp_visited = state().boundariesCrossed;
    try {  return false;  }
    finally {
      isSqlExp_visited = -1;
    }
  }
  /**
   * @attribute inh
   * @aspect VarResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/VarResolution.jrag:264
   */
  public VarOrFieldDecl lookupVarOrFieldName(String name, boolean fieldOnly) {
    java.util.List _parameters = new java.util.ArrayList(2);
    _parameters.add(name);
    _parameters.add(Boolean.valueOf(fieldOnly));
    if(lookupVarOrFieldName_String_boolean_visited == null) lookupVarOrFieldName_String_boolean_visited = new java.util.HashMap(4);
    ASTNode$State state = state();
    if (Integer.valueOf(state().boundariesCrossed).equals(lookupVarOrFieldName_String_boolean_visited.get(_parameters))) {
      throw new RuntimeException("Circular definition of attr: lookupVarOrFieldName in class: org.jastadd.ast.AST.InhDecl");
    }
    lookupVarOrFieldName_String_boolean_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    VarOrFieldDecl lookupVarOrFieldName_String_boolean_value = getParent().Define_VarOrFieldDecl_lookupVarOrFieldName(this, null, name, fieldOnly);

    lookupVarOrFieldName_String_boolean_visited.remove(_parameters);
    return lookupVarOrFieldName_String_boolean_value;
  }
  /**
   * @apilevel internal
   */
  protected java.util.Map lookupVarOrFieldName_String_boolean_visited;
  /**
   * @attribute inh
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:262
   */
  public Decl lookup(KindedName name) {
    Object _parameters = name;
    if(lookup_KindedName_visited == null) lookup_KindedName_visited = new java.util.HashMap(4);
    ASTNode$State state = state();
    if (Integer.valueOf(state().boundariesCrossed).equals(lookup_KindedName_visited.get(_parameters))) {
      throw new RuntimeException("Circular definition of attr: lookup in class: org.jastadd.ast.AST.InhDecl");
    }
    lookup_KindedName_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    Decl lookup_KindedName_value = getParent().Define_Decl_lookup(this, null, name);

    lookup_KindedName_visited.remove(_parameters);
    return lookup_KindedName_value;
  }
  /**
   * @apilevel internal
   */
  protected java.util.Map lookup_KindedName_visited;
  /**
   * @attribute inh
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:48
   */
  public Model getModel() {
    ASTNode$State state = state();
    if (getModel_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getModel in class: org.jastadd.ast.AST.InhDecl");
    }
    getModel_visited = state().boundariesCrossed;
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    Model getModel_value = getParent().Define_Model_getModel(this, null);

    getModel_visited = -1;
    return getModel_value;
  }
  /**
   * @apilevel internal
   */
  protected int getModel_visited = -1;
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
