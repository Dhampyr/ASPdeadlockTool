/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/SQL.ast:17
 * @production SqlExplicitAttrsDef : {@link SqlAttrsDef} ::= <span class="component">{@link SqlAttrDef}*</span>;

 */
public class SqlExplicitAttrsDef extends SqlAttrsDef implements Cloneable {
  /**
   * @aspect SqlRewrites
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/sql/SqlRewrites.jrag:258
   */
  public PureExp createDbExecutionTree(PureExp exp, List<PureExp> groupingAttributes) throws abs.frontend.sql.SqlRewritingException {
        final Set<SqlCalcAttrDef> calcAttrDefs = new HashSet<SqlCalcAttrDef>();
        final Set<SqlAttrDef> projectionAttrDefs = new HashSet<SqlAttrDef>();
        segregateAttrDefs(calcAttrDefs, projectionAttrDefs);
        if (calcAttrDefs.isEmpty() && groupingAttributes.getNumChild() == 0)
            return createDbExecutionTreeForProjection(projectionAttrDefs, exp);
        else
            return createDbExecutionTreeForGroupingAndProjection(calcAttrDefs, projectionAttrDefs, groupingAttributes, exp);
    }
  /**
   * @aspect SqlRewrites
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/sql/SqlRewrites.jrag:267
   */
  private void segregateAttrDefs(Set<SqlCalcAttrDef> calcAttrDefs, Set<SqlAttrDef> projectionAttrDefs) {
        for (SqlAttrDef def : getSqlAttrDefs()) {
            if (def instanceof SqlCalcAttrDef)
                calcAttrDefs.add((SqlCalcAttrDef) def);
            else {
                assert def instanceof SqlProjectionAttrDef;
                projectionAttrDefs.add(def);
            }
        }
    }
  /**
   * @aspect SqlRewrites
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/sql/SqlRewrites.jrag:277
   */
  private PureExp createDbExecutionTreeForProjection(Set<SqlAttrDef> projectionAttrDefs, PureExp baseTree) {
        return new DataConstructorExp(
                Constants.DBLIB_NAME + ".UnaryExecutionNode", new List<PureExp>().add(
                    new DataConstructorExp(
                        Constants.DB_OPERATORS_STRUCTURE_LIB_NAME + ".Projection",
                        new List<PureExp>().add(
                            createDbProjectionAttributeRefSet(projectionAttrDefs)))).add(
                    baseTree));
    }
  /**
   * @aspect SqlRewrites
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/sql/SqlRewrites.jrag:286
   */
  private PureExp createDbExecutionTreeForGroupingAndProjection(Set<SqlCalcAttrDef> calcAttrDefs,
            Set<SqlAttrDef> projectionAttrDefs, List<PureExp> groupingAttributes, PureExp baseTree) throws abs.frontend.sql.SqlRewritingException {
        assert !calcAttrDefs.isEmpty();
        return new DataConstructorExp(
            Constants.DBLIB_NAME + ".UnaryExecutionNode", new List<PureExp>().add(
                new DataConstructorExp(
                    Constants.DB_OPERATORS_STRUCTURE_LIB_NAME + ".GroupingAndProjection",
                    new List<PureExp>().add(
                        createDbAttrToFunctionMap(calcAttrDefs)).add(
                        createDbGroupingAttributesList(groupingAttributes)).add(
                        createDbProjectionAttributeRefSet(projectionAttrDefs)))).add(
                baseTree));
    }
  /**
   * @aspect SqlRewrites
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/sql/SqlRewrites.jrag:299
   */
  private PureExp createDbAttrToFunctionMap(Set<SqlCalcAttrDef> calcAttrDefs) throws abs.frontend.sql.SqlRewritingException {
        PureExp functions = new DataConstructorExp(Constants.STDLIB_NAME + ".EmptyMap", new List<PureExp>());
        for (SqlCalcAttrDef def : calcAttrDefs)
            functions = new DataConstructorExp(
                Constants.STDLIB_NAME + ".InsertAssoc",
                new List<PureExp>().add(
                    new DataConstructorExp(Constants.STDLIB_NAME + ".Pair", new List<PureExp>().add(
                        def.getPureExp()).add( // attribute name
                        def.getSqlAggregateFunction().createDbAggregateFunctionExp()))).add(
                    functions));
        return functions;
    }
  /**
   * @aspect SqlRewrites
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/sql/SqlRewrites.jrag:311
   */
  private PureExp createDbGroupingAttributesList(List<PureExp> groupingAttributes) {
        if (groupingAttributes.getNumChild() == 0)
            return new DataConstructorExp(Constants.STDLIB_NAME + ".Nothing", new List<PureExp>());
        PureExp exp = new DataConstructorExp(Constants.STDLIB_NAME + ".EmptySet", new List<PureExp>());
        for (PureExp attr : groupingAttributes)
            exp = new DataConstructorExp(Constants.STDLIB_NAME + ".Insert", new List<PureExp>().add(
                    new DataConstructorExp(
                            Constants.DB_OPERATORS_STRUCTURE_LIB_NAME + ".AttributeRefByName",
                            new List<PureExp>().add(attr))).add(
                    exp));
        return new DataConstructorExp(Constants.STDLIB_NAME + ".Just", new List<PureExp>().add(exp));
    }
  /**
   * @aspect SqlRewrites
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/sql/SqlRewrites.jrag:323
   */
  private PureExp createDbProjectionAttributeRefSet(Set<SqlAttrDef> projectionAttrDefs) {
        PureExp exp = new DataConstructorExp(Constants.STDLIB_NAME + ".EmptySet", new List<PureExp>());
        for (SqlAttrDef def : projectionAttrDefs)
            exp = new DataConstructorExp(Constants.STDLIB_NAME + ".Insert", new List<PureExp>().add(
                    new DataConstructorExp(
                            Constants.DB_OPERATORS_STRUCTURE_LIB_NAME + ".AttributeRefByName",
                            new List<PureExp>().add(def.getPureExp()))).add(
                    exp));
        return exp;
    }
  /**
   * @declaredat ASTNode:1
   */
  public SqlExplicitAttrsDef() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[1];
    setChild(new List(), 0);
  }
  /**
   * @declaredat ASTNode:14
   */
  public SqlExplicitAttrsDef(List<SqlAttrDef> p0) {
    setChild(p0, 0);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:20
   */
  protected int numChildren() {
    return 1;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:26
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:32
   */
  public void flushCache() {
    super.flushCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:38
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:44
   */
  public SqlExplicitAttrsDef clone() throws CloneNotSupportedException {
    SqlExplicitAttrsDef node = (SqlExplicitAttrsDef) super.clone();
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:53
   */
  public SqlExplicitAttrsDef copy() {
    try {
      SqlExplicitAttrsDef node = (SqlExplicitAttrsDef) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:71
   */
  public SqlExplicitAttrsDef fullCopy() {
    SqlExplicitAttrsDef tree = (SqlExplicitAttrsDef) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the SqlAttrDef list.
   * @param list The new list node to be used as the SqlAttrDef list.
   * @apilevel high-level
   */
  public void setSqlAttrDefList(List<SqlAttrDef> list) {
    setChild(list, 0);
  }
  /**
   * Retrieves the number of children in the SqlAttrDef list.
   * @return Number of children in the SqlAttrDef list.
   * @apilevel high-level
   */
  public int getNumSqlAttrDef() {
    return getSqlAttrDefList().getNumChild();
  }
  /**
   * Retrieves the number of children in the SqlAttrDef list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the SqlAttrDef list.
   * @apilevel low-level
   */
  public int getNumSqlAttrDefNoTransform() {
    return getSqlAttrDefListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the SqlAttrDef list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the SqlAttrDef list.
   * @apilevel high-level
   */
  public SqlAttrDef getSqlAttrDef(int i) {
    return (SqlAttrDef) getSqlAttrDefList().getChild(i);
  }
  /**
   * Check whether the SqlAttrDef list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasSqlAttrDef() {
    return getSqlAttrDefList().getNumChild() != 0;
  }
  /**
   * Append an element to the SqlAttrDef list.
   * @param node The element to append to the SqlAttrDef list.
   * @apilevel high-level
   */
  public void addSqlAttrDef(SqlAttrDef node) {
    List<SqlAttrDef> list = (parent == null || state == null) ? getSqlAttrDefListNoTransform() : getSqlAttrDefList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addSqlAttrDefNoTransform(SqlAttrDef node) {
    List<SqlAttrDef> list = getSqlAttrDefListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the SqlAttrDef list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setSqlAttrDef(SqlAttrDef node, int i) {
    List<SqlAttrDef> list = getSqlAttrDefList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the SqlAttrDef list.
   * @return The node representing the SqlAttrDef list.
   * @apilevel high-level
   */
  public List<SqlAttrDef> getSqlAttrDefList() {
    List<SqlAttrDef> list = (List<SqlAttrDef>) getChild(0);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the SqlAttrDef list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the SqlAttrDef list.
   * @apilevel low-level
   */
  public List<SqlAttrDef> getSqlAttrDefListNoTransform() {
    return (List<SqlAttrDef>) getChildNoTransform(0);
  }
  /**
   * Retrieves the SqlAttrDef list.
   * @return The node representing the SqlAttrDef list.
   * @apilevel high-level
   */
  public List<SqlAttrDef> getSqlAttrDefs() {
    return getSqlAttrDefList();
  }
  /**
   * Retrieves the SqlAttrDef list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the SqlAttrDef list.
   * @apilevel low-level
   */
  public List<SqlAttrDef> getSqlAttrDefsNoTransform() {
    return getSqlAttrDefListNoTransform();
  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
