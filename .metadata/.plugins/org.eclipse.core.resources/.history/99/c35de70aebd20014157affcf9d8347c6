/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:42
 * @production DataTypeDecl : {@link TypeDecl} ::= <span class="component">{@link Annotation}*</span> <span class="component">{@link DataConstructor}*</span>;

 */
public class DataTypeDecl extends TypeDecl implements Cloneable {
  /**
   * @aspect GenerateErlang
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/erlang/GenerateErlang.jadd:38
   */
  public void generateErlangCode(ErlApp ea) throws IOException
  {
    //Ignore DataTypeDecl
  }
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:98
   */
  public void generateJavaCode(JavaCode.Package pkg) throws IOException, JavaCodeGenerationException {
        super.generateJavaCode(pkg);
        for (DataConstructor c : getDataConstructors()) {
            c.generateJavaCode(pkg);
        }
    }
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:244
   */
  public void generateJava(PrintStream stream) {
        JavaGeneratorHelper.generateHelpLine(this,stream);

        stream.print("public abstract class " + getName());
        JavaGeneratorHelper.generateTypeParameters(stream,this, true);

        stream.println(" extends " + ABSDataType.class.getName() + " {");

        for (DataConstructor c : getDataConstructors()) {
            stream.println("public final boolean is" + c.getName()+
                    "() { return this instanceof " + JavaBackend.getConstructorName(c)+
                    "; }");
            stream.print("public final " + JavaBackend.getConstructorName(c));
            JavaGeneratorHelper.generateTypeParameters(stream,this, false);
            stream.println(" to" + c.getName()+
                    "() { return (" + JavaBackend.getConstructorName(c) + ") this; }");

        }

        stream.println("}");
    }
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:135
   */
  public void generateJavaCodeDynamic(JavaCode.Package pkg) throws IOException, JavaCodeGenerationException {
        super.generateJavaCodeDynamic(pkg);
        for (DataConstructor c : getDataConstructors()) {
            c.generateJavaCodeDynamic(pkg);
        }
    }
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:286
   */
  public void generateJavaDynamic(PrintStream stream) {
        DynamicJavaGeneratorHelper.generateHelpLine(this, stream);

        stream.print("public abstract class " + getName());
        DynamicJavaGeneratorHelper.generateTypeParameters(stream, this, true);

        stream.println(" extends " + ABSDataType.class.getName() + " {");

        for (DataConstructor c : getDataConstructors()) {
            stream.println("public final boolean is" + c.getName()
                    + "() { return this instanceof " + JavaBackend.getConstructorName(c)
                    + "; }");
            stream.print("public final " + JavaBackend.getConstructorName(c));
            DynamicJavaGeneratorHelper.generateTypeParameters(stream, this, false);
            stream.println(" to" + c.getName()
                    + "() { return (" + JavaBackend.getConstructorName(c) + ") this; }");

        }
        stream.println("}");
    }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:69
   */
  public void generateMaude(PrintStream stream) {
		stream.println("*** Datatype " + qualifiedName());
        for (DataConstructor c : getDataConstructors()) {
            stream.println("***   Constructor " + c.qualifiedName());
        }
	}
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:787
   */
  public void doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("data ");
        stream.print(getName());
        doPrettyPrintTypeParam(stream, formatter);
        if (getNumDataConstructor() > 0) {
            stream.print(" = ");
            getDataConstructorList().doPrettyPrint(stream, formatter, "|");
        }
        stream.print(";");
    }
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:832
   */
  public void doPrettyPrintTypeParam(PrintWriter stream, ABSFormatter formatter) { }
  /**
   * @aspect GenerateProlog
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prolog/GenerateProlog.jadd:32
   */
  public void generateProlog(PrintStream s,ReachabilityInformation reachInfo){
        //the standard behavior should work
        super.generateProlog(s,reachInfo);
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:60
   */
  public DataTypeDecl parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:380
   */
  public void typeCheck(SemanticErrorList e) {
        HashSet<String> names = new HashSet<String>();
        for (DataConstructor c : getDataConstructors()) {
            c.typeCheck(e);
            if (!names.add(c.getName())) {
                e.add(new TypeError(c, ErrorMessage.DUPLICATE_CONSTRUCTOR, c.getName()));
            }
        }
    }
  /**
   * @declaredat ASTNode:1
   */
  public DataTypeDecl() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[2];
    setChild(new List(), 0);
    setChild(new List(), 1);
  }
  /**
   * @declaredat ASTNode:15
   */
  public DataTypeDecl(String p0, List<Annotation> p1, List<DataConstructor> p2) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
  }
  /**
   * @declaredat ASTNode:20
   */
  public DataTypeDecl(beaver.Symbol p0, List<Annotation> p1, List<DataConstructor> p2) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:28
   */
  protected int numChildren() {
    return 2;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:34
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:40
   */
  public void flushCache() {
    super.flushCache();
    isDataType_visited = -1;
    isFuture_visited = -1;
    getType_visited = -1;
    getType_computed = false;
    getType_value = null;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:51
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:57
   */
  public DataTypeDecl clone() throws CloneNotSupportedException {
    DataTypeDecl node = (DataTypeDecl) super.clone();
    node.isDataType_visited = -1;
    node.isFuture_visited = -1;
    node.getType_visited = -1;
    node.getType_computed = false;
    node.getType_value = null;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:71
   */
  public DataTypeDecl copy() {
    try {
      DataTypeDecl node = (DataTypeDecl) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:89
   */
  public DataTypeDecl fullCopy() {
    DataTypeDecl tree = (DataTypeDecl) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the lexeme Name.
   * @param value The new value for the lexeme Name.
   * @apilevel high-level
   */
  public void setName(String value) {
    tokenString_Name = value;
  }
  /**
   * JastAdd-internal setter for lexeme Name using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme Name
   * @apilevel internal
   */
  public void setName(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setName is only valid for String lexemes");
    tokenString_Name = (String)symbol.value;
    Namestart = symbol.getStart();
    Nameend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme Name.
   * @return The value for the lexeme Name.
   * @apilevel high-level
   */
  public String getName() {
    return tokenString_Name != null ? tokenString_Name : "";
  }
  /**
   * Replaces the Annotation list.
   * @param list The new list node to be used as the Annotation list.
   * @apilevel high-level
   */
  public void setAnnotationList(List<Annotation> list) {
    setChild(list, 0);
  }
  /**
   * Retrieves the number of children in the Annotation list.
   * @return Number of children in the Annotation list.
   * @apilevel high-level
   */
  public int getNumAnnotation() {
    return getAnnotationList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Annotation list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Annotation list.
   * @apilevel low-level
   */
  public int getNumAnnotationNoTransform() {
    return getAnnotationListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Annotation list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Annotation list.
   * @apilevel high-level
   */
  public Annotation getAnnotation(int i) {
    return (Annotation) getAnnotationList().getChild(i);
  }
  /**
   * Check whether the Annotation list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasAnnotation() {
    return getAnnotationList().getNumChild() != 0;
  }
  /**
   * Append an element to the Annotation list.
   * @param node The element to append to the Annotation list.
   * @apilevel high-level
   */
  public void addAnnotation(Annotation node) {
    List<Annotation> list = (parent == null || state == null) ? getAnnotationListNoTransform() : getAnnotationList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addAnnotationNoTransform(Annotation node) {
    List<Annotation> list = getAnnotationListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Annotation list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setAnnotation(Annotation node, int i) {
    List<Annotation> list = getAnnotationList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Annotation list.
   * @return The node representing the Annotation list.
   * @apilevel high-level
   */
  public List<Annotation> getAnnotationList() {
    List<Annotation> list = (List<Annotation>) getChild(0);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Annotation list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Annotation list.
   * @apilevel low-level
   */
  public List<Annotation> getAnnotationListNoTransform() {
    return (List<Annotation>) getChildNoTransform(0);
  }
  /**
   * Retrieves the Annotation list.
   * @return The node representing the Annotation list.
   * @apilevel high-level
   */
  public List<Annotation> getAnnotations() {
    return getAnnotationList();
  }
  /**
   * Retrieves the Annotation list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Annotation list.
   * @apilevel low-level
   */
  public List<Annotation> getAnnotationsNoTransform() {
    return getAnnotationListNoTransform();
  }
  /**
   * Replaces the DataConstructor list.
   * @param list The new list node to be used as the DataConstructor list.
   * @apilevel high-level
   */
  public void setDataConstructorList(List<DataConstructor> list) {
    setChild(list, 1);
  }
  /**
   * Retrieves the number of children in the DataConstructor list.
   * @return Number of children in the DataConstructor list.
   * @apilevel high-level
   */
  public int getNumDataConstructor() {
    return getDataConstructorList().getNumChild();
  }
  /**
   * Retrieves the number of children in the DataConstructor list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the DataConstructor list.
   * @apilevel low-level
   */
  public int getNumDataConstructorNoTransform() {
    return getDataConstructorListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the DataConstructor list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the DataConstructor list.
   * @apilevel high-level
   */
  public DataConstructor getDataConstructor(int i) {
    return (DataConstructor) getDataConstructorList().getChild(i);
  }
  /**
   * Check whether the DataConstructor list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasDataConstructor() {
    return getDataConstructorList().getNumChild() != 0;
  }
  /**
   * Append an element to the DataConstructor list.
   * @param node The element to append to the DataConstructor list.
   * @apilevel high-level
   */
  public void addDataConstructor(DataConstructor node) {
    List<DataConstructor> list = (parent == null || state == null) ? getDataConstructorListNoTransform() : getDataConstructorList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addDataConstructorNoTransform(DataConstructor node) {
    List<DataConstructor> list = getDataConstructorListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the DataConstructor list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setDataConstructor(DataConstructor node, int i) {
    List<DataConstructor> list = getDataConstructorList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the DataConstructor list.
   * @return The node representing the DataConstructor list.
   * @apilevel high-level
   */
  public List<DataConstructor> getDataConstructorList() {
    List<DataConstructor> list = (List<DataConstructor>) getChild(1);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the DataConstructor list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the DataConstructor list.
   * @apilevel low-level
   */
  public List<DataConstructor> getDataConstructorListNoTransform() {
    return (List<DataConstructor>) getChildNoTransform(1);
  }
  /**
   * Retrieves the DataConstructor list.
   * @return The node representing the DataConstructor list.
   * @apilevel high-level
   */
  public List<DataConstructor> getDataConstructors() {
    return getDataConstructorList();
  }
  /**
   * Retrieves the DataConstructor list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the DataConstructor list.
   * @apilevel low-level
   */
  public List<DataConstructor> getDataConstructorsNoTransform() {
    return getDataConstructorListNoTransform();
  }
  /**
   * @apilevel internal
   */
  protected int isDataType_visited = -1;
  /**
   * @attribute syn
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:15
   */
  public boolean isDataType() {
    ASTNode$State state = state();
    if (isDataType_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isDataType in class: org.jastadd.ast.AST.SynDecl");
    }
    isDataType_visited = state().boundariesCrossed;
    try {  return true;  }
    finally {
      isDataType_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int isFuture_visited = -1;
  /**
   * @attribute syn
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:20
   */
  public boolean isFuture() {
    ASTNode$State state = state();
    if (isFuture_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isFuture in class: org.jastadd.ast.AST.SynDecl");
    }
    isFuture_visited = state().boundariesCrossed;
    try {  return getType().isFutureType();  }
    finally {
      isFuture_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int getType_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getType_computed = false;
  /**
   * @apilevel internal
   */
  protected Type getType_value;
  /**
   * @attribute syn
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:76
   */
  public Type getType() {
    if(getType_computed) {
      return getType_value;
    }
    ASTNode$State state = state();
    if (getType_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getType in class: org.jastadd.ast.AST.SynDecl");
    }
    getType_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getType_value = getType_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getType_computed = true;
    } else {
    }

    getType_visited = -1;
    return getType_value;
  }
  /**
   * @apilevel internal
   */
  private Type getType_compute() {
          return new DataTypeType(this);
      }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:218
   * @apilevel internal
   */
  public ModuleDecl Define_ModuleDecl_getModuleDecl(ASTNode caller, ASTNode child) {
    if (caller == getDataConstructorListNoTransform()) {
      int i = caller.getIndexOfChild(child);
      {
        if (qualifiedName().equals(Constants.STDLIB_NAME+".Exception")) {
            // In general, Exceptions are not declared in the same module as
            // the Exception datatype; this is different from normal
            // constructors as long as ABS doesn't have open datatypes.
            // DataConstructor nodes are added to the Exception DataTypeDecl
            // in Main.java:analyzeModel.
            return getDataConstructor(i).exceptionDecl.getModuleDecl();
        } else {
            return getModuleDecl();
        }
    }
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_ModuleDecl_getModuleDecl(this, caller);
    }
  }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:379
   * @apilevel internal
   */
  public DataTypeDecl Define_DataTypeDecl_getDataTypeDecl(ASTNode caller, ASTNode child) {
    if (caller == getDataConstructorListNoTransform()) {
      int childIndex = caller.getIndexOfChild(child);
      return this;
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_DataTypeDecl_getDataTypeDecl(this, caller);
    }
  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
