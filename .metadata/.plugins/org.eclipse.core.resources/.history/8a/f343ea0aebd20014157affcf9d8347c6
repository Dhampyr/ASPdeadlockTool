/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:41
 * @production InterfaceDecl : {@link TypeDecl} ::= <span class="component">{@link Annotation}*</span> <span class="component">ExtendedInterfaceUse:{@link InterfaceTypeUse}*</span> <span class="component">Body:{@link MethodSig}*</span>;

 */
public class InterfaceDecl extends TypeDecl implements Cloneable, HasTypeHierarchy {
  /**
   * @aspect GenerateErlang
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/erlang/GenerateErlang.jadd:29
   */
  public void generateErlangCode(ErlApp ea) throws IOException {
    //Ignore include data in classes as exports
  }
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:188
   */
  public void generateJava(PrintStream stream) {
        JavaGeneratorHelper.generateHelpLine(this,stream);
        stream.print("public interface " + JavaBackend.getJavaName(this) + " extends " + ABSInterface.class.getName());
        for (InterfaceTypeUse use : getExtendedInterfaceUses()) {
            String iname = JavaBackend.getQualifiedString(((InterfaceType)use.getType()).getDecl());
            stream.print(", " + iname);
        }
        stream.println(" {");

        for (MethodSig s : getBodys()) {
            // Async
            s.generateJava(stream, true);
            stream.println(";");
            // Sync
            s.generateJava(stream, false);
            stream.println(";");
        }

        stream.println("}");
    }
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:226
   */
  public void generateJavaDynamic(PrintStream stream) {
        DynamicJavaGeneratorHelper.generateHelpLine(this,stream);
        stream.print("public interface " + JavaBackend.getJavaName(this) + " extends " + ABSInterface.class.getName());
        for (InterfaceTypeUse use : getExtendedInterfaceUses()) {
            String iname = JavaBackend.getQualifiedString(((InterfaceType)use.getType()).getDecl());
            stream.print(", " + iname);
        }
        stream.println(" {");

        for (MethodSig s : getBodys()) {
            // Async
            s.generateJavaDynamic(stream, true);
            stream.println(";");
            // Sync
            s.generateJavaDynamic(stream, false);
            stream.println(";");
        }

        stream.println("}");
    }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:65
   */
  public void generateMaude(PrintStream stream) {
		stream.println("*** Interface code ...");
	}
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:664
   */
  public void doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        getAnnotationList().doPrettyPrint(stream, formatter, "");
        if (getNumAnnotation() > 0) {
            stream.println();
            formatter.afterStmt();
        }
        stream.print("interface ");
        stream.print(getName());
        if (getNumExtendedInterfaceUse() > 0) {
            stream.print(" extends ");
            getExtendedInterfaceUseList().doPrettyPrint(stream, formatter, ",");
        }
        formatter.beforeOpenBrace();
        stream.println(" {");
        formatter.afterOpenBrace();
        formatter.afterStmt();

        List<MethodSig> ms = getBodys();
        if (ms.getNumChild() > 0) {
            ms.getChild(0).doPrettyPrint(stream, formatter);
            stream.print(";");
            for (int i = 1; i < ms.getNumChild(); i++) {
                stream.println();
                formatter.afterStmt();
                ms.getChild(i).doPrettyPrint(stream, formatter);
                stream.print(";");
            }
        }

        formatter.beforeCloseBrace();
        stream.print("}");
        formatter.afterCloseBrace();
    }
  /**
   * @aspect GenerateProlog
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prolog/GenerateProlog.jadd:439
   */
  public void generateProlog(PrintStream s,ReachabilityInformation reachInfo){
        //generates "interface(name,extendedInterfacesList,methodsSignatureList)."
        s.print("interface(" + quote(getName()) + ",[");
        List<?> extendsList = (List<?>) getChild(1);
        int n = extendsList.getNumChild();
        for (int i = 0; i < n; i++){
            extendsList.getChild(i).generateProlog(s,reachInfo); 
            if (i != n-1) s.print(",");
        }
        s.print("],[");
        List<?> methodsList = (List<?>) getChild(2);
        n = methodsList.getNumChild();
        for (int i = 0; i < n; i++){
            methodsList.getChild(i).generateProlog(s,reachInfo); 
            if (i != n-1) s.print(",");
        }

        s.println("]).");
    }
  /**
   * @aspect ErrorCheck
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/ErrorCheck.jadd:28
   */
  public void collectErrors(SemanticErrorList c) {
    super.collectErrors(c);
    if(hasCycleOnExtendedInterfacesChain())
        c.add(new SemanticError(this,ErrorMessage.CYCLIC_INHERITANCE,getName()));
  }
  /**
   * @aspect DumpTree
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/tests/DumpTree.jadd:82
   */
  public void dumpTree(String indent, java.io.PrintStream pStream) {
	   	pStream.println(indent + this.toString() + "\t\t" +  this.getName());
			String childIndent = indent + "  ";
		for(int i = 0; i < getNumChild(); i++)
			getChildNoTransform(i).dumpTree(childIndent, pStream);
	}
  /**
   * @aspect MyDumpTree
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/tests/MyDumpTree.jadd:137
   */
  protected void printInfo(PrintStream stream)
    {
        stream.print(this.getName());
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:123
   */
  public InterfaceDecl parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:164
   */
  public Collection<MethodSig> getAllMethodSigs() {
        HashMap<String, MethodSig> sigs = new HashMap<String, MethodSig>();
        addAllMethodSigs(sigs, new HashSet<InterfaceDecl>());
        return sigs.values();
    }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:171
   */
  public void addAllMethodSigs(HashMap<String, MethodSig> sigs, HashSet<InterfaceDecl> visitedDecls) {
        if (visitedDecls.contains(this)) 
            return;
        visitedDecls.add(this);

        for (InterfaceTypeUse u : getExtendedInterfaceUses()) {
            Decl d = u.getDecl();
            if (d.isInterface()) {
                InterfaceDecl id = (InterfaceDecl) d;
                id.addAllMethodSigs(sigs,visitedDecls);
            }    
        }

        for (MethodSig s : getBodys()) {
            sigs.put(s.getName(),s);
        }
    }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:326
   */
  public void checkCycle(SemanticErrorList e, InterfaceDecl d) {
        if (this == d) {
            e.add(new TypeError(d, ErrorMessage.CYCLIC_INHERITANCE, getName()));
        } else {
            for (InterfaceTypeUse u : getExtendedInterfaceUses()) {
                Decl id = u.getDecl();
                if (id.isInterface()) {
                    ((InterfaceDecl)id).checkCycle(e,d);
                }
            }
        }
    }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:339
   */
  public void typeCheck(SemanticErrorList e) {
        HashMap<String, MethodSig> names = new HashMap<String, MethodSig>();
        for (MethodSig s : getBodys()) {
            if (names.put(s.getName(),s) != null)
                e.add(new TypeError(s, ErrorMessage.DUPLICATE_METHOD_NAME, s.getName()));
            if (s.getName().equals("run")) {
                TypeCheckerHelper.typeCheckRunMethodSig(e, s);
            }
            s.typeCheck(e);
        }

        HashMap<String, MethodSig> sigs = new HashMap<String, MethodSig>();
        for (InterfaceTypeUse u : getExtendedInterfaceUses()) {
            Decl d = u.getDecl();
            if (!d.isInterface()) {
                e.add(new TypeError(u, ErrorMessage.ONLY_INTERFACE_EXTEND, d.getName()));
            } else {
                InterfaceDecl id = (InterfaceDecl) d;
                id.checkCycle(e,this);

                HashMap<String, MethodSig> mysigs = new HashMap<String, MethodSig>();
                id.addAllMethodSigs(mysigs, new HashSet<InterfaceDecl>());
                checkOverloading(sigs,mysigs,u,e);
                mysigs.putAll(sigs);
                sigs.clear();
                sigs.putAll(mysigs);

                for (MethodSig s : id.getBodys()) {
                    if (names.containsKey(s.getName())) {
                        e.add(new TypeError(names.get(s.getName()), ErrorMessage.NO_METHOD_OVERRIDE, s.getName(), id.getName()));
                    }
                }
            }
        }
    }
  /**
   * returns all supertypes
   * results are not cached
   * @aspect TypeHierarchy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/TypeHierarchy.jadd:46
   */
  public Collection<InterfaceDecl> getSuperTypes() {
        return TypeHierarchyHelper.addSuperTypes(new HashSet<InterfaceDecl>(), this);
    }
  /**
   * @declaredat ASTNode:1
   */
  public InterfaceDecl() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[3];
    setChild(new List(), 0);
    setChild(new List(), 1);
    setChild(new List(), 2);
  }
  /**
   * @declaredat ASTNode:16
   */
  public InterfaceDecl(String p0, List<Annotation> p1, List<InterfaceTypeUse> p2, List<MethodSig> p3) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
    setChild(p3, 2);
  }
  /**
   * @declaredat ASTNode:22
   */
  public InterfaceDecl(beaver.Symbol p0, List<Annotation> p1, List<InterfaceTypeUse> p2, List<MethodSig> p3) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
    setChild(p3, 2);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:31
   */
  protected int numChildren() {
    return 3;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:37
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:43
   */
  public void flushCache() {
    super.flushCache();
    hasCycleOnExtendedInterfacesChain_visited = -1;
    getDirectSuperTypes_visited = -1;
    isInterface_visited = -1;
    lookupMethod_String_visited = null;
    lookupMethod_String_values = null;
    getType_visited = -1;
    getType_computed = false;
    getType_value = null;
    lookup_KindedName_visited = null;
    InterfaceDecl_getDirectSubTypes_visited = -1;
    InterfaceDecl_getDirectSubTypes_computed = false;
    InterfaceDecl_getDirectSubTypes_value = null;
        InterfaceDecl_getDirectSubTypes_contributors = null;
    InterfaceDecl_getSubTypes_visited = -1;
    InterfaceDecl_getSubTypes_computed = false;
    InterfaceDecl_getSubTypes_value = null;
        InterfaceDecl_getSubTypes_contributors = null;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:66
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
    InterfaceDecl_getDirectSubTypes_visited = -1;
    InterfaceDecl_getDirectSubTypes_computed = false;
    InterfaceDecl_getDirectSubTypes_value = null;
        InterfaceDecl_getDirectSubTypes_contributors = null;
    InterfaceDecl_getSubTypes_visited = -1;
    InterfaceDecl_getSubTypes_computed = false;
    InterfaceDecl_getSubTypes_value = null;
        InterfaceDecl_getSubTypes_contributors = null;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:80
   */
  public InterfaceDecl clone() throws CloneNotSupportedException {
    InterfaceDecl node = (InterfaceDecl) super.clone();
    node.hasCycleOnExtendedInterfacesChain_visited = -1;
    node.getDirectSuperTypes_visited = -1;
    node.isInterface_visited = -1;
    node.lookupMethod_String_visited = null;
    node.lookupMethod_String_values = null;
    node.getType_visited = -1;
    node.getType_computed = false;
    node.getType_value = null;
    node.lookup_KindedName_visited = null;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:98
   */
  public InterfaceDecl copy() {
    try {
      InterfaceDecl node = (InterfaceDecl) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:116
   */
  public InterfaceDecl fullCopy() {
    InterfaceDecl tree = (InterfaceDecl) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the lexeme Name.
   * @param value The new value for the lexeme Name.
   * @apilevel high-level
   */
  public void setName(String value) {
    tokenString_Name = value;
  }
  /**
   * JastAdd-internal setter for lexeme Name using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme Name
   * @apilevel internal
   */
  public void setName(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setName is only valid for String lexemes");
    tokenString_Name = (String)symbol.value;
    Namestart = symbol.getStart();
    Nameend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme Name.
   * @return The value for the lexeme Name.
   * @apilevel high-level
   */
  public String getName() {
    return tokenString_Name != null ? tokenString_Name : "";
  }
  /**
   * Replaces the Annotation list.
   * @param list The new list node to be used as the Annotation list.
   * @apilevel high-level
   */
  public void setAnnotationList(List<Annotation> list) {
    setChild(list, 0);
  }
  /**
   * Retrieves the number of children in the Annotation list.
   * @return Number of children in the Annotation list.
   * @apilevel high-level
   */
  public int getNumAnnotation() {
    return getAnnotationList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Annotation list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Annotation list.
   * @apilevel low-level
   */
  public int getNumAnnotationNoTransform() {
    return getAnnotationListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Annotation list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Annotation list.
   * @apilevel high-level
   */
  public Annotation getAnnotation(int i) {
    return (Annotation) getAnnotationList().getChild(i);
  }
  /**
   * Check whether the Annotation list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasAnnotation() {
    return getAnnotationList().getNumChild() != 0;
  }
  /**
   * Append an element to the Annotation list.
   * @param node The element to append to the Annotation list.
   * @apilevel high-level
   */
  public void addAnnotation(Annotation node) {
    List<Annotation> list = (parent == null || state == null) ? getAnnotationListNoTransform() : getAnnotationList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addAnnotationNoTransform(Annotation node) {
    List<Annotation> list = getAnnotationListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Annotation list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setAnnotation(Annotation node, int i) {
    List<Annotation> list = getAnnotationList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Annotation list.
   * @return The node representing the Annotation list.
   * @apilevel high-level
   */
  public List<Annotation> getAnnotationList() {
    List<Annotation> list = (List<Annotation>) getChild(0);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Annotation list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Annotation list.
   * @apilevel low-level
   */
  public List<Annotation> getAnnotationListNoTransform() {
    return (List<Annotation>) getChildNoTransform(0);
  }
  /**
   * Retrieves the Annotation list.
   * @return The node representing the Annotation list.
   * @apilevel high-level
   */
  public List<Annotation> getAnnotations() {
    return getAnnotationList();
  }
  /**
   * Retrieves the Annotation list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Annotation list.
   * @apilevel low-level
   */
  public List<Annotation> getAnnotationsNoTransform() {
    return getAnnotationListNoTransform();
  }
  /**
   * Replaces the ExtendedInterfaceUse list.
   * @param list The new list node to be used as the ExtendedInterfaceUse list.
   * @apilevel high-level
   */
  public void setExtendedInterfaceUseList(List<InterfaceTypeUse> list) {
    setChild(list, 1);
  }
  /**
   * Retrieves the number of children in the ExtendedInterfaceUse list.
   * @return Number of children in the ExtendedInterfaceUse list.
   * @apilevel high-level
   */
  public int getNumExtendedInterfaceUse() {
    return getExtendedInterfaceUseList().getNumChild();
  }
  /**
   * Retrieves the number of children in the ExtendedInterfaceUse list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the ExtendedInterfaceUse list.
   * @apilevel low-level
   */
  public int getNumExtendedInterfaceUseNoTransform() {
    return getExtendedInterfaceUseListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the ExtendedInterfaceUse list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the ExtendedInterfaceUse list.
   * @apilevel high-level
   */
  public InterfaceTypeUse getExtendedInterfaceUse(int i) {
    return (InterfaceTypeUse) getExtendedInterfaceUseList().getChild(i);
  }
  /**
   * Check whether the ExtendedInterfaceUse list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasExtendedInterfaceUse() {
    return getExtendedInterfaceUseList().getNumChild() != 0;
  }
  /**
   * Append an element to the ExtendedInterfaceUse list.
   * @param node The element to append to the ExtendedInterfaceUse list.
   * @apilevel high-level
   */
  public void addExtendedInterfaceUse(InterfaceTypeUse node) {
    List<InterfaceTypeUse> list = (parent == null || state == null) ? getExtendedInterfaceUseListNoTransform() : getExtendedInterfaceUseList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addExtendedInterfaceUseNoTransform(InterfaceTypeUse node) {
    List<InterfaceTypeUse> list = getExtendedInterfaceUseListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the ExtendedInterfaceUse list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setExtendedInterfaceUse(InterfaceTypeUse node, int i) {
    List<InterfaceTypeUse> list = getExtendedInterfaceUseList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the ExtendedInterfaceUse list.
   * @return The node representing the ExtendedInterfaceUse list.
   * @apilevel high-level
   */
  public List<InterfaceTypeUse> getExtendedInterfaceUseList() {
    List<InterfaceTypeUse> list = (List<InterfaceTypeUse>) getChild(1);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the ExtendedInterfaceUse list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the ExtendedInterfaceUse list.
   * @apilevel low-level
   */
  public List<InterfaceTypeUse> getExtendedInterfaceUseListNoTransform() {
    return (List<InterfaceTypeUse>) getChildNoTransform(1);
  }
  /**
   * Retrieves the ExtendedInterfaceUse list.
   * @return The node representing the ExtendedInterfaceUse list.
   * @apilevel high-level
   */
  public List<InterfaceTypeUse> getExtendedInterfaceUses() {
    return getExtendedInterfaceUseList();
  }
  /**
   * Retrieves the ExtendedInterfaceUse list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the ExtendedInterfaceUse list.
   * @apilevel low-level
   */
  public List<InterfaceTypeUse> getExtendedInterfaceUsesNoTransform() {
    return getExtendedInterfaceUseListNoTransform();
  }
  /**
   * Replaces the Body list.
   * @param list The new list node to be used as the Body list.
   * @apilevel high-level
   */
  public void setBodyList(List<MethodSig> list) {
    setChild(list, 2);
  }
  /**
   * Retrieves the number of children in the Body list.
   * @return Number of children in the Body list.
   * @apilevel high-level
   */
  public int getNumBody() {
    return getBodyList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Body list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Body list.
   * @apilevel low-level
   */
  public int getNumBodyNoTransform() {
    return getBodyListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Body list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Body list.
   * @apilevel high-level
   */
  public MethodSig getBody(int i) {
    return (MethodSig) getBodyList().getChild(i);
  }
  /**
   * Check whether the Body list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasBody() {
    return getBodyList().getNumChild() != 0;
  }
  /**
   * Append an element to the Body list.
   * @param node The element to append to the Body list.
   * @apilevel high-level
   */
  public void addBody(MethodSig node) {
    List<MethodSig> list = (parent == null || state == null) ? getBodyListNoTransform() : getBodyList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addBodyNoTransform(MethodSig node) {
    List<MethodSig> list = getBodyListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Body list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setBody(MethodSig node, int i) {
    List<MethodSig> list = getBodyList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Body list.
   * @return The node representing the Body list.
   * @apilevel high-level
   */
  public List<MethodSig> getBodyList() {
    List<MethodSig> list = (List<MethodSig>) getChild(2);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Body list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Body list.
   * @apilevel low-level
   */
  public List<MethodSig> getBodyListNoTransform() {
    return (List<MethodSig>) getChildNoTransform(2);
  }
  /**
   * Retrieves the Body list.
   * @return The node representing the Body list.
   * @apilevel high-level
   */
  public List<MethodSig> getBodys() {
    return getBodyList();
  }
  /**
   * Retrieves the Body list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Body list.
   * @apilevel low-level
   */
  public List<MethodSig> getBodysNoTransform() {
    return getBodyListNoTransform();
  }
  /**
   * @apilevel internal
   */
  protected int hasCycleOnExtendedInterfacesChain_visited = -1;
  /**
   * @attribute syn
   * @aspect TypeHierarchy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/TypeHierarchy.jadd:7
   */
  public boolean hasCycleOnExtendedInterfacesChain() {
    ASTNode$State state = state();
    if (hasCycleOnExtendedInterfacesChain_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: hasCycleOnExtendedInterfacesChain in class: org.jastadd.ast.AST.SynDecl");
    }
    hasCycleOnExtendedInterfacesChain_visited = state().boundariesCrossed;
    try {  return getSuperTypes().contains(this);  }
    finally {
      hasCycleOnExtendedInterfacesChain_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int getDirectSuperTypes_visited = -1;
  /**
   * returns all direct supertypes
   * results are not cached
   * @attribute syn
   * @aspect TypeHierarchy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/TypeHierarchy.jadd:39
   */
  public Collection<InterfaceDecl> getDirectSuperTypes() {
    ASTNode$State state = state();
    if (getDirectSuperTypes_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getDirectSuperTypes in class: org.jastadd.ast.AST.SynDecl");
    }
    getDirectSuperTypes_visited = state().boundariesCrossed;
    try {  return TypeHierarchyHelper.getTypeDecls(getExtendedInterfaceUseList());  }
    finally {
      getDirectSuperTypes_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int isInterface_visited = -1;
  /**
   * @attribute syn
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:17
   */
  public boolean isInterface() {
    ASTNode$State state = state();
    if (isInterface_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isInterface in class: org.jastadd.ast.AST.SynDecl");
    }
    isInterface_visited = state().boundariesCrossed;
    try {  return true;  }
    finally {
      isInterface_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected java.util.Map lookupMethod_String_visited;
  protected java.util.Map lookupMethod_String_values;
  /**
   * @attribute syn
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:492
   */
  public MethodSig lookupMethod(String name) {
    Object _parameters = name;
    if(lookupMethod_String_visited == null) lookupMethod_String_visited = new java.util.HashMap(4);
    if(lookupMethod_String_values == null) lookupMethod_String_values = new java.util.HashMap(4);
    if(lookupMethod_String_values.containsKey(_parameters)) {
      return (MethodSig)lookupMethod_String_values.get(_parameters);
    }
    ASTNode$State state = state();
    if (Integer.valueOf(state().boundariesCrossed).equals(lookupMethod_String_visited.get(_parameters))) {
      throw new RuntimeException("Circular definition of attr: lookupMethod in class: org.jastadd.ast.AST.SynDecl");
    }
    lookupMethod_String_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    MethodSig lookupMethod_String_value = lookupMethod_compute(name);
    if(isFinal && num == state().boundariesCrossed) {
      lookupMethod_String_values.put(_parameters, lookupMethod_String_value);
    } else {
    }

    lookupMethod_String_visited.remove(_parameters);
    return lookupMethod_String_value;
  }
  /**
   * @apilevel internal
   */
  private MethodSig lookupMethod_compute(String name) {
          for (MethodSig d : getBodys()) {
              if (d.getName().equals(name))
                  return d;
          }
  
          for (InterfaceTypeUse u : getExtendedInterfaceUses()) {
              InterfaceDecl id = (InterfaceDecl) u.getDecl();
              MethodSig s = id.lookupMethod(name);
              if (s != null)
                  return s;
          }
  
          return null;
      }
  /**
   * @apilevel internal
   */
  protected int getType_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getType_computed = false;
  /**
   * @apilevel internal
   */
  protected Type getType_value;
  /**
   * @attribute syn
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:83
   */
  public Type getType() {
    if(getType_computed) {
      return getType_value;
    }
    ASTNode$State state = state();
    if (getType_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getType in class: org.jastadd.ast.AST.SynDecl");
    }
    getType_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getType_value = getType_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getType_computed = true;
    } else {
    }

    getType_visited = -1;
    return getType_value;
  }
  /**
   * @apilevel internal
   */
  private Type getType_compute() { 
          return new InterfaceType(this);
      }
  /**
   * @attribute inh
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:273
   */
  public Decl lookup(KindedName name) {
    Object _parameters = name;
    if(lookup_KindedName_visited == null) lookup_KindedName_visited = new java.util.HashMap(4);
    ASTNode$State state = state();
    if (Integer.valueOf(state().boundariesCrossed).equals(lookup_KindedName_visited.get(_parameters))) {
      throw new RuntimeException("Circular definition of attr: lookup in class: org.jastadd.ast.AST.InhDecl");
    }
    lookup_KindedName_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    Decl lookup_KindedName_value = getParent().Define_Decl_lookup(this, null, name);

    lookup_KindedName_visited.remove(_parameters);
    return lookup_KindedName_value;
  }
  /**
   * @apilevel internal
   */
  protected java.util.Map lookup_KindedName_visited;
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/VarResolution.jrag:212
   * @apilevel internal
   */
  public VarOrFieldDecl Define_VarOrFieldDecl_lookupVarOrFieldName(ASTNode caller, ASTNode child, String name, boolean fieldOnly) {
    if (caller == getBodyListNoTransform()) {
      int i = caller.getIndexOfChild(child);
      return getBody(i).locallookupVarOrFieldName(name,fieldOnly);
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_VarOrFieldDecl_lookupVarOrFieldName(this, caller, name, fieldOnly);
    }
  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }  /**
   * returns all direct subtypes of this interfaces:
   * - all interfaces extending this interface
   * - all classes implementing this interface
   * @attribute coll
   * @aspect TypeHierarchy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/TypeHierarchy.jadd:22
   */
  public Collection<HasTypeHierarchy> getDirectSubTypes() {
    if(InterfaceDecl_getDirectSubTypes_computed) {
      return InterfaceDecl_getDirectSubTypes_value;
    }
    ASTNode$State state = state();
    if (InterfaceDecl_getDirectSubTypes_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getDirectSubTypes in class: org.jastadd.ast.AST.CollDecl");
    }
    InterfaceDecl_getDirectSubTypes_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    InterfaceDecl_getDirectSubTypes_value = getDirectSubTypes_compute();
    if(isFinal && num == state().boundariesCrossed) {
      InterfaceDecl_getDirectSubTypes_computed = true;
    } else {
    }

    InterfaceDecl_getDirectSubTypes_visited = -1;
    return InterfaceDecl_getDirectSubTypes_value;
  }
  java.util.Set InterfaceDecl_getDirectSubTypes_contributors;

  /**
   * @apilevel internal
   * @return the contributor set for getDirectSubTypes
   */
  public java.util.Set InterfaceDecl_getDirectSubTypes_contributors() {
    if(InterfaceDecl_getDirectSubTypes_contributors == null)
      InterfaceDecl_getDirectSubTypes_contributors  = new ASTNode$State.IdentityHashSet(4);
    return InterfaceDecl_getDirectSubTypes_contributors;
  }

  /**
   * @apilevel internal
   */
  private Collection<HasTypeHierarchy> getDirectSubTypes_compute() {
    ASTNode node = this;
    while(node.getParent() != null && !(node instanceof Model)) {
      node = node.getParent();
    }
    if(node == null) throw new RuntimeException("Trying to evaluate collection attribute in subtree not attached to main tree");
    Model root = (Model) node;
    root.collect_contributors_InterfaceDecl_getDirectSubTypes();
    InterfaceDecl_getDirectSubTypes_value = new HashSet<HasTypeHierarchy>();
    if(InterfaceDecl_getDirectSubTypes_contributors != null)
    for (java.util.Iterator iter = InterfaceDecl_getDirectSubTypes_contributors.iterator(); iter.hasNext(); ) {
      ASTNode contributor = (ASTNode) iter.next();
      contributor.contributeTo_InterfaceDecl_InterfaceDecl_getDirectSubTypes(InterfaceDecl_getDirectSubTypes_value);
    }
    // TODO: disabled temporarily since collections may not be cached
    //InterfaceDecl_getDirectSubTypes_contributors = null;
    return InterfaceDecl_getDirectSubTypes_value;
  }
  /**
   * @apilevel internal
   */
  protected int InterfaceDecl_getDirectSubTypes_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean InterfaceDecl_getDirectSubTypes_computed = false;
  /**
   * @apilevel internal
   */
  protected Collection<HasTypeHierarchy> InterfaceDecl_getDirectSubTypes_value;
  /**
   * returns all direct subtypes of this interfaces:
   * - all interfaces extending this interface
   * - all classes implementing this interface
   * @attribute coll
   * @aspect TypeHierarchy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/TypeHierarchy.jadd:31
   */
  public Collection<HasTypeHierarchy> getSubTypes() {
    if(InterfaceDecl_getSubTypes_computed) {
      return InterfaceDecl_getSubTypes_value;
    }
    ASTNode$State state = state();
    if (InterfaceDecl_getSubTypes_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getSubTypes in class: org.jastadd.ast.AST.CollDecl");
    }
    InterfaceDecl_getSubTypes_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    InterfaceDecl_getSubTypes_value = getSubTypes_compute();
    if(isFinal && num == state().boundariesCrossed) {
      InterfaceDecl_getSubTypes_computed = true;
    } else {
    }

    InterfaceDecl_getSubTypes_visited = -1;
    return InterfaceDecl_getSubTypes_value;
  }
  java.util.Set InterfaceDecl_getSubTypes_contributors;

  /**
   * @apilevel internal
   * @return the contributor set for getSubTypes
   */
  public java.util.Set InterfaceDecl_getSubTypes_contributors() {
    if(InterfaceDecl_getSubTypes_contributors == null)
      InterfaceDecl_getSubTypes_contributors  = new ASTNode$State.IdentityHashSet(4);
    return InterfaceDecl_getSubTypes_contributors;
  }

  /**
   * @apilevel internal
   */
  private Collection<HasTypeHierarchy> getSubTypes_compute() {
    ASTNode node = this;
    while(node.getParent() != null && !(node instanceof Model)) {
      node = node.getParent();
    }
    if(node == null) throw new RuntimeException("Trying to evaluate collection attribute in subtree not attached to main tree");
    Model root = (Model) node;
    root.collect_contributors_InterfaceDecl_getSubTypes();
    InterfaceDecl_getSubTypes_value = new HashSet<HasTypeHierarchy>();
    if(InterfaceDecl_getSubTypes_contributors != null)
    for (java.util.Iterator iter = InterfaceDecl_getSubTypes_contributors.iterator(); iter.hasNext(); ) {
      ASTNode contributor = (ASTNode) iter.next();
      contributor.contributeTo_InterfaceDecl_InterfaceDecl_getSubTypes(InterfaceDecl_getSubTypes_value);
    }
    // TODO: disabled temporarily since collections may not be cached
    //InterfaceDecl_getSubTypes_contributors = null;
    return InterfaceDecl_getSubTypes_value;
  }
  /**
   * @apilevel internal
   */
  protected int InterfaceDecl_getSubTypes_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean InterfaceDecl_getSubTypes_computed = false;
  /**
   * @apilevel internal
   */
  protected Collection<HasTypeHierarchy> InterfaceDecl_getSubTypes_value;
  protected void collect_contributors_InterfaceDecl_getDirectSubTypes() {
  /**
   * @attribute coll
   * @aspect TypeHierarchy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/TypeHierarchy.jadd:23
   */
      for(java.util.Iterator iter = (getDirectSuperTypes()).iterator(); iter.hasNext(); ) {
        InterfaceDecl ref = (InterfaceDecl) iter.next();
        if (ref != null) {
          ref.InterfaceDecl_getDirectSubTypes_contributors().add(this);
        }
      }
    super.collect_contributors_InterfaceDecl_getDirectSubTypes();
  }
  protected void collect_contributors_InterfaceDecl_getSubTypes() {
  /**
   * @attribute coll
   * @aspect TypeHierarchy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/TypeHierarchy.jadd:32
   */
      for(java.util.Iterator iter = (getSuperTypes()).iterator(); iter.hasNext(); ) {
        InterfaceDecl ref = (InterfaceDecl) iter.next();
        if (ref != null) {
          ref.InterfaceDecl_getSubTypes_contributors().add(this);
        }
      }
    super.collect_contributors_InterfaceDecl_getSubTypes();
  }
  protected void contributeTo_InterfaceDecl_InterfaceDecl_getDirectSubTypes(Collection<HasTypeHierarchy> collection) {
    super.contributeTo_InterfaceDecl_InterfaceDecl_getDirectSubTypes(collection);
    collection.add(this);
  }

  protected void contributeTo_InterfaceDecl_InterfaceDecl_getSubTypes(Collection<HasTypeHierarchy> collection) {
    super.contributeTo_InterfaceDecl_InterfaceDecl_getSubTypes(collection);
    collection.add(this);
  }

}
