/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:214
 * @production LetExp : {@link PureExp} ::= <span class="component">Var:{@link ParamDecl}</span> <span class="component">Val:{@link PureExp}</span> <span class="component">Exp:{@link PureExp}</span>;

 */
public class LetExp extends PureExp implements Cloneable {
  /**
   * @aspect GenerateErlang
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/erlang/GenerateErlang.jadd:588
   */
  @Override
  public void generateErlangCode(ErlangCodeStream ecs,Vars vars){
    ecs.print("(fun (V_"+getVar().getName()+"_0)->");
    Vars v=vars.pass();
    v.nVignoreOverload(getVar());
    getExp().generateErlangCode(ecs,v);
    ecs.print(" end(");
    boolean needTrunc=getVar().getType().isIntType() && getVal().getType().isRatType();
    if (needTrunc)
      ecs.print("rationals:trunc(");
    getVal().generateErlangCode(ecs,vars);
    if (needTrunc)
      ecs.print(")");
    ecs.print("))");
  }
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:819
   */
  public void generateJava(PrintStream stream) {
        stream.print("new " + Let.class.getName());
        String varType = JavaBackend.getQualifiedString(getVar().getType());
        String expType = JavaBackend.getQualifiedString(getExp().getType());
        stream.print("() { public " + expType);
        stream.print(" in(");
        for (String freeVarName : getExp().getFreeVars()) {
            if (freeVarName.equals(getVar().getName()))
                continue;
            // ignore renaming of variables to temp variables...
            String freeVarName2 = freeVarName.replaceFirst("^temp\\$[0-9]+\\$", "");
            VarOrFieldDecl decl = getExp().lookupVarOrFieldName(freeVarName2,false);
            if (decl == null) {
                throw new IllegalArgumentException("Variable " + freeVarName + " cannot be resolved");
            }
            String freeVarType = JavaBackend.getQualifiedString(decl.getType());
            stream.print("final " + freeVarType + " " + JavaBackend.getVariableName(freeVarName));
            stream.print(", ");
        }

        stream.print("final " + varType + " " + JavaBackend.getVariableName(getVar().getName()));
        stream.print(") { ");
        stream.print("return ");
        getExp().generateJava(stream);
        stream.print("; }}.in(");
        for (String freeVarName : getExp().getFreeVars()) {
            if (freeVarName.equals(getVar().getName()))
                continue;
            stream.print(freeVarName);
            stream.print(", ");
        }
        getVal().generateJava(stream);
        if (getVar().getType().isIntType() && getVal().getType().isRatType()) {
            stream.print(".truncate()");
        }
        stream.print(")");
    }
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:847
   */
  public void generateJavaDynamic(PrintStream stream) {
        stream.print("new " + Let.class.getName());
        String varType = JavaBackend.getQualifiedString(getVar().getType());
        String expType = JavaBackend.getQualifiedString(getExp().getType());
        stream.print("() { public " + expType);
        stream.print(" in(");
        for (String freeVarName : getExp().getFreeVars()) {
            if (freeVarName.equals(getVar().getName()))
                continue;
            // ignore renaming of variables to temp variables...
            String freeVarName2 = freeVarName.replaceFirst("^temp\\$[0-9] + \\$", "");
            VarOrFieldDecl decl = getExp().lookupVarOrFieldName(freeVarName2,false);
            if (decl == null) {
                throw new IllegalArgumentException("Variable " + freeVarName + " cannot be resolved");
            }
            String freeVarType = JavaBackend.getQualifiedString(decl.getType());
            stream.print("final " + freeVarType + " " + JavaBackend.getVariableName(freeVarName));
            stream.print(", ");
        }

        stream.print("final " + varType + " " + JavaBackend.getVariableName(getVar().getName()));
        stream.print(") { ");
        stream.print("return ");
        getExp().generateJavaDynamic(stream);
        stream.print("; }}.in(");
        for (String freeVarName : getExp().getFreeVars()) {
            if (freeVarName.equals(getVar().getName()))
                continue;
            stream.print(freeVarName);
            stream.print(", ");
        }
        getVal().generateJavaDynamic(stream);
        if (getVar().getType().isIntType() && getVal().getType().isRatType()) {
            stream.print(".truncate()");
        }
        stream.print(")");

    }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:446
   */
  public void generateMaude(PrintStream stream) {
        boolean inlist = false;
        boolean needConversion = getVar().getType().isIntType()
            && getVal().getType().isRatType() ;
        stream.print("( let '" + getVar().getName() + " = ");
        if (needConversion) stream.print("\"ABS.StdLib.truncate\"(");
        getVal().generateMaude(stream);
        if (needConversion) stream.print(")");
        stream.print("in ");
        getExp().generateMaude(stream);
        stream.print(" )");
    }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:458
   */
  public int numberOfRandom(Set<String> visitedFunctions) {
        return getVal().numberOfRandom(visitedFunctions)
            + getExp().numberOfRandom(visitedFunctions);
    }
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:1051
   */
  public void doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("let ( ");
        getVar().doPrettyPrint(stream, formatter);
        stream.print(" ) = ");
        getVal().doPrettyPrint(stream, formatter);
        stream.print(" in ");
        getExp().doPrettyPrint(stream, formatter);
    }
  /**
   * @aspect GenerateProlog
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prolog/GenerateProlog.jadd:357
   */
  public void generateProlog(PrintStream s,ReachabilityInformation reachInfo){
        s.print("let(");
        getChild(0).generateProlog(s,reachInfo);
        s.print(",");
        getChild(1).generateProlog(s,reachInfo);
        s.print(",");
        getChild(2).generateProlog(s,reachInfo);
        s.print(")");        
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:129
   */
  public LetExp parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:859
   */
  public void typeCheck(SemanticErrorList e) {  
        getVar().typeCheck(e);
        getVal().typeCheck(e);
        getExp().typeCheck(e);
        TypeCheckerHelper.checkAssignment(e,this,getVar().getAccess().getType(),getVal());
    }
  /**
   * @declaredat ASTNode:1
   */
  public LetExp() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[3];
  }
  /**
   * @declaredat ASTNode:13
   */
  public LetExp(ParamDecl p0, PureExp p1, PureExp p2) {
    setChild(p0, 0);
    setChild(p1, 1);
    setChild(p2, 2);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:21
   */
  protected int numChildren() {
    return 3;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:27
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:33
   */
  public void flushCache() {
    super.flushCache();
    getFreeVars_visited = -1;
    getFreeVars_computed = false;
    getFreeVars_value = null;
    getFields_FieldUseInfo_visited = null;
    getFields_FieldUseInfo_values = null;
    getType_visited = -1;
    getType_computed = false;
    getType_value = null;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:47
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:53
   */
  public LetExp clone() throws CloneNotSupportedException {
    LetExp node = (LetExp) super.clone();
    node.getFreeVars_visited = -1;
    node.getFreeVars_computed = false;
    node.getFreeVars_value = null;
    node.getFields_FieldUseInfo_visited = null;
    node.getFields_FieldUseInfo_values = null;
    node.getType_visited = -1;
    node.getType_computed = false;
    node.getType_value = null;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:70
   */
  public LetExp copy() {
    try {
      LetExp node = (LetExp) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:88
   */
  public LetExp fullCopy() {
    LetExp tree = (LetExp) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the Var child.
   * @param node The new node to replace the Var child.
   * @apilevel high-level
   */
  public void setVar(ParamDecl node) {
    setChild(node, 0);
  }
  /**
   * Retrieves the Var child.
   * @return The current node used as the Var child.
   * @apilevel high-level
   */
  public ParamDecl getVar() {
    return (ParamDecl) getChild(0);
  }
  /**
   * Retrieves the Var child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the Var child.
   * @apilevel low-level
   */
  public ParamDecl getVarNoTransform() {
    return (ParamDecl) getChildNoTransform(0);
  }
  /**
   * Replaces the Val child.
   * @param node The new node to replace the Val child.
   * @apilevel high-level
   */
  public void setVal(PureExp node) {
    setChild(node, 1);
  }
  /**
   * Retrieves the Val child.
   * @return The current node used as the Val child.
   * @apilevel high-level
   */
  public PureExp getVal() {
    return (PureExp) getChild(1);
  }
  /**
   * Retrieves the Val child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the Val child.
   * @apilevel low-level
   */
  public PureExp getValNoTransform() {
    return (PureExp) getChildNoTransform(1);
  }
  /**
   * Replaces the Exp child.
   * @param node The new node to replace the Exp child.
   * @apilevel high-level
   */
  public void setExp(PureExp node) {
    setChild(node, 2);
  }
  /**
   * Retrieves the Exp child.
   * @return The current node used as the Exp child.
   * @apilevel high-level
   */
  public PureExp getExp() {
    return (PureExp) getChild(2);
  }
  /**
   * Retrieves the Exp child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the Exp child.
   * @apilevel low-level
   */
  public PureExp getExpNoTransform() {
    return (PureExp) getChildNoTransform(2);
  }
  /**
   * @apilevel internal
   */
  protected int getFreeVars_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getFreeVars_computed = false;
  /**
   * @apilevel internal
   */
  protected Set<String> getFreeVars_value;
  /**
   * @attribute syn
   * @aspect VarUsage
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/FreeVars.jrag:25
   */
  public Set<String> getFreeVars() {
    if(getFreeVars_computed) {
      return getFreeVars_value;
    }
    ASTNode$State state = state();
    if (getFreeVars_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getFreeVars in class: org.jastadd.ast.AST.SynDecl");
    }
    getFreeVars_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getFreeVars_value = getFreeVars_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getFreeVars_computed = true;
    } else {
    }

    getFreeVars_visited = -1;
    return getFreeVars_value;
  }
  /**
   * @apilevel internal
   */
  private Set<String> getFreeVars_compute() {
  		HashSet<String> res = new HashSet<String>();
  		res.addAll(getExp().getFreeVars());
  		res.remove(getVar().getName());
  		res.addAll(getVal().getFreeVars());
  		return res;				
  	}
  /**
   * @apilevel internal
   */
  protected java.util.Map getFields_FieldUseInfo_visited;
  protected java.util.Map getFields_FieldUseInfo_values;
  /**
   * @attribute syn
   * @aspect FieldUsage
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/FieldAccesses.jrag:94
   */
  public FieldUseInfo getFields(FieldUseInfo fui) {
    Object _parameters = fui;
    if(getFields_FieldUseInfo_visited == null) getFields_FieldUseInfo_visited = new java.util.HashMap(4);
    if(getFields_FieldUseInfo_values == null) getFields_FieldUseInfo_values = new java.util.HashMap(4);
    if(getFields_FieldUseInfo_values.containsKey(_parameters)) {
      return (FieldUseInfo)getFields_FieldUseInfo_values.get(_parameters);
    }
    ASTNode$State state = state();
    if (Integer.valueOf(state().boundariesCrossed).equals(getFields_FieldUseInfo_visited.get(_parameters))) {
      throw new RuntimeException("Circular definition of attr: getFields in class: org.jastadd.ast.AST.SynDecl");
    }
    getFields_FieldUseInfo_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    FieldUseInfo getFields_FieldUseInfo_value = getFields_compute(fui);
    if(isFinal && num == state().boundariesCrossed) {
      getFields_FieldUseInfo_values.put(_parameters, getFields_FieldUseInfo_value);
    } else {
    }

    getFields_FieldUseInfo_visited.remove(_parameters);
    return getFields_FieldUseInfo_value;
  }
  /**
   * @apilevel internal
   */
  private FieldUseInfo getFields_compute(FieldUseInfo fui) {
  		fui.merge(getExp());
  		return new FieldUseInfo(fui.merge(getVal()));
  	}
  /**
   * @apilevel internal
   */
  protected int getType_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getType_computed = false;
  /**
   * @apilevel internal
   */
  protected Type getType_value;
  /**
   * @attribute syn
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:280
   */
  public Type getType() {
    if(getType_computed) {
      return getType_value;
    }
    ASTNode$State state = state();
    if (getType_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getType in class: org.jastadd.ast.AST.SynDecl");
    }
    getType_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getType_value = getType_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getType_computed = true;
    } else {
    }

    getType_visited = -1;
    return getType_value;
  }
  /**
   * @apilevel internal
   */
  private Type getType_compute() {  return getExp().getType();  }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/VarResolution.jrag:253
   * @apilevel internal
   */
  public VarOrFieldDecl Define_VarOrFieldDecl_lookupVarOrFieldName(ASTNode caller, ASTNode child, String name, boolean fieldOnly) {
    if (caller == getExpNoTransform()){
        if (!fieldOnly && getVar().getName().equals(name))
            return getVar();
        return lookupVarOrFieldName(name, fieldOnly);
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_VarOrFieldDecl_lookupVarOrFieldName(this, caller, name, fieldOnly);
    }
  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
