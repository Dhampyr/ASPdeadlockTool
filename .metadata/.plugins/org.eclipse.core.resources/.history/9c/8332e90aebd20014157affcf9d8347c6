/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/mTVL.ast:17
 * @production Group : {@link ASTNode} ::= <span class="component">Card:{@link Cardinality}</span> <span class="component">{@link FNode}*</span>;

 */
public class Group extends ASTNode<ASTNode> implements Cloneable {
  /**
   * @aspect CSP
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/mtvl/CSP.jadd:161
   */
  public void includeGroupConstraints(ChocoSolver s, String varName) {
        IntegerVariable fvar = s.getVar(varName);
        int nfeats = getNumFNode();
        String fname = "";
        IntegerVariable[] feats = new IntegerVariable[nfeats];
        for (int i = 0; i < nfeats; i++) {
            fname = getFNode(i).getFeat().getName();
            IntegerVariable v = null;
            // add intermediate variable $f if f is optional.
            if (getFNode(i) instanceof OptFeat) {
                v = Choco.makeBooleanVar("$"+fname);
                // f -> $f
                s.addConstraint(
                        Choco.implies(ChocoSolver.isTrue(s.getVar(fname)),ChocoSolver.isTrue(v)));
            } else {
                v = s.getVar(fname);
            }
            // f -> fparent
            s.addConstraint(Choco.implies(ChocoSolver.isTrue(v),ChocoSolver.isTrue(fvar)));
            // rec - FNode
            s.addConstraint(getFNode(i).collectConstraints(s));
            feats[i] = v;
            // f -> $f /\ f -> fparent /\ [f]
        }
        // n1 <= $f1 + ... + $fn <= n2
        if      (getCard() instanceof AllOf)
            // f ->  #feats = nfeats
            s.addConstraint(Choco.implies(ChocoSolver.isTrue(fvar),
                    ChocoSolver.eqeq(Choco.sum(feats),nfeats)));
        else if (getCard() instanceof Minim)
            // f ->  #feats >= from
            s.addConstraint(Choco.implies(
                    ChocoSolver.isTrue(fvar),
                    Choco.geq(Choco.sum(feats),((Minim) getCard()).getCFrom())));
        else {
            // f ->  to >= #feats >= from
            s.addConstraint(Choco.implies(
                    ChocoSolver.isTrue(fvar),
                    Choco.geq(Choco.sum(feats),((CRange) getCard()).getCFrom())));
            s.addConstraint(Choco.implies(
                    ChocoSolver.isTrue(fvar),
                    Choco.leq(Choco.sum(feats),((CRange) getCard()).getCTo())));
        }
    }
  /**
   * @aspect OptOnlyInAllOf
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/mtvl/OptOnlyInAllOf.jadd:3
   */
  public void collectErrors(SemanticErrorList c) {  
    super.collectErrors(c);
      if (!getCard().isAllOf())
        for (FNode fn: getFNodes())
          if (fn.isOpt())
        	  c.add(new SemanticError(fn,ErrorMessage.OPT_NOT_IN_ALLOF,fn.getFeat().getName()));         
  }
  /**
   * @aspect Visualization
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/mtvl/Visualization.jadd:37
   */
  public void printFM(String indentation) {
        for (FNode fnode : getFNodeList()){
    	    	fnode.printFM(indentation + "\t");
    	}
  }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:102
   */
  public Group parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @declaredat ASTNode:1
   */
  public Group() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[2];
    setChild(new List(), 1);
  }
  /**
   * @declaredat ASTNode:14
   */
  public Group(Cardinality p0, List<FNode> p1) {
    setChild(p0, 0);
    setChild(p1, 1);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:21
   */
  protected int numChildren() {
    return 2;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:27
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:33
   */
  public void flushCache() {
    super.flushCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:39
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:45
   */
  public Group clone() throws CloneNotSupportedException {
    Group node = (Group) super.clone();
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:54
   */
  public Group copy() {
    try {
      Group node = (Group) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:72
   */
  public Group fullCopy() {
    Group tree = (Group) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the Card child.
   * @param node The new node to replace the Card child.
   * @apilevel high-level
   */
  public void setCard(Cardinality node) {
    setChild(node, 0);
  }
  /**
   * Retrieves the Card child.
   * @return The current node used as the Card child.
   * @apilevel high-level
   */
  public Cardinality getCard() {
    return (Cardinality) getChild(0);
  }
  /**
   * Retrieves the Card child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the Card child.
   * @apilevel low-level
   */
  public Cardinality getCardNoTransform() {
    return (Cardinality) getChildNoTransform(0);
  }
  /**
   * Replaces the FNode list.
   * @param list The new list node to be used as the FNode list.
   * @apilevel high-level
   */
  public void setFNodeList(List<FNode> list) {
    setChild(list, 1);
  }
  /**
   * Retrieves the number of children in the FNode list.
   * @return Number of children in the FNode list.
   * @apilevel high-level
   */
  public int getNumFNode() {
    return getFNodeList().getNumChild();
  }
  /**
   * Retrieves the number of children in the FNode list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the FNode list.
   * @apilevel low-level
   */
  public int getNumFNodeNoTransform() {
    return getFNodeListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the FNode list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the FNode list.
   * @apilevel high-level
   */
  public FNode getFNode(int i) {
    return (FNode) getFNodeList().getChild(i);
  }
  /**
   * Check whether the FNode list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasFNode() {
    return getFNodeList().getNumChild() != 0;
  }
  /**
   * Append an element to the FNode list.
   * @param node The element to append to the FNode list.
   * @apilevel high-level
   */
  public void addFNode(FNode node) {
    List<FNode> list = (parent == null || state == null) ? getFNodeListNoTransform() : getFNodeList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addFNodeNoTransform(FNode node) {
    List<FNode> list = getFNodeListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the FNode list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setFNode(FNode node, int i) {
    List<FNode> list = getFNodeList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the FNode list.
   * @return The node representing the FNode list.
   * @apilevel high-level
   */
  public List<FNode> getFNodeList() {
    List<FNode> list = (List<FNode>) getChild(1);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the FNode list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the FNode list.
   * @apilevel low-level
   */
  public List<FNode> getFNodeListNoTransform() {
    return (List<FNode>) getChildNoTransform(1);
  }
  /**
   * Retrieves the FNode list.
   * @return The node representing the FNode list.
   * @apilevel high-level
   */
  public List<FNode> getFNodes() {
    return getFNodeList();
  }
  /**
   * Retrieves the FNode list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the FNode list.
   * @apilevel low-level
   */
  public List<FNode> getFNodesNoTransform() {
    return getFNodeListNoTransform();
  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
