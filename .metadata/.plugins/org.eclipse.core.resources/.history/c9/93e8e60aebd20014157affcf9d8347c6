/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:216
 * @production CaseExp : {@link PureExp} ::= <span class="component">Expr:{@link PureExp}</span> <span class="component">Branch:{@link CaseBranch}*</span>;

 */
public class CaseExp extends PureExp implements Cloneable {
  /**
   * @aspect GenerateErlang
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/erlang/GenerateErlang.jadd:707
   */
  @Override
  public void generateErlangCode(ErlangCodeStream external,Vars vars){
    //Needs this external stream
    external.println("begin");
    external.incIndent();
    StringWriter sw = new StringWriter();
    ErlangCodeStream ecs = new ErlangCodeStream(new WriterOutputStream(sw, Charset.forName("UTF-8")),"");
    ecs.print("case ");
    ecs.setIndent(external.getIndent());
    getExpr().generateErlangCode(ecs, vars);
    ecs.println(" of ");
    ecs.incIndent();
    boolean first = true;
    for (CaseBranch b : getBranchs()) {
        Vars v = vars.pass();
        if (!first)
            ecs.println(";");
        first = false;
        b.getLeft().generateErlangCode(external, ecs, v);
        ecs.print("->");
        b.getRight().generateErlangCode(ecs, v);
        vars.hideIntroduced(v);
    }
    ecs.println();
    ecs.decIndent();
    ecs.print("end");
    ecs.close();
    external.println(sw.toString());
    external.decIndent();
    external.print("end");
  }
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:641
   */
  public void generateJava(PrintStream stream) {
        stream.print("new " + Case.class.getName());
        String varType = JavaBackend.getQualifiedString(getExpr().getType());
        String expType = JavaBackend.getQualifiedString(getType());
        /*
       stream.print(varType);
       stream.print(',');
       stream.println(expType + ">");
         */
        stream.println("() {");
        stream.print("public " + expType + " of(");
        for (String freeVarName : getFreeVars()) {
            VarOrFieldDecl decl = lookupVarOrFieldName(freeVarName,false);
            String freeVarType = JavaBackend.getQualifiedString(decl.getType());
            stream.print("final " + freeVarType + " " + JavaBackend.getVariableName(freeVarName));
            stream.print(", ");
        }

        stream.println("final " + varType + " __ABS_value) {");
        int i = 0;
        for (CaseBranch b : getBranchs()) {
            String bindingName = "__ABS_binding" + i;
            stream.print("final " + PatternBinding.class.getName() + " " + bindingName + " = ");
            Pattern pattern = b.getLeft();
            pattern.generateJava(stream);
            stream.println(".match(__ABS_value);");
            stream.print("if (" + bindingName + " != null) ");
            stream.println("return new Object() {");
            stream.print("public " + expType + " execute(");
            java.util.List<PatternVar> freeVars = pattern.getFreePatternVars();
            boolean first = true;
            for (PatternVar var : freeVars) {
                if (first) first = false;
                else stream.print(", ");
                stream.print("final " + JavaBackend.getQualifiedString(var.getType()));
                stream.print(" " + JavaBackend.getVariableName(var.getVar().getName()));
            }
            stream.print(") { return ");
            b.getRight().generateJava(stream);
            stream.println("; }");
            stream.print("}.execute(");
            first = true;
            for (int j = 0; j < freeVars.size(); j++) {
                if (first) first = false;
                else stream.print(",");
                stream.print("(");
                stream.print(JavaBackend.getQualifiedString(freeVars.get(j).getType()));
                stream.print(") ");
                stream.print(bindingName + ".getBinding(" + j + ")");
            }
            stream.println(");");
            i++;
        }
        Position pos = new Position(this);
        stream.print("throw new " + UnmatchedCaseException.class.getName() + "(\"");
        stream.println(pos.getPositionString() + " value \" + __ABS_value + \" did not match any pattern.\");");
        stream.println("}");
        stream.print("}.of(");
        for (String freeVarName : getFreeVars()) {
            stream.print(JavaBackend.getVariableName(freeVarName));
            stream.print(", ");
        }

        getExpr().generateJava(stream);
        stream.print(")");
    }
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:655
   */
  public void generateJavaDynamic(PrintStream stream) {
        stream.print("new " + Case.class.getName());
        String varType = JavaBackend.getQualifiedString(getExpr().getType());
        String expType = JavaBackend.getQualifiedString(getType());
        /*
       stream.print(varType);
       stream.print(',');
       stream.println(expType + ">");
         */
        stream.println("() {");
        stream.print("public " + expType + " of(");
        for (String freeVarName : getFreeVars()) {
            VarOrFieldDecl decl = lookupVarOrFieldName(freeVarName,false);
            String freeVarType = JavaBackend.getQualifiedString(decl.getType());
            stream.print("final " + freeVarType + " " + JavaBackend.getVariableName(freeVarName));
            stream.print(", ");
        }

        stream.println("final " + varType + " __ABS_value) {");
        int i = 0;
        for (CaseBranch b : getBranchs()) {
            String bindingName = "__ABS_binding" + i;
            stream.print("final " + PatternBinding.class.getName() + " " + bindingName + " = ");
            Pattern pattern = b.getLeft();
            pattern.generateJavaDynamic(stream);
            stream.println(".match(__ABS_value);");
            stream.print("if (" + bindingName + " != null) ");
            stream.println("return new Object() {");
            stream.print("public " + expType + " execute(");
            java.util.List<PatternVar> freeVars = pattern.getFreePatternVars();
            boolean first = true;
            for (PatternVar var : freeVars) {
                if (first) 
                    first = false;
                else 
                    stream.print(", ");
                stream.print("final " + JavaBackend.getQualifiedString(var.getType()));
                stream.print(" " + JavaBackend.getVariableName(var.getVar().getName()));
            }
            stream.print(") { return ");
            b.getRight().generateJavaDynamic(stream);
            stream.println("; }");
            stream.print("}.execute(");
            first = true;
            for (int j = 0; j < freeVars.size(); j++) {
                if (first) first = false;
                else stream.print(", ");
                stream.print("(");
                stream.print(JavaBackend.getQualifiedString(freeVars.get(j).getType()));
                stream.print(") ");
                stream.print(bindingName + ".getBinding(" + j + ")");
            }
            stream.println(");");
            i++;
        }
        Position pos = new Position(this);
        stream.print("throw new " + UnmatchedCaseException.class.getName() + "(\"");
        stream.println(pos.getPositionString() + " value \" + __ABS_value + \" did not match any pattern.\");");
        stream.println("}");
        stream.print("}.of(");
        for (String freeVarName : getFreeVars()) {
            stream.print(JavaBackend.getVariableName(freeVarName));
            stream.print(", ");
        }

        getExpr().generateJavaDynamic(stream);
        stream.print(")");
    }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:478
   */
  public void generateMaude(PrintStream stream) {
        boolean inlist = false;
		stream.print("case " );
		getExpr().generateMaude(stream);
		stream.print("of { ");
		for (CaseBranch branch : getBranchs()) {
            if (inlist) stream.print("; "); else inlist = true;
			branch.generateMaude(stream);
		}
		stream.print("} ");
	}
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:489
   */
  public int numberOfRandom(Set<String> visitedFunctions) {
        int acc = 0;
        for (CaseBranch branch : getBranchs()) {
            acc = java.lang.Math.max(acc, branch.numberOfRandom(visitedFunctions));
        }
        return acc + getExpr().numberOfRandom(visitedFunctions);
    }
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:978
   */
  public void doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("case ");
        getExpr().doPrettyPrint(stream, formatter);
        formatter.beforeOpenBrace();
        stream.println(" {");
        formatter.afterOpenBrace();
        for (CaseBranch b : getBranchList()) {
            formatter.afterStmt();
            b.getLeft().doPrettyPrint(stream, formatter);
            stream.print(" => ");
            b.getRight().doPrettyPrint(stream, formatter);
            stream.println(";");
        }
        formatter.beforeCloseBrace();
        formatter.afterStmt();
        stream.print("}");
        formatter.afterCloseBrace();
    }
  /**
   * @aspect GenerateProlog
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prolog/GenerateProlog.jadd:370
   */
  public void generateProlog(PrintStream s,ReachabilityInformation reachInfo){
        s.print("case(");
        getChild(0).generateProlog(s,reachInfo);
        s.print(",");
        List<?> branches = (List<?>) getChild(1); // ? = CaseBranch
        int n = branches.getNumChild();
        s.print("[");
        for (int i = 0; i < n; i++){
            branches.getChild(i).generateProlog(s,reachInfo);
            if (i != n-1) s.print(",");
        }
        s.print("])");
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:46
   */
  public CaseExp parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:798
   */
  public void refined_TypeChecker_CaseExp_typeCheck(SemanticErrorList e) {  
        getExpr().typeCheck(e);
        Type et = getExpr().getType();
        if (!et.isDataType()) {
            e.add(new TypeError(getExpr(),ErrorMessage.CASE_NO_DATATYPE,et));
            return;
        }
        Type t = getType();
        for (CaseBranch b : getBranchs()) {
            b.typeCheck(e,(DataTypeType) et);
            Type t2 = b.getType();
            if (!t2.isAssignable(t)) {
                e.add(new TypeError(this,ErrorMessage.BRANCH_INCOMPARABLE_TYPE,t,t2));
            }
        }
    }
  /**
   * @declaredat ASTNode:1
   */
  public CaseExp() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[2];
    setChild(new List(), 1);
  }
  /**
   * @declaredat ASTNode:14
   */
  public CaseExp(PureExp p0, List<CaseBranch> p1) {
    setChild(p0, 0);
    setChild(p1, 1);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:21
   */
  protected int numChildren() {
    return 2;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:27
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:33
   */
  public void flushCache() {
    super.flushCache();
    getFreeVars_visited = -1;
    getFreeVars_computed = false;
    getFreeVars_value = null;
    getFields_FieldUseInfo_visited = null;
    getFields_FieldUseInfo_values = null;
    getType_visited = -1;
    getType_computed = false;
    getType_value = null;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:47
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:53
   */
  public CaseExp clone() throws CloneNotSupportedException {
    CaseExp node = (CaseExp) super.clone();
    node.getFreeVars_visited = -1;
    node.getFreeVars_computed = false;
    node.getFreeVars_value = null;
    node.getFields_FieldUseInfo_visited = null;
    node.getFields_FieldUseInfo_values = null;
    node.getType_visited = -1;
    node.getType_computed = false;
    node.getType_value = null;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:70
   */
  public CaseExp copy() {
    try {
      CaseExp node = (CaseExp) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:88
   */
  public CaseExp fullCopy() {
    CaseExp tree = (CaseExp) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the Expr child.
   * @param node The new node to replace the Expr child.
   * @apilevel high-level
   */
  public void setExpr(PureExp node) {
    setChild(node, 0);
  }
  /**
   * Retrieves the Expr child.
   * @return The current node used as the Expr child.
   * @apilevel high-level
   */
  public PureExp getExpr() {
    return (PureExp) getChild(0);
  }
  /**
   * Retrieves the Expr child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the Expr child.
   * @apilevel low-level
   */
  public PureExp getExprNoTransform() {
    return (PureExp) getChildNoTransform(0);
  }
  /**
   * Replaces the Branch list.
   * @param list The new list node to be used as the Branch list.
   * @apilevel high-level
   */
  public void setBranchList(List<CaseBranch> list) {
    setChild(list, 1);
  }
  /**
   * Retrieves the number of children in the Branch list.
   * @return Number of children in the Branch list.
   * @apilevel high-level
   */
  public int getNumBranch() {
    return getBranchList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Branch list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Branch list.
   * @apilevel low-level
   */
  public int getNumBranchNoTransform() {
    return getBranchListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Branch list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Branch list.
   * @apilevel high-level
   */
  public CaseBranch getBranch(int i) {
    return (CaseBranch) getBranchList().getChild(i);
  }
  /**
   * Check whether the Branch list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasBranch() {
    return getBranchList().getNumChild() != 0;
  }
  /**
   * Append an element to the Branch list.
   * @param node The element to append to the Branch list.
   * @apilevel high-level
   */
  public void addBranch(CaseBranch node) {
    List<CaseBranch> list = (parent == null || state == null) ? getBranchListNoTransform() : getBranchList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addBranchNoTransform(CaseBranch node) {
    List<CaseBranch> list = getBranchListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Branch list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setBranch(CaseBranch node, int i) {
    List<CaseBranch> list = getBranchList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Branch list.
   * @return The node representing the Branch list.
   * @apilevel high-level
   */
  public List<CaseBranch> getBranchList() {
    List<CaseBranch> list = (List<CaseBranch>) getChild(1);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Branch list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Branch list.
   * @apilevel low-level
   */
  public List<CaseBranch> getBranchListNoTransform() {
    return (List<CaseBranch>) getChildNoTransform(1);
  }
  /**
   * Retrieves the Branch list.
   * @return The node representing the Branch list.
   * @apilevel high-level
   */
  public List<CaseBranch> getBranchs() {
    return getBranchList();
  }
  /**
   * Retrieves the Branch list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Branch list.
   * @apilevel low-level
   */
  public List<CaseBranch> getBranchsNoTransform() {
    return getBranchListNoTransform();
  }
  /**
   * @aspect TypeCheckerExtension
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/ext/TypeCheckerExtension.jadd:301
   */
    public void typeCheck(SemanticErrorList e) {  
         int size = e.size();
         refined_TypeChecker_CaseExp_typeCheck(e);
         if (e.size() > size) return;

         getModel().getTypeExt().checkCaseExp(this);
    }
  /**
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:235
   */
  private Type refined_Typing_CaseExp_getType()
{
   	 Type mostGeneralType = null;
   	 for (CaseBranch b : getBranchs()) {
   		 if (mostGeneralType == null) {
   			 mostGeneralType = b.getType();
   		 } else {
   			 Type t2 = b.getType();
   			 if (mostGeneralType.isAssignable(t2)) {
   				 mostGeneralType = t2;
   			 } 
   		 }
   	 }
   	 if (mostGeneralType == null)
   	     return UnknownType.INSTANCE;
   	 return mostGeneralType;
    }
  /**
   * @apilevel internal
   */
  protected int getFreeVars_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getFreeVars_computed = false;
  /**
   * @apilevel internal
   */
  protected Set<String> getFreeVars_value;
  /**
   * @attribute syn
   * @aspect VarUsage
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/FreeVars.jrag:41
   */
  public Set<String> getFreeVars() {
    if(getFreeVars_computed) {
      return getFreeVars_value;
    }
    ASTNode$State state = state();
    if (getFreeVars_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getFreeVars in class: org.jastadd.ast.AST.SynDecl");
    }
    getFreeVars_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getFreeVars_value = getFreeVars_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getFreeVars_computed = true;
    } else {
    }

    getFreeVars_visited = -1;
    return getFreeVars_value;
  }
  /**
   * @apilevel internal
   */
  private Set<String> getFreeVars_compute() {
  		HashSet<String> res = new HashSet<String>();
  		res.addAll(getExpr().getFreeVars());
  		for (CaseBranch b : getBranchs()) {
  		   res.addAll(b.getFreeVars());
  		}
  		return res;
  	}
  /**
   * @apilevel internal
   */
  protected java.util.Map getFields_FieldUseInfo_visited;
  protected java.util.Map getFields_FieldUseInfo_values;
  /**
   * @attribute syn
   * @aspect FieldUsage
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/FieldAccesses.jrag:139
   */
  public FieldUseInfo getFields(FieldUseInfo fui) {
    Object _parameters = fui;
    if(getFields_FieldUseInfo_visited == null) getFields_FieldUseInfo_visited = new java.util.HashMap(4);
    if(getFields_FieldUseInfo_values == null) getFields_FieldUseInfo_values = new java.util.HashMap(4);
    if(getFields_FieldUseInfo_values.containsKey(_parameters)) {
      return (FieldUseInfo)getFields_FieldUseInfo_values.get(_parameters);
    }
    ASTNode$State state = state();
    if (Integer.valueOf(state().boundariesCrossed).equals(getFields_FieldUseInfo_visited.get(_parameters))) {
      throw new RuntimeException("Circular definition of attr: getFields in class: org.jastadd.ast.AST.SynDecl");
    }
    getFields_FieldUseInfo_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    FieldUseInfo getFields_FieldUseInfo_value = getFields_compute(fui);
    if(isFinal && num == state().boundariesCrossed) {
      getFields_FieldUseInfo_values.put(_parameters, getFields_FieldUseInfo_value);
    } else {
    }

    getFields_FieldUseInfo_visited.remove(_parameters);
    return getFields_FieldUseInfo_value;
  }
  /**
   * @apilevel internal
   */
  private FieldUseInfo getFields_compute(FieldUseInfo fui) {
  		for (CaseBranch b : getBranchs())
  		  fui.merge(b.getRight());
  	   return new FieldUseInfo(fui.merge(getExpr()));
  	}
  /**
   * @apilevel internal
   */
  protected int getType_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getType_computed = false;
  /**
   * @apilevel internal
   */
  protected Type getType_value;
  /**
   * @attribute syn
   * @aspect TypeCheckerExtension
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/ext/TypeCheckerExtension.jadd:106
   */
  public Type getType() {
    if(getType_computed) {
      return getType_value;
    }
    ASTNode$State state = state();
    if (getType_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getType in class: org.jastadd.ast.AST.SynDecl");
    }
    getType_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getType_value = getType_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getType_computed = true;
    } else {
    }

    getType_visited = -1;
    return getType_value;
  }
  /**
   * @apilevel internal
   */
  private Type getType_compute() {
          Type t = refined_Typing_CaseExp_getType().fullCopy();
          getModel().getTypeExt().annotateType(t, this);
          return t;
      }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/VarResolution.jrag:235
   * @apilevel internal
   */
  public VarOrFieldDecl Define_VarOrFieldDecl_lookupVarOrFieldName(ASTNode caller, ASTNode child, String name, boolean fieldOnly) {
    if (caller == getBranchListNoTransform()) {
      int i = caller.getIndexOfChild(child);
      {
        if (!fieldOnly) {
            VarOrFieldDecl d = getBranch(i).getLeft().locallookupVarOrFieldName(name,fieldOnly);
            if (d != null)
                return d;
        }
        return lookupVarOrFieldName(name, fieldOnly);
    }
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_VarOrFieldDecl_lookupVarOrFieldName(this, caller, name, fieldOnly);
    }
  }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:291
   * @apilevel internal
   */
  public Type Define_Type_getPatternExpType(ASTNode caller, ASTNode child) {
    if (caller == getBranchListNoTransform()) {
      int i = caller.getIndexOfChild(child);
      return getExpr().getType();
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_Type_getPatternExpType(this, caller);
    }
  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
