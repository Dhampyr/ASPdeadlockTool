/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:70
 * @production ClassModifier : {@link OOModifier};

 */
public abstract class ClassModifier extends OOModifier implements Cloneable {
  /**************************************************************************
   * helper methods
   * find the (Class or Interface) Decl which should be modified by this OOModifier
   * @aspect DeltaModifierApplicator
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/delta/DeltaModifierApplicator.jadd:232
   */
  public ClassDecl findClass() {
        //System.out.println("=== Delta " + getDelta().getName() + " looking for ClassDecl: " + this.getName());
        try {
            ModuleDecl module = findModule();
            for (Decl decl : module.getDecls()) {
                if (decl instanceof ClassDecl && decl.getName().equals(this.getSimpleName()))
                    return (ClassDecl) decl;
            }
            // not found
            throw new DeltaModellingException(getDelta(), 
                    " wants to modify class [" + this.getSimpleName() + "], which was not found in module [" + module.getName() + "].");
        } catch (DeltaModellingException e) { return null; }
    }
  /**
   * @declaredat ASTNode:1
   */
  public ClassModifier() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:15
   */
  protected int numChildren() {
    return 0;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:21
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:27
   */
  public void flushCache() {
    super.flushCache();
    getClassDecl_visited = -1;
    getClassDecl_computed = false;
    getClassDecl_value = null;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:36
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:42
   */
  public ClassModifier clone() throws CloneNotSupportedException {
    ClassModifier node = (ClassModifier) super.clone();
    node.getClassDecl_visited = -1;
    node.getClassDecl_computed = false;
    node.getClassDecl_value = null;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   */
  protected int getClassDecl_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getClassDecl_computed = false;
  /**
   * @apilevel internal
   */
  protected ClassDecl getClassDecl_value;
  /**
   * @attribute syn
   * @aspect Class
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeReferences.jrag:41
   */
  public ClassDecl getClassDecl() {
    if(getClassDecl_computed) {
      return getClassDecl_value;
    }
    ASTNode$State state = state();
    if (getClassDecl_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getClassDecl in class: org.jastadd.ast.AST.SynDecl");
    }
    getClassDecl_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getClassDecl_value = getClassDecl_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getClassDecl_computed = true;
    } else {
    }

    getClassDecl_visited = -1;
    return getClassDecl_value;
  }
  /**
   * @apilevel internal
   */
  private ClassDecl getClassDecl_compute() {
          return this.findClass();
      }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
