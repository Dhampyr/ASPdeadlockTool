/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:234
 * @production NewExp : {@link EffExp} ::= <span class="component">&lt;ClassName:String&gt;</span> <span class="component">Param:{@link PureExp}*</span> <span class="component">[{@link Local}]</span>;

 */
public class NewExp extends EffExp implements Cloneable, HasActualParams {
  /**
   * @aspect GenerateErlang
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/erlang/GenerateErlang.jadd:248
   */
  @Override
  public void generateErlangCode(ErlangCodeStream ecs,Vars vars) {
    ASTNode parent = getParent();
    while (!(parent instanceof Stmt) && parent != null ) {
      parent = parent.getParent();
    }
    PureExp dc = CompilerUtils.getAnnotationValue(((Stmt)parent).getAnnotations(), "DC");
    String className = ErlUtil.getName(((UnionType)getType()).getOriginatingClass());
    if (((UnionType) getType()).getOriginatingClass().isForeign())
      className = "ffi_" + className;
    if (!hasLocal()) {
      ecs.format("object:new(cog:start(");
      if (dc == null) {
        ecs.format("DC");
      } else {
        dc.generateErlangCode(ecs, vars);
      }
      ecs.format("),%s,",className);
      ErlUtil.buildParams(ecs,getParams(),vars,true);
      ecs.print(",Cog,");
      ecs.print(vars.toStack());
      ecs.print(")");
    } else {
      ecs.format("object:new(Cog,%s,",className);
      ErlUtil.buildParams(ecs,getParams(),vars,false);
      ecs.print(")");
    }
  }
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:584
   */
  public void generateJava(PrintStream stream) {
        ClassDecl decl = ((UnionType)getType()).getOriginatingClass();
        String className = JavaBackend.getQualifiedString(decl);

        if (!hasLocal()) {
            String strategy = null;
            PureExp scheduler = getInheritedAnnotationValue("Scheduler");
            if (scheduler != null) {
                strategy = JavaGeneratorHelper.generateUserSchedulingStrategy(this, scheduler);
            }
            stream.print(className + ".__ABS_createNewCOG");

            if (strategy != null)
                JavaGeneratorHelper.generateArgs(stream, "this, new " + strategy + "()", getParams(), decl.getTypes());
            else
                JavaGeneratorHelper.generateArgs(stream, "this, null", getParams(), decl.getTypes());
            
        } else {
            stream.print(className + ".__ABS_createNewObject");
            JavaGeneratorHelper.generateArgs(stream, "this", getParams(), decl.getTypes());
        }
    }
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:596
   */
  public void generateJavaDynamic(PrintStream stream) {
        ClassDecl decl = ((UnionType)getType()).getOriginatingClass();
        String className = JavaBackend.getQualifiedString(decl);
        if (!hasLocal()) {
            // generate user-defined scheduler class if annotation is present
            String strategy = null;
            PureExp scheduler = this.getInheritedAnnotationValue("Scheduler");
            if (scheduler != null) {
                strategy = DynamicJavaGeneratorHelper.generateUserSchedulingStrategy(this, scheduler);
            }
            stream.print(className + ".__ABS_createNewCOG");
            if (strategy != null)
                // FIXME: include userScheduler
                DynamicJavaGeneratorHelper.generateArgs(stream, "thisP", getParams(), decl.getTypes());
            else
                DynamicJavaGeneratorHelper.generateArgs(stream, "thisP", getParams(), decl.getTypes());

        } else {
            stream.print(className + ".__ABS_createNewObject");
            DynamicJavaGeneratorHelper.generateArgs(stream, "thisP", getParams(), decl.getTypes());
        }
    }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:257
   */
  public void generateMaudeAsStatement(PrintStream stream, String var, List<Annotation> annotations)
    {
        boolean inlist = false;
        MaudeCompilerHelper.emitCostAnnotation(stream, annotations, getModel().defaultResources);
        if (hasLocal()) {
            stream.print("new(");
        } else {
            stream.print("newcog(");
        }
        stream.print("'" + var + " ; '" + (((UnionType)getType()).getOriginatingClass()).qualifiedName() + " ; ");
        if (getNumParam() == 0) {
            stream.print("emp ");
        } else {
            stream.print("(");
            for (PureExp param : getParams()) {
                if (inlist) stream.print(":: "); else inlist = true;
                param.generateMaude(stream);
            }
            stream.print(") ");
        }
        if (!hasLocal()) {
            PureExp dc = CompilerUtils.getAnnotationValue(annotations, "DC");
            PureExp scheduler = CompilerUtils.getAnnotationValue(annotations, "Scheduler");
            stream.print("; ");
            if (dc != null) {
                dc.generateMaude(stream);
            } else {
                stream.print("\"ABS.DC.thisDC\"( emp )");
            }
            if (scheduler != null) {
                stream.print("; ");
                scheduler.generateMaude(stream);
            }
        }
        stream.print(") ");
    }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:293
   */
  public int numberOfRandom(Set<String> visitedFunctions) {
        int result = 0;
        for (PureExp param : getParams()) {
            result += param.numberOfRandom(visitedFunctions);
        }
        return result;
    }
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:282
   */
  public void doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("new ");
        if (hasLocal()) {
            stream.print("local ");
        }
        stream.print(getClassName());
        stream.print("(");
        getParamList().doPrettyPrint(stream, formatter, ",");
        stream.print(")");
    }
  /**
   * @aspect GenerateProlog
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prolog/GenerateProlog.jadd:918
   */
  public void generateProlog(PrintStream s,ReachabilityInformation reachInfo) {
        //generates "new(ClassName,parametersList,cog)"
        //or "new(ClassName,parametersList,'noCog') if cog==""
        s.print("new("+quote(getClassName())+",[");
        List<?> params = (List<?>) getChild(0);
        int n = params.getNumChild();
        for (int i = 0; i < n; i++){
            params.getChild(i).generateProlog(s,reachInfo);
            if (i != n-1) s.print(",");
        }
        s.print("],'");
        
        if(hasLocal())
            s.print("noCog");
        else
            s.print("cog");
            
        s.print("')");
    }
  /**
   * @aspect collectReachableCode
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prolog/collectReachableCode.jadd:99
   */
  private void generateInterfacesList(Type type,ArrayList<InterfaceType> interfaces) {
        if(type.isUnionType()){
            UnionType unionType=(UnionType)type;
            Iterator<InterfaceType> it=unionType.getTypes().iterator();
            while(it.hasNext()){
                generateInterfacesList(it.next(),interfaces);

            }
        }else
            if(type.isInterfaceType()){
                interfaces.add((InterfaceType)type);
            }   
    }
  /**
   * @aspect collectReachableCode
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prolog/collectReachableCode.jadd:113
   */
  public void collectReachableCode(ReachabilityInformation reachInfo){
        ClassDecl clazz=((UnionType)this.getType()).getOriginatingClass();
        reachInfo.addReachability(clazz,this);
        reachInfo.addReachability(clazz);

        super.collectReachableCode(reachInfo);
    }
  /**
   * @aspect NewExpCounter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/NewExprCounter.jrag:17
   */
  @Override
    protected int getNumberOfNewCogExpr() {
        return hasLocal() ? 0 : 1;
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:184
   */
  public NewExp parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:733
   */
  public void refined_TypeChecker_NewExp_typeCheck(SemanticErrorList e) {
        Decl decl = lookup(new KindedName(Kind.CLASS,getClassName()));
        if (!decl.isClass()) {
            e.add(new TypeError(this, ErrorMessage.NO_CLASS_DECL, getClassName()));
        } else {
            ClassDecl cd = (ClassDecl) decl;
            typeCheckEqualParams(e,cd);
        }
    }
  /**
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:395
   */
  public java.util.List<Type> getTypesFromExp() { return TypeCheckerHelper.getTypes(getParams()); }
  /**
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:410
   */
  public void typeCheckEqualParams(SemanticErrorList l, HasParams params) {
        TypeCheckerHelper.typeCheckEqual(l, this, params.getTypes());
    }
  /**
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:413
   */
  public Map<TypeParameter, Type> getTypeParamBinding(ASTNode<?> node, HasTypes params) {
        return params.getTypeParamBinding(node, getTypesFromExp());
    }
  /**
   * @declaredat ASTNode:1
   */
  public NewExp() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[2];
    setChild(new List(), 0);
    setChild(new Opt(), 1);
  }
  /**
   * @declaredat ASTNode:15
   */
  public NewExp(String p0, List<PureExp> p1, Opt<Local> p2) {
    setClassName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
  }
  /**
   * @declaredat ASTNode:20
   */
  public NewExp(beaver.Symbol p0, List<PureExp> p1, Opt<Local> p2) {
    setClassName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:28
   */
  protected int numChildren() {
    return 2;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:34
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:40
   */
  public void flushCache() {
    super.flushCache();
    getFreeVars_visited = -1;
    getFreeVars_computed = false;
    getFreeVars_value = null;
    getType_visited = -1;
    getType_computed = false;
    getType_value = null;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:52
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:58
   */
  public NewExp clone() throws CloneNotSupportedException {
    NewExp node = (NewExp) super.clone();
    node.getFreeVars_visited = -1;
    node.getFreeVars_computed = false;
    node.getFreeVars_value = null;
    node.getType_visited = -1;
    node.getType_computed = false;
    node.getType_value = null;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:73
   */
  public NewExp copy() {
    try {
      NewExp node = (NewExp) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:91
   */
  public NewExp fullCopy() {
    NewExp tree = (NewExp) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the lexeme ClassName.
   * @param value The new value for the lexeme ClassName.
   * @apilevel high-level
   */
  public void setClassName(String value) {
    tokenString_ClassName = value;
  }
  /**
   * @apilevel internal
   */
  protected String tokenString_ClassName;
  /**
   */
  public int ClassNamestart;
  /**
   */
  public int ClassNameend;
  /**
   * JastAdd-internal setter for lexeme ClassName using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme ClassName
   * @apilevel internal
   */
  public void setClassName(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setClassName is only valid for String lexemes");
    tokenString_ClassName = (String)symbol.value;
    ClassNamestart = symbol.getStart();
    ClassNameend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme ClassName.
   * @return The value for the lexeme ClassName.
   * @apilevel high-level
   */
  public String getClassName() {
    return tokenString_ClassName != null ? tokenString_ClassName : "";
  }
  /**
   * Replaces the Param list.
   * @param list The new list node to be used as the Param list.
   * @apilevel high-level
   */
  public void setParamList(List<PureExp> list) {
    setChild(list, 0);
  }
  /**
   * Retrieves the number of children in the Param list.
   * @return Number of children in the Param list.
   * @apilevel high-level
   */
  public int getNumParam() {
    return getParamList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Param list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Param list.
   * @apilevel low-level
   */
  public int getNumParamNoTransform() {
    return getParamListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Param list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Param list.
   * @apilevel high-level
   */
  public PureExp getParam(int i) {
    return (PureExp) getParamList().getChild(i);
  }
  /**
   * Check whether the Param list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasParam() {
    return getParamList().getNumChild() != 0;
  }
  /**
   * Append an element to the Param list.
   * @param node The element to append to the Param list.
   * @apilevel high-level
   */
  public void addParam(PureExp node) {
    List<PureExp> list = (parent == null || state == null) ? getParamListNoTransform() : getParamList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addParamNoTransform(PureExp node) {
    List<PureExp> list = getParamListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Param list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setParam(PureExp node, int i) {
    List<PureExp> list = getParamList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Param list.
   * @return The node representing the Param list.
   * @apilevel high-level
   */
  public List<PureExp> getParamList() {
    List<PureExp> list = (List<PureExp>) getChild(0);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Param list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Param list.
   * @apilevel low-level
   */
  public List<PureExp> getParamListNoTransform() {
    return (List<PureExp>) getChildNoTransform(0);
  }
  /**
   * Retrieves the Param list.
   * @return The node representing the Param list.
   * @apilevel high-level
   */
  public List<PureExp> getParams() {
    return getParamList();
  }
  /**
   * Retrieves the Param list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Param list.
   * @apilevel low-level
   */
  public List<PureExp> getParamsNoTransform() {
    return getParamListNoTransform();
  }
  /**
   * Replaces the optional node for the Local child. This is the <code>Opt</code>
   * node containing the child Local, not the actual child!
   * @param opt The new node to be used as the optional node for the Local child.
   * @apilevel low-level
   */
  public void setLocalOpt(Opt<Local> opt) {
    setChild(opt, 1);
  }
  /**
   * Replaces the (optional) Local child.
   * @param node The new node to be used as the Local child.
   * @apilevel high-level
   */
  public void setLocal(Local node) {
    getLocalOpt().setChild(node, 0);
  }
  /**
   * Check whether the optional Local child exists.
   * @return {@code true} if the optional Local child exists, {@code false} if it does not.
   * @apilevel high-level
   */
  public boolean hasLocal() {
    return getLocalOpt().getNumChild() != 0;
  }
  /**
   * Retrieves the (optional) Local child.
   * @return The Local child, if it exists. Returns {@code null} otherwise.
   * @apilevel low-level
   */
  public Local getLocal() {
    return (Local) getLocalOpt().getChild(0);
  }
  /**
   * Retrieves the optional node for the Local child. This is the <code>Opt</code> node containing the child Local, not the actual child!
   * @return The optional node for child the Local child.
   * @apilevel low-level
   */
  public Opt<Local> getLocalOpt() {
    return (Opt<Local>) getChild(1);
  }
  /**
   * Retrieves the optional node for child Local. This is the <code>Opt</code> node containing the child Local, not the actual child!
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The optional node for child Local.
   * @apilevel low-level
   */
  public Opt<Local> getLocalOptNoTransform() {
    return (Opt<Local>) getChildNoTransform(1);
  }
  /**
   * @aspect TypeCheckerExtension
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/ext/TypeCheckerExtension.jadd:190
   */
    public void typeCheck(SemanticErrorList s) {
        int size = s.size();
        refined_TypeChecker_NewExp_typeCheck(s);
        if (s.size() > size) return;
        getModel().getTypeExt().checkNewExp(this);
    }
  /**
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:179
   */
  private Type refined_Typing_NewExp_getType()
{
        Decl d = lookup(new KindedName(Kind.CLASS,getClassName()));
        return d.getType();
    }
  /**
   * @apilevel internal
   */
  protected int getFreeVars_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getFreeVars_computed = false;
  /**
   * @apilevel internal
   */
  protected Set<String> getFreeVars_value;
  /**
   * @attribute syn
   * @aspect VarUsage
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/FreeVars.jrag:75
   */
  public Set<String> getFreeVars() {
    if(getFreeVars_computed) {
      return getFreeVars_value;
    }
    ASTNode$State state = state();
    if (getFreeVars_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getFreeVars in class: org.jastadd.ast.AST.SynDecl");
    }
    getFreeVars_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getFreeVars_value = getFreeVars_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getFreeVars_computed = true;
    } else {
    }

    getFreeVars_visited = -1;
    return getFreeVars_value;
  }
  /**
   * @apilevel internal
   */
  private Set<String> getFreeVars_compute() {
  		HashSet<String> res = new HashSet<String>();
  		for (PureExp e : getParams()) {
  		   res.addAll(e.getFreeVars());
  		}
  		return res;
  	}
  /**
   * @apilevel internal
   */
  protected int getType_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getType_computed = false;
  /**
   * @apilevel internal
   */
  protected Type getType_value;
  /**
   * @attribute syn
   * @aspect TypeCheckerExtension
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/ext/TypeCheckerExtension.jadd:72
   */
  public Type getType() {
    if(getType_computed) {
      return getType_value;
    }
    ASTNode$State state = state();
    if (getType_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getType in class: org.jastadd.ast.AST.SynDecl");
    }
    getType_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getType_value = getType_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getType_computed = true;
    } else {
    }

    getType_visited = -1;
    return getType_value;
  }
  /**
   * @apilevel internal
   */
  private Type getType_compute() {
          Type t = refined_Typing_NewExp_getType().fullCopy();
          getModel().getTypeExt().annotateType(t, this);
          return t;
      }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
