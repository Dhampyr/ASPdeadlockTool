/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:236
 * @production SyncCall : {@link Call};

 */
public class SyncCall extends Call implements Cloneable {
  /**
   * @aspect GenerateErlang
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/erlang/GenerateErlang.jadd:326
   */
  @Override
  public void generateErlangCode(ErlangCodeStream ecs,Vars vars){
    final List<PureExp> params = getParams();
    ecs.print("(fun(O=#object{class=T,cog =C}) when C=:=Cog -> object:alive(O),T end(");
    getCallee().generateErlangCode(ecs,vars);
    ecs.format(")):'m_%s'",getMethod());
    ErlUtil.argumentList(ecs,getCallee(),false,true,params,vars);
  }
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:549
   */
  public void generateJava(PrintStream stream) {
        PureExp callee = getCallee();
        final List<PureExp> params = getParams();
        if (callee instanceof ThisExp) {
            stream.print(JavaBackend.getMethodName(getMethod()));
        } else {
            stream.print(ABSRuntime.class.getName() + ".checkForNull(");
            callee.generateJava(stream);
            stream.print(")." + JavaBackend.getMethodName(getMethod()));
        }
        JavaGeneratorHelper.generateArgs(stream,params,getMethodSig().getTypes());
    }
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:571
   */
  public void generateJavaDynamic(PrintStream stream) {
        DynamicJavaGeneratorHelper.generateSyncCall(stream, this);
    }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:212
   */
  public void generateMaudeAsStatement(PrintStream stream, String var, List<Annotation> annotations)
    {
        boolean inlist = false;
        PureExp deadline = CompilerUtils.getAnnotationValue(annotations, "Deadline");

        MaudeCompilerHelper.emitCostAnnotation(stream, annotations, getModel().defaultResources);
        stream.print("synccall('.staticfuture ; ");
        getCallee().generateMaude(stream);
        stream.print("; '" + getMethod() + " ; ");
        MaudeCompilerHelper.emitParameterValueList(stream, getParams(),
                                                   getMethodSig().getTypes());
        stream.print("; ");
        if (deadline != null) deadline.generateMaude(stream);
        else stream.print("\"ABS.StdLib.InfDuration\"[ emp ]");
        stream.print(") ; ");
        stream.print("get( '.staticfuture ; '" + var + ") ");
    }
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:263
   */
  public void doPrettyPrintCallType(PrintWriter stream, ABSFormatter formatter) {
        stream.print(".");
    }
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:274
   */
  public void doPrettyPrintCallPrefix(PrintWriter stream, ABSFormatter formatter) {
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:217
   */
  public SyncCall parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect InitChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/ext/InitChecker.jrag:32
   */
  @Override
    void checkLegalInit(SemanticErrorList l, ErrorMessage msg) { 
        if (!getMethodSig().isAtomic()) {
            l.add(new TypeError(this, msg, "Synchronous calls of non-atomic methods"));
        }
    }
  /**
   * @declaredat ASTNode:1
   */
  public SyncCall() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[2];
    setChild(new List(), 1);
  }
  /**
   * @declaredat ASTNode:14
   */
  public SyncCall(PureExp p0, String p1, List<PureExp> p2) {
    setChild(p0, 0);
    setMethod(p1);
    setChild(p2, 1);
  }
  /**
   * @declaredat ASTNode:19
   */
  public SyncCall(PureExp p0, beaver.Symbol p1, List<PureExp> p2) {
    setChild(p0, 0);
    setMethod(p1);
    setChild(p2, 1);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:27
   */
  protected int numChildren() {
    return 2;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:33
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:39
   */
  public void flushCache() {
    super.flushCache();
    isAsync_visited = -1;
    getType_visited = -1;
    getType_computed = false;
    getType_value = null;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:49
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:55
   */
  public SyncCall clone() throws CloneNotSupportedException {
    SyncCall node = (SyncCall) super.clone();
    node.isAsync_visited = -1;
    node.getType_visited = -1;
    node.getType_computed = false;
    node.getType_value = null;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:68
   */
  public SyncCall copy() {
    try {
      SyncCall node = (SyncCall) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:86
   */
  public SyncCall fullCopy() {
    SyncCall tree = (SyncCall) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the Callee child.
   * @param node The new node to replace the Callee child.
   * @apilevel high-level
   */
  public void setCallee(PureExp node) {
    setChild(node, 0);
  }
  /**
   * Retrieves the Callee child.
   * @return The current node used as the Callee child.
   * @apilevel high-level
   */
  public PureExp getCallee() {
    return (PureExp) getChild(0);
  }
  /**
   * Retrieves the Callee child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the Callee child.
   * @apilevel low-level
   */
  public PureExp getCalleeNoTransform() {
    return (PureExp) getChildNoTransform(0);
  }
  /**
   * Replaces the lexeme Method.
   * @param value The new value for the lexeme Method.
   * @apilevel high-level
   */
  public void setMethod(String value) {
    tokenString_Method = value;
  }
  /**
   * JastAdd-internal setter for lexeme Method using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme Method
   * @apilevel internal
   */
  public void setMethod(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setMethod is only valid for String lexemes");
    tokenString_Method = (String)symbol.value;
    Methodstart = symbol.getStart();
    Methodend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme Method.
   * @return The value for the lexeme Method.
   * @apilevel high-level
   */
  public String getMethod() {
    return tokenString_Method != null ? tokenString_Method : "";
  }
  /**
   * Replaces the Param list.
   * @param list The new list node to be used as the Param list.
   * @apilevel high-level
   */
  public void setParamList(List<PureExp> list) {
    setChild(list, 1);
  }
  /**
   * Retrieves the number of children in the Param list.
   * @return Number of children in the Param list.
   * @apilevel high-level
   */
  public int getNumParam() {
    return getParamList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Param list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Param list.
   * @apilevel low-level
   */
  public int getNumParamNoTransform() {
    return getParamListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Param list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Param list.
   * @apilevel high-level
   */
  public PureExp getParam(int i) {
    return (PureExp) getParamList().getChild(i);
  }
  /**
   * Check whether the Param list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasParam() {
    return getParamList().getNumChild() != 0;
  }
  /**
   * Append an element to the Param list.
   * @param node The element to append to the Param list.
   * @apilevel high-level
   */
  public void addParam(PureExp node) {
    List<PureExp> list = (parent == null || state == null) ? getParamListNoTransform() : getParamList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addParamNoTransform(PureExp node) {
    List<PureExp> list = getParamListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Param list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setParam(PureExp node, int i) {
    List<PureExp> list = getParamList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Param list.
   * @return The node representing the Param list.
   * @apilevel high-level
   */
  public List<PureExp> getParamList() {
    List<PureExp> list = (List<PureExp>) getChild(1);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Param list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Param list.
   * @apilevel low-level
   */
  public List<PureExp> getParamListNoTransform() {
    return (List<PureExp>) getChildNoTransform(1);
  }
  /**
   * Retrieves the Param list.
   * @return The node representing the Param list.
   * @apilevel high-level
   */
  public List<PureExp> getParams() {
    return getParamList();
  }
  /**
   * Retrieves the Param list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Param list.
   * @apilevel low-level
   */
  public List<PureExp> getParamsNoTransform() {
    return getParamListNoTransform();
  }
  /**
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:129
   */
  private Type refined_Typing_SyncCall_getType()
{  
        return getCallType();
    }
  /**
   * @apilevel internal
   */
  protected int isAsync_visited = -1;
  /**
   * TODO Someone should really document why ALSO AsyncCall.isAsync() = false;
   * @attribute syn
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:416
   */
  public boolean isAsync() {
    ASTNode$State state = state();
    if (isAsync_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isAsync in class: org.jastadd.ast.AST.SynDecl");
    }
    isAsync_visited = state().boundariesCrossed;
    try {  return false;  }
    finally {
      isAsync_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int getType_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getType_computed = false;
  /**
   * @apilevel internal
   */
  protected Type getType_value;
  /**
   * @attribute syn
   * @aspect TypeCheckerExtension
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/ext/TypeCheckerExtension.jadd:88
   */
  public Type getType() {
    if(getType_computed) {
      return getType_value;
    }
    ASTNode$State state = state();
    if (getType_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getType in class: org.jastadd.ast.AST.SynDecl");
    }
    getType_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getType_value = getType_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getType_computed = true;
    } else {
    }

    getType_visited = -1;
    return getType_value;
  }
  /**
   * @apilevel internal
   */
  private Type getType_compute() {
          Type t = refined_Typing_SyncCall_getType().fullCopy();
          getModel().getTypeExt().annotateType(t, this);
          return t;
      }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
