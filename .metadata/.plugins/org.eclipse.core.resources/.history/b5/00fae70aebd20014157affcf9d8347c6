/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:193
 * @production DurationGuard : {@link Guard} ::= <span class="component">Min:{@link PureExp}</span> <span class="component">Max:{@link PureExp}</span>;

 */
public class DurationGuard extends Guard implements Cloneable {
  /**
   * @aspect GenerateErlang
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/erlang/GenerateErlang.jadd:859
   */
  @Override
  public boolean hasPoll(){
      return false;
  }
  /**
   * @aspect GenerateErlang
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/erlang/GenerateErlang.jadd:896
   */
  @Override
  public void generateErlangCode(ErlangCodeStream preAwait, ErlangCodeStream ecs, Vars vars) {
      preAwait.print("task:await_duration(Cog,");
      getMin().generateErlangCode(preAwait, vars);
      preAwait.print(",");
      getMax().generateErlangCode(preAwait, vars);
      preAwait.print(",");
      preAwait.print(vars.toStack());
      preAwait.println("),");
  }
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:523
   */
  public void generateJavaGuard(PrintStream beforeAwaitStream, PrintStream stream) {
        stream.print("new " + JavaBackendConstants.EXPGUARD+
                "() { public " + ABSBool.class.getName()+
                " evaluateExp() { return " + 
                ABSBool.class.getName() + ".TRUE; }}");
    }
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:547
   */
  public void generateJavaGuardDynamic(PrintStream beforeAwaitStream, PrintStream stream) {
        stream.print("new " + JavaBackendConstants.EXPGUARD +
                "() { public " + ABSBool.class.getName() +
                " evaluateExp() { return " + ABSBool.class.getName() + ".TRUE; }}");
    }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:786
   */
  public void generateMaude(PrintStream stream) {
        stream.print("?duration( ");
        getMin().generateMaude(stream);
        stream.print("; ");
        getMax().generateMaude(stream);
        stream.print(") ");
    }
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:322
   */
  public void doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("duration(");
        getMin().doPrettyPrint(stream, formatter);
        stream.print(", ");
        getMax().doPrettyPrint(stream, formatter);
        stream.print(")");
    }
  /**
   * @aspect GenerateProlog
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prolog/GenerateProlog.jadd:1068
   */
  public void generateProlog(PrintStream s,ReachabilityInformation reachInfo) {
        s.print("duration( ");
        getMin().generateProlog(s,reachInfo);
        s.print(",");
        getMax().generateProlog(s,reachInfo);
        s.print(")");
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:73
   */
  public DurationGuard parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:679
   */
  public void typeCheck(SemanticErrorList e) {
        getMin().typeCheck(e);
        getMax().typeCheck(e);
        getMin().assertHasType(e, getModel().getIntType());
        getMax().assertHasType(e, getModel().getIntType());
    }
  /**
   * @declaredat ASTNode:1
   */
  public DurationGuard() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[2];
  }
  /**
   * @declaredat ASTNode:13
   */
  public DurationGuard(PureExp p0, PureExp p1) {
    setChild(p0, 0);
    setChild(p1, 1);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:20
   */
  protected int numChildren() {
    return 2;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:26
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:32
   */
  public void flushCache() {
    super.flushCache();
    getModel_visited = -1;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:39
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:45
   */
  public DurationGuard clone() throws CloneNotSupportedException {
    DurationGuard node = (DurationGuard) super.clone();
    node.getModel_visited = -1;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:55
   */
  public DurationGuard copy() {
    try {
      DurationGuard node = (DurationGuard) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:73
   */
  public DurationGuard fullCopy() {
    DurationGuard tree = (DurationGuard) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the Min child.
   * @param node The new node to replace the Min child.
   * @apilevel high-level
   */
  public void setMin(PureExp node) {
    setChild(node, 0);
  }
  /**
   * Retrieves the Min child.
   * @return The current node used as the Min child.
   * @apilevel high-level
   */
  public PureExp getMin() {
    return (PureExp) getChild(0);
  }
  /**
   * Retrieves the Min child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the Min child.
   * @apilevel low-level
   */
  public PureExp getMinNoTransform() {
    return (PureExp) getChildNoTransform(0);
  }
  /**
   * Replaces the Max child.
   * @param node The new node to replace the Max child.
   * @apilevel high-level
   */
  public void setMax(PureExp node) {
    setChild(node, 1);
  }
  /**
   * Retrieves the Max child.
   * @return The current node used as the Max child.
   * @apilevel high-level
   */
  public PureExp getMax() {
    return (PureExp) getChild(1);
  }
  /**
   * Retrieves the Max child.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The current node used as the Max child.
   * @apilevel low-level
   */
  public PureExp getMaxNoTransform() {
    return (PureExp) getChildNoTransform(1);
  }
  /**
   * @attribute inh
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:50
   */
  public Model getModel() {
    ASTNode$State state = state();
    if (getModel_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getModel in class: org.jastadd.ast.AST.InhDecl");
    }
    getModel_visited = state().boundariesCrossed;
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    Model getModel_value = getParent().Define_Model_getModel(this, null);

    getModel_visited = -1;
    return getModel_value;
  }
  /**
   * @apilevel internal
   */
  protected int getModel_visited = -1;
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
