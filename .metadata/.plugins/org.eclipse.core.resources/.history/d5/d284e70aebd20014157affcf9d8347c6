/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:31
 * @production Decl : {@link ASTNode} ::= <span class="component">&lt;Name:String&gt;</span>;

 */
public abstract class Decl extends ASTNode<ASTNode> implements Cloneable, HasCogs, HasType {
  /**
   * @aspect GenerateCoreABS
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/coreabs/GenerateCoreAbs.jadd:34
   */
  public void generateCoreABS(PrintStream stream) {
        stream.println("// " + getClass().getSimpleName() + " Declared in " + getFileName() + " line " + Symbol.getLine(getStart()));
    }
  /**
   * @aspect GenerateErlang
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/erlang/GenerateErlang.jadd:25
   */
  public void generateErlangCode(ErlApp ea) throws IOException {
    throw new NotImplementedYetException(this);
  }
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:82
   */
  public void generateJavaCode(JavaCode.Package pkg) throws IOException, JavaCodeGenerationException {
        PrintStream s = null;
        try {
            String name = JavaBackend.getJavaName(this);
            File file = pkg.createJavaFile(name);
            s = new JavaCodeStream(file);
            s.println("package " + pkg.packageName + ";");
            //s.println(JavaBackendConstants.LIB_IMPORT_STATEMENT);
            generateJava(s);
        } finally {
            if (s != null)
                s.close();
        }

    }
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:105
   */
  abstract void generateJava(PrintStream stream);
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:120
   */
  public void generateJavaCodeDynamic(JavaCode.Package pkg) throws IOException, JavaCodeGenerationException {
        PrintStream s = null;
        try {
            String name = JavaBackend.getJavaName(this);
            File file = pkg.createJavaFile(name);
            s = new JavaCodeStream(new BufferedOutputStream(new FileOutputStream(file)));
            s.println("package " + pkg.packageName + ";");
            generateJavaDynamic(s);
        } finally {
            if (s != null)
                s.close();
        }

    }
  /**
   * @aspect GenerateJavaDynamic_Core
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:142
   */
  abstract void generateJavaDynamic(PrintStream stream);
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:61
   */
  abstract public void generateMaude(PrintStream stream);
  /**
   * @aspect DumpTree
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/tests/DumpTree.jadd:151
   */
  public void dumpTree(String indent, java.io.PrintStream pStream) {
	   	pStream.println(indent + this.toString() + "\t\t" +  this.getName());
			String childIndent = indent + "  ";
		for(int i = 0; i < getNumChild(); i++)
			getChildNoTransform(i).dumpTree(childIndent, pStream);
	}
  /**
   * @aspect MyDumpTree
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/tests/MyDumpTree.jadd:152
   */
  protected void printInfo(PrintStream stream)
    {
        stream.print(this.getName());
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:63
   */
  public Decl parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect QualifiedName
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeNames.jrag:61
   */
  public String qualifiedName() {
        return moduleName() + "." + getName();
    }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:204
   */
  protected void checkOverloading(HashMap<String, MethodSig> sigs, HashMap<String, MethodSig> mysigs, InterfaceTypeUse u, SemanticErrorList e) {
        for (Map.Entry<String, MethodSig> entry : mysigs.entrySet()) {
            MethodSig s = sigs.get(entry.getKey());
            if (s != null) {
                boolean overloads = false;
                MethodSig ms = entry.getValue();
                if (s.getNumParam() != ms.getNumParam()) {
                    overloads = true;
                } else {
                    for (int i = 0; i < s.getNumParam(); i++) {
                        Type texpected = s.getParam(i).getType();
                        Type t = ms.getParam(i).getType();
                        overloads |= !texpected.equals(t);
                    }
                }

                Type expectedReturnType = s.getReturnType().getType();
                Type actualReturnType = ms.getReturnType().getType(); 
                overloads |= !expectedReturnType.equals(actualReturnType);
                if (overloads) {
                    e.add(new TypeError(u, ErrorMessage.CANNOT_IMPL_INTERFACE, u.getName(), s.getName()));
                }
            }
        }

    }
  /**
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:231
   */
  public abstract void typeCheck(SemanticErrorList e);
  /**
   * checks if a declaration is unknown and adds an appropriate error message to the semantic error list
   * @param use the use of the declaration (this is where the error will be shown)
   * @param e the semantic error list
   * @param errorMessage the error message for unknown declarations 
   * @param name the name of the declaration (used in the error message)
   * @return
   * @aspect TypeChecker
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:507
   */
  protected boolean checkDecl(ASTNode<?> use, SemanticErrorList e, ErrorMessage errorMessage, String name) {
        return true;
    }
  /**
   * @declaredat ASTNode:1
   */
  public Decl() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
  }
  /**
   * @declaredat ASTNode:12
   */
  public Decl(String p0) {
    setName(p0);
  }
  /**
   * @declaredat ASTNode:15
   */
  public Decl(beaver.Symbol p0) {
    setName(p0);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:21
   */
  protected int numChildren() {
    return 0;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:27
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:33
   */
  public void flushCache() {
    super.flushCache();
    getNumberOfNewCogExpr_visited = -1;
    getNumberOfNewCogExpr_computed = false;
    isUnknown_visited = -1;
    locallookupVarOrFieldName_String_boolean_visited = null;
    locallookupVarOrFieldName_String_boolean_values = null;
    moduleName_visited = -1;
    isFunction_visited = -1;
    isClass_visited = -1;
    isDataType_visited = -1;
    isDataConstructor_visited = -1;
    isInterface_visited = -1;
    isTypeSyn_visited = -1;
    isTypeParameter_visited = -1;
    isFuture_visited = -1;
    getModuleDecl_visited = -1;
    getModel_visited = -1;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:55
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:61
   */
  public Decl clone() throws CloneNotSupportedException {
    Decl node = (Decl) super.clone();
    node.getNumberOfNewCogExpr_visited = -1;
    node.getNumberOfNewCogExpr_computed = false;
    node.isUnknown_visited = -1;
    node.locallookupVarOrFieldName_String_boolean_visited = null;
    node.locallookupVarOrFieldName_String_boolean_values = null;
    node.moduleName_visited = -1;
    node.isFunction_visited = -1;
    node.isClass_visited = -1;
    node.isDataType_visited = -1;
    node.isDataConstructor_visited = -1;
    node.isInterface_visited = -1;
    node.isTypeSyn_visited = -1;
    node.isTypeParameter_visited = -1;
    node.isFuture_visited = -1;
    node.getModuleDecl_visited = -1;
    node.getModel_visited = -1;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * Replaces the lexeme Name.
   * @param value The new value for the lexeme Name.
   * @apilevel high-level
   */
  public void setName(String value) {
    tokenString_Name = value;
  }
  /**
   * @apilevel internal
   */
  protected String tokenString_Name;
  /**
   */
  public int Namestart;
  /**
   */
  public int Nameend;
  /**
   * JastAdd-internal setter for lexeme Name using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme Name
   * @apilevel internal
   */
  public void setName(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setName is only valid for String lexemes");
    tokenString_Name = (String)symbol.value;
    Namestart = symbol.getStart();
    Nameend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme Name.
   * @return The value for the lexeme Name.
   * @apilevel high-level
   */
  public String getName() {
    return tokenString_Name != null ? tokenString_Name : "";
  }
  /**
   * @attribute syn
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:69
   */
  public abstract Type getType();
  /**
   * @apilevel internal
   */
  protected int getNumberOfNewCogExpr_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean getNumberOfNewCogExpr_computed = false;
  /**
   * @apilevel internal
   */
  protected int getNumberOfNewCogExpr_value;
  /**
   * @attribute syn
   * @aspect NewExpCounter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/NewExprCounter.jrag:26
   */
  public int getNumberOfNewCogExpr() {
    if(getNumberOfNewCogExpr_computed) {
      return getNumberOfNewCogExpr_value;
    }
    ASTNode$State state = state();
    if (getNumberOfNewCogExpr_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getNumberOfNewCogExpr in class: org.jastadd.ast.AST.SynDecl");
    }
    getNumberOfNewCogExpr_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    getNumberOfNewCogExpr_value = getNumberOfNewCogExpr_compute();
    if(isFinal && num == state().boundariesCrossed) {
      getNumberOfNewCogExpr_computed = true;
    } else {
    }

    getNumberOfNewCogExpr_visited = -1;
    return getNumberOfNewCogExpr_value;
  }
  /**
   * @apilevel internal
   */
  private int getNumberOfNewCogExpr_compute() {  return super.getNumberOfNewCogExpr();  }
  /**
   * @apilevel internal
   */
  protected int isUnknown_visited = -1;
  /**
   * @attribute syn
   * @aspect NullObjects
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/NullObjects.jrag:5
   */
  public boolean isUnknown() {
    ASTNode$State state = state();
    if (isUnknown_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isUnknown in class: org.jastadd.ast.AST.SynDecl");
    }
    isUnknown_visited = state().boundariesCrossed;
    try {  return false;  }
    finally {
      isUnknown_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected java.util.Map locallookupVarOrFieldName_String_boolean_visited;
  protected java.util.Map locallookupVarOrFieldName_String_boolean_values;
  /**
   * @attribute syn
   * @aspect VarResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/VarResolution.jrag:66
   */
  public VarOrFieldDecl locallookupVarOrFieldName(String name, boolean fieldOnly) {
    java.util.List _parameters = new java.util.ArrayList(2);
    _parameters.add(name);
    _parameters.add(Boolean.valueOf(fieldOnly));
    if(locallookupVarOrFieldName_String_boolean_visited == null) locallookupVarOrFieldName_String_boolean_visited = new java.util.HashMap(4);
    if(locallookupVarOrFieldName_String_boolean_values == null) locallookupVarOrFieldName_String_boolean_values = new java.util.HashMap(4);
    if(locallookupVarOrFieldName_String_boolean_values.containsKey(_parameters)) {
      return (VarOrFieldDecl)locallookupVarOrFieldName_String_boolean_values.get(_parameters);
    }
    ASTNode$State state = state();
    if (Integer.valueOf(state().boundariesCrossed).equals(locallookupVarOrFieldName_String_boolean_visited.get(_parameters))) {
      throw new RuntimeException("Circular definition of attr: locallookupVarOrFieldName in class: org.jastadd.ast.AST.SynDecl");
    }
    locallookupVarOrFieldName_String_boolean_visited.put(_parameters, Integer.valueOf(state().boundariesCrossed));
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    VarOrFieldDecl locallookupVarOrFieldName_String_boolean_value = locallookupVarOrFieldName_compute(name, fieldOnly);
    if(isFinal && num == state().boundariesCrossed) {
      locallookupVarOrFieldName_String_boolean_values.put(_parameters, locallookupVarOrFieldName_String_boolean_value);
    } else {
    }

    locallookupVarOrFieldName_String_boolean_visited.remove(_parameters);
    return locallookupVarOrFieldName_String_boolean_value;
  }
  /**
   * @apilevel internal
   */
  private VarOrFieldDecl locallookupVarOrFieldName_compute(String name, boolean fieldOnly) {  return null;  }
  /**
   * @apilevel internal
   */
  protected int moduleName_visited = -1;
  /**
   * @attribute syn
   * @aspect ModuleName
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeNames.jrag:3
   */
  public String moduleName() {
    ASTNode$State state = state();
    if (moduleName_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: moduleName in class: org.jastadd.ast.AST.SynDecl");
    }
    moduleName_visited = state().boundariesCrossed;
    try {  return getModuleDecl().getName();  }
    finally {
      moduleName_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int isFunction_visited = -1;
  /**
   * @attribute syn
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:13
   */
  public boolean isFunction() {
    ASTNode$State state = state();
    if (isFunction_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isFunction in class: org.jastadd.ast.AST.SynDecl");
    }
    isFunction_visited = state().boundariesCrossed;
    try {  return false;  }
    finally {
      isFunction_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int isClass_visited = -1;
  /**
   * @attribute syn
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:14
   */
  public boolean isClass() {
    ASTNode$State state = state();
    if (isClass_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isClass in class: org.jastadd.ast.AST.SynDecl");
    }
    isClass_visited = state().boundariesCrossed;
    try {  return false;  }
    finally {
      isClass_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int isDataType_visited = -1;
  /**
   * @attribute syn
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:15
   */
  public boolean isDataType() {
    ASTNode$State state = state();
    if (isDataType_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isDataType in class: org.jastadd.ast.AST.SynDecl");
    }
    isDataType_visited = state().boundariesCrossed;
    try {  return false;  }
    finally {
      isDataType_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int isDataConstructor_visited = -1;
  /**
   * @attribute syn
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:16
   */
  public boolean isDataConstructor() {
    ASTNode$State state = state();
    if (isDataConstructor_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isDataConstructor in class: org.jastadd.ast.AST.SynDecl");
    }
    isDataConstructor_visited = state().boundariesCrossed;
    try {  return false;  }
    finally {
      isDataConstructor_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int isInterface_visited = -1;
  /**
   * @attribute syn
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:17
   */
  public boolean isInterface() {
    ASTNode$State state = state();
    if (isInterface_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isInterface in class: org.jastadd.ast.AST.SynDecl");
    }
    isInterface_visited = state().boundariesCrossed;
    try {  return false;  }
    finally {
      isInterface_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int isTypeSyn_visited = -1;
  /**
   * @attribute syn
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:18
   */
  public boolean isTypeSyn() {
    ASTNode$State state = state();
    if (isTypeSyn_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isTypeSyn in class: org.jastadd.ast.AST.SynDecl");
    }
    isTypeSyn_visited = state().boundariesCrossed;
    try {  return false;  }
    finally {
      isTypeSyn_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int isTypeParameter_visited = -1;
  /**
   * @attribute syn
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:19
   */
  public boolean isTypeParameter() {
    ASTNode$State state = state();
    if (isTypeParameter_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isTypeParameter in class: org.jastadd.ast.AST.SynDecl");
    }
    isTypeParameter_visited = state().boundariesCrossed;
    try {  return false;  }
    finally {
      isTypeParameter_visited = -1;
    }
  }
  /**
   * @apilevel internal
   */
  protected int isFuture_visited = -1;
  /**
   * @attribute syn
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:20
   */
  public boolean isFuture() {
    ASTNode$State state = state();
    if (isFuture_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: isFuture in class: org.jastadd.ast.AST.SynDecl");
    }
    isFuture_visited = state().boundariesCrossed;
    try {  return false;  }
    finally {
      isFuture_visited = -1;
    }
  }
  /**
   * @attribute inh
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:206
   */
  public ModuleDecl getModuleDecl() {
    ASTNode$State state = state();
    if (getModuleDecl_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getModuleDecl in class: org.jastadd.ast.AST.InhDecl");
    }
    getModuleDecl_visited = state().boundariesCrossed;
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    ModuleDecl getModuleDecl_value = getParent().Define_ModuleDecl_getModuleDecl(this, null);

    getModuleDecl_visited = -1;
    return getModuleDecl_value;
  }
  /**
   * @apilevel internal
   */
  protected int getModuleDecl_visited = -1;
  /**
   * @attribute inh
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:42
   */
  public Model getModel() {
    ASTNode$State state = state();
    if (getModel_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getModel in class: org.jastadd.ast.AST.InhDecl");
    }
    getModel_visited = state().boundariesCrossed;
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    Model getModel_value = getParent().Define_Model_getModel(this, null);

    getModel_visited = -1;
    return getModel_value;
  }
  /**
   * @apilevel internal
   */
  protected int getModel_visited = -1;
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
