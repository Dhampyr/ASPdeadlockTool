/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:15
 * @production DeltaDecl : {@link ASTNode} ::= <span class="component">&lt;Name:String&gt;</span> <span class="component">Param:{@link DeltaParamDecl}*</span> <span class="component">{@link DeltaAccess}*</span> <span class="component">{@link ModuleModifier}*</span>;

 */
public class DeltaDecl extends ASTNode<ASTNode> implements Cloneable {
  /**
   * @aspect GenerateJava
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/GenerateJava.jadd:226
   */
  public void generateJava(PrintStream stream) {
        // TODO: Java generation here
    }
  /**
   * @aspect GenerateJavaDynamic_DeltaModelling
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/java/codegeneration/dynamic/GenerateJava.jadd:1019
   */
  public void generateJavaCodeDynamic(JavaCode code) throws IOException, JavaCodeGenerationException {
        String deltaPackageName = JavaBackend.getDeltaPackageName(getName());
        JavaCode.Package pkg = code.createPackage(deltaPackageName);
        ArrayList<String> classes = new ArrayList<String>();
        for (ModuleModifier mod : getModuleModifiers()) {
            mod.generatedJavaPackageName = deltaPackageName + "." + mod.findModule().getName() + "." + mod.getSimpleName();
            JavaCode.Package modPkg = code.createPackage(mod.generatedJavaPackageName);
            mod.generateJavaCodeDynamic(modPkg);
            classes.add(mod.generatedJavaPackageName + "." + mod.generatedJavaClassName);
        }
        DynamicJavaGeneratorHelper.generateDelta(this, pkg, classes);
    }
  /**
   * @aspect GenerateMaude
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/maude/GenerateMaude.jadd:88
   */
  public void generateMaude(PrintStream stream) {
		stream.println("*** Delta: " + qualifiedName());
    }
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:520
   */
  public void doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("delta ");
        stream.print(getName());

        List<DeltaParamDecl> dpl = getParamList();
        if (dpl.getNumChild() > 0) {
            stream.print("(");
            dpl.doPrettyPrint(stream, formatter, ",");
            stream.print(")");
        }
        stream.println(";");
        formatter.afterStmt();
        getDeltaAccesss().doPrettyPrint(stream, formatter);
        stream.println();
        getModuleModifierList().doPrettyPrint(stream, formatter);

        //        List<FunctionalModifier> fms = getFunctionalModifierList();
        //        int mcount = fms.getNumChild();
        //        if (mcount > 0) {
        //            formatter.afterStmt();
        //        }
        //        fms.doPrettyPrint(stream, formatter);
        //
        //        List<ClassOrIfaceModifier> cms = getClassOrIfaceModifierList();
        //        if (cms.getNumChild() > 0 && mcount == 0) {
        //            formatter.afterStmt();
        //        } 
        //        cms.doPrettyPrint(stream, formatter);

        stream.println();
    }
  /**
   * @aspect GenerateProlog
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prolog/GenerateProlog.jadd:1062
   */
  public void generateProlog(PrintStream s,ReachabilityInformation reachInfo){
       //we ignore deltas by now!
    }
  /**
   * @aspect ErrorCheck
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/ErrorCheck.jadd:67
   */
  public void collectErrors(SemanticErrorList c) {
    /* FIXME: Don't collect in here, the name resolution mechanism doesn't seem to know about all the details,
     * e.g. how to resolve datatypes just added.
     */
     c.addAll(getErrsWithinDelta());
  }
  /**
   * @aspect DeltaParameterSubstitution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/delta/DeltaParameterSubstitution.jadd:93
   */
  public void substituteParameters(
            List<Deltaparam> dparams, 
            List<Feature> features) throws DeltaModellingWithNodeException {

        // cache names and values of delta parameters as specified in the delta clause
        HashMap<String,Value> subst = new HashMap<String,Value>();
        
        for (int i = 0; i < dparams.getNumChild(); i++)
            subst.put(getParam(i).getName(), dparams.getChildNoTransform(i).calcValue(features));

        //System.out.println("## collected subst [" + getName() + "]: " + subst);

        for (ModuleModifier mod : getModuleModifiers()) {
            mod.applySubstitution(subst);
        }
    }
  /**
   * @aspect OriginalCallResolver
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/delta/OriginalCallResolver.jadd:27
   */
  protected void resolveOriginalCalls(
            Collection<DeltaDecl> deltas) throws DeltaModellingException {

        //System.out.println("*** Processing original calls in delta: " + this.qualifiedName());
        for (ModuleModifier cm : getModuleModifiers()) {
           if (cm instanceof ModifyClassModifier)
               for (Modifier m : ((ModifyClassModifier)cm).getModifiers())
                   if (m instanceof ModifyMethodModifier)
                       ((ModifyMethodModifier)m).resolveOriginalCalls(deltas);
        }
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:66
   */
  public DeltaDecl parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect QualifiedName
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeNames.jrag:65
   */
  public String qualifiedName() {
        return this.getName();
    }
  /**
   * @aspect TypeCheckProductline
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:934
   */
  protected void typeCheck(SemanticErrorList e) {
        for (DeltaAccess acc : getDeltaAccessList())
            acc.typeCheck(e);
        for (ModuleModifier mod : getModuleModifiers())
            mod.typeCheck(e);
    }
  /**
   * @aspect TypeResolution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeResolution.jrag:287
   */
  @Override
	public Decl Define_Decl_lookup(ASTNode a, ASTNode b, KindedName n) {
	  if (getParent() == null)
	    return Model.unknownDecl;
	  else
	    return super.Define_Decl_lookup(a,b,n);
	}
  /**
   * @declaredat ASTNode:1
   */
  public DeltaDecl() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[3];
    setChild(new List(), 0);
    setChild(new List(), 1);
    setChild(new List(), 2);
  }
  /**
   * @declaredat ASTNode:16
   */
  public DeltaDecl(String p0, List<DeltaParamDecl> p1, List<DeltaAccess> p2, List<ModuleModifier> p3) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
    setChild(p3, 2);
  }
  /**
   * @declaredat ASTNode:22
   */
  public DeltaDecl(beaver.Symbol p0, List<DeltaParamDecl> p1, List<DeltaAccess> p2, List<ModuleModifier> p3) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
    setChild(p3, 2);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:31
   */
  protected int numChildren() {
    return 3;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:37
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:43
   */
  public void flushCache() {
    super.flushCache();
    usesModules_visited = -1;
    usesModules_computed = false;
    usesModules_value = null;
    getModel_visited = -1;
    DeltaDecl_getErrsWithinDelta_visited = -1;
    DeltaDecl_getErrsWithinDelta_computed = false;
    DeltaDecl_getErrsWithinDelta_value = null;
        DeltaDecl_getErrsWithinDelta_contributors = null;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:57
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
    DeltaDecl_getErrsWithinDelta_visited = -1;
    DeltaDecl_getErrsWithinDelta_computed = false;
    DeltaDecl_getErrsWithinDelta_value = null;
        DeltaDecl_getErrsWithinDelta_contributors = null;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:67
   */
  public DeltaDecl clone() throws CloneNotSupportedException {
    DeltaDecl node = (DeltaDecl) super.clone();
    node.usesModules_visited = -1;
    node.usesModules_computed = false;
    node.usesModules_value = null;
    node.getModel_visited = -1;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:80
   */
  public DeltaDecl copy() {
    try {
      DeltaDecl node = (DeltaDecl) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:98
   */
  public DeltaDecl fullCopy() {
    DeltaDecl tree = (DeltaDecl) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the lexeme Name.
   * @param value The new value for the lexeme Name.
   * @apilevel high-level
   */
  public void setName(String value) {
    tokenString_Name = value;
  }
  /**
   * @apilevel internal
   */
  protected String tokenString_Name;
  /**
   */
  public int Namestart;
  /**
   */
  public int Nameend;
  /**
   * JastAdd-internal setter for lexeme Name using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme Name
   * @apilevel internal
   */
  public void setName(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setName is only valid for String lexemes");
    tokenString_Name = (String)symbol.value;
    Namestart = symbol.getStart();
    Nameend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme Name.
   * @return The value for the lexeme Name.
   * @apilevel high-level
   */
  public String getName() {
    return tokenString_Name != null ? tokenString_Name : "";
  }
  /**
   * Replaces the Param list.
   * @param list The new list node to be used as the Param list.
   * @apilevel high-level
   */
  public void setParamList(List<DeltaParamDecl> list) {
    setChild(list, 0);
  }
  /**
   * Retrieves the number of children in the Param list.
   * @return Number of children in the Param list.
   * @apilevel high-level
   */
  public int getNumParam() {
    return getParamList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Param list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Param list.
   * @apilevel low-level
   */
  public int getNumParamNoTransform() {
    return getParamListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Param list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Param list.
   * @apilevel high-level
   */
  public DeltaParamDecl getParam(int i) {
    return (DeltaParamDecl) getParamList().getChild(i);
  }
  /**
   * Check whether the Param list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasParam() {
    return getParamList().getNumChild() != 0;
  }
  /**
   * Append an element to the Param list.
   * @param node The element to append to the Param list.
   * @apilevel high-level
   */
  public void addParam(DeltaParamDecl node) {
    List<DeltaParamDecl> list = (parent == null || state == null) ? getParamListNoTransform() : getParamList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addParamNoTransform(DeltaParamDecl node) {
    List<DeltaParamDecl> list = getParamListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Param list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setParam(DeltaParamDecl node, int i) {
    List<DeltaParamDecl> list = getParamList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Param list.
   * @return The node representing the Param list.
   * @apilevel high-level
   */
  public List<DeltaParamDecl> getParamList() {
    List<DeltaParamDecl> list = (List<DeltaParamDecl>) getChild(0);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Param list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Param list.
   * @apilevel low-level
   */
  public List<DeltaParamDecl> getParamListNoTransform() {
    return (List<DeltaParamDecl>) getChildNoTransform(0);
  }
  /**
   * Retrieves the Param list.
   * @return The node representing the Param list.
   * @apilevel high-level
   */
  public List<DeltaParamDecl> getParams() {
    return getParamList();
  }
  /**
   * Retrieves the Param list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Param list.
   * @apilevel low-level
   */
  public List<DeltaParamDecl> getParamsNoTransform() {
    return getParamListNoTransform();
  }
  /**
   * Replaces the DeltaAccess list.
   * @param list The new list node to be used as the DeltaAccess list.
   * @apilevel high-level
   */
  public void setDeltaAccessList(List<DeltaAccess> list) {
    setChild(list, 1);
  }
  /**
   * Retrieves the number of children in the DeltaAccess list.
   * @return Number of children in the DeltaAccess list.
   * @apilevel high-level
   */
  public int getNumDeltaAccess() {
    return getDeltaAccessList().getNumChild();
  }
  /**
   * Retrieves the number of children in the DeltaAccess list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the DeltaAccess list.
   * @apilevel low-level
   */
  public int getNumDeltaAccessNoTransform() {
    return getDeltaAccessListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the DeltaAccess list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the DeltaAccess list.
   * @apilevel high-level
   */
  public DeltaAccess getDeltaAccess(int i) {
    return (DeltaAccess) getDeltaAccessList().getChild(i);
  }
  /**
   * Check whether the DeltaAccess list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasDeltaAccess() {
    return getDeltaAccessList().getNumChild() != 0;
  }
  /**
   * Append an element to the DeltaAccess list.
   * @param node The element to append to the DeltaAccess list.
   * @apilevel high-level
   */
  public void addDeltaAccess(DeltaAccess node) {
    List<DeltaAccess> list = (parent == null || state == null) ? getDeltaAccessListNoTransform() : getDeltaAccessList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addDeltaAccessNoTransform(DeltaAccess node) {
    List<DeltaAccess> list = getDeltaAccessListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the DeltaAccess list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setDeltaAccess(DeltaAccess node, int i) {
    List<DeltaAccess> list = getDeltaAccessList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the DeltaAccess list.
   * @return The node representing the DeltaAccess list.
   * @apilevel high-level
   */
  public List<DeltaAccess> getDeltaAccessList() {
    List<DeltaAccess> list = (List<DeltaAccess>) getChild(1);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the DeltaAccess list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the DeltaAccess list.
   * @apilevel low-level
   */
  public List<DeltaAccess> getDeltaAccessListNoTransform() {
    return (List<DeltaAccess>) getChildNoTransform(1);
  }
  /**
   * Retrieves the DeltaAccess list.
   * @return The node representing the DeltaAccess list.
   * @apilevel high-level
   */
  public List<DeltaAccess> getDeltaAccesss() {
    return getDeltaAccessList();
  }
  /**
   * Retrieves the DeltaAccess list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the DeltaAccess list.
   * @apilevel low-level
   */
  public List<DeltaAccess> getDeltaAccesssNoTransform() {
    return getDeltaAccessListNoTransform();
  }
  /**
   * Replaces the ModuleModifier list.
   * @param list The new list node to be used as the ModuleModifier list.
   * @apilevel high-level
   */
  public void setModuleModifierList(List<ModuleModifier> list) {
    setChild(list, 2);
  }
  /**
   * Retrieves the number of children in the ModuleModifier list.
   * @return Number of children in the ModuleModifier list.
   * @apilevel high-level
   */
  public int getNumModuleModifier() {
    return getModuleModifierList().getNumChild();
  }
  /**
   * Retrieves the number of children in the ModuleModifier list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the ModuleModifier list.
   * @apilevel low-level
   */
  public int getNumModuleModifierNoTransform() {
    return getModuleModifierListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the ModuleModifier list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the ModuleModifier list.
   * @apilevel high-level
   */
  public ModuleModifier getModuleModifier(int i) {
    return (ModuleModifier) getModuleModifierList().getChild(i);
  }
  /**
   * Check whether the ModuleModifier list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasModuleModifier() {
    return getModuleModifierList().getNumChild() != 0;
  }
  /**
   * Append an element to the ModuleModifier list.
   * @param node The element to append to the ModuleModifier list.
   * @apilevel high-level
   */
  public void addModuleModifier(ModuleModifier node) {
    List<ModuleModifier> list = (parent == null || state == null) ? getModuleModifierListNoTransform() : getModuleModifierList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addModuleModifierNoTransform(ModuleModifier node) {
    List<ModuleModifier> list = getModuleModifierListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the ModuleModifier list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setModuleModifier(ModuleModifier node, int i) {
    List<ModuleModifier> list = getModuleModifierList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the ModuleModifier list.
   * @return The node representing the ModuleModifier list.
   * @apilevel high-level
   */
  public List<ModuleModifier> getModuleModifierList() {
    List<ModuleModifier> list = (List<ModuleModifier>) getChild(2);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the ModuleModifier list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the ModuleModifier list.
   * @apilevel low-level
   */
  public List<ModuleModifier> getModuleModifierListNoTransform() {
    return (List<ModuleModifier>) getChildNoTransform(2);
  }
  /**
   * Retrieves the ModuleModifier list.
   * @return The node representing the ModuleModifier list.
   * @apilevel high-level
   */
  public List<ModuleModifier> getModuleModifiers() {
    return getModuleModifierList();
  }
  /**
   * Retrieves the ModuleModifier list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the ModuleModifier list.
   * @apilevel low-level
   */
  public List<ModuleModifier> getModuleModifiersNoTransform() {
    return getModuleModifierListNoTransform();
  }
  /**
   * @apilevel internal
   */
  protected int usesModules_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean usesModules_computed = false;
  /**
   * @apilevel internal
   */
  protected ArrayList<ModuleDecl> usesModules_value;
  /**
   * @attribute syn
   * @aspect Uses
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeReferences.jrag:55
   */
  public ArrayList<ModuleDecl> usesModules() {
    if(usesModules_computed) {
      return usesModules_value;
    }
    ASTNode$State state = state();
    if (usesModules_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: usesModules in class: org.jastadd.ast.AST.SynDecl");
    }
    usesModules_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    usesModules_value = usesModules_compute();
    if(isFinal && num == state().boundariesCrossed) {
      usesModules_computed = true;
    } else {
    }

    usesModules_visited = -1;
    return usesModules_value;
  }
  /**
   * @apilevel internal
   */
  private ArrayList<ModuleDecl> usesModules_compute() {
          ArrayList<ModuleDecl> usedModules = new ArrayList<ModuleDecl>();
          for (DeltaAccess da : getDeltaAccessList()) {
              for (ModuleDecl module : getModel().getModuleDecls()) {
                  if (da.getModuleName().equals(module.getName()))
                          usedModules.add(module);
              }
          }
          return usedModules;
      }
  /**
   * @attribute inh
   * @aspect Typing
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/Typing.jrag:41
   */
  public Model getModel() {
    ASTNode$State state = state();
    if (getModel_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getModel in class: org.jastadd.ast.AST.InhDecl");
    }
    getModel_visited = state().boundariesCrossed;
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    Model getModel_value = getParent().Define_Model_getModel(this, null);

    getModel_visited = -1;
    return getModel_value;
  }
  /**
   * @apilevel internal
   */
  protected int getModel_visited = -1;
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeNames.jrag:8
   * @apilevel internal
   */
  public String Define_String_deltaName(ASTNode caller, ASTNode child) {
    if (caller == getModuleModifierListNoTransform()) {
      int childIndex = caller.getIndexOfChild(child);
      return this.getName();
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_String_deltaName(this, caller);
    }
  }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeReferences.jrag:4
   * @apilevel internal
   */
  public Model Define_Model_getModel(ASTNode caller, ASTNode child) {
    if (caller == getModuleModifierListNoTransform()) {
      int childIndex = caller.getIndexOfChild(child);
      return this.getModel();
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_Model_getModel(this, caller);
    }
  }
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeReferences.jrag:17
   * @apilevel internal
   */
  public DeltaDecl Define_DeltaDecl_getDelta(ASTNode caller, ASTNode child) {
    if (caller == getModuleModifierListNoTransform()) {
      int childIndex = caller.getIndexOfChild(child);
      return this;
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_DeltaDecl_getDelta(this, caller);
    }
  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }  /**
   * @attribute coll
   * @aspect ErrorCheck
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/analyser/ErrorCheck.jadd:74
   */
  public SemanticErrorList getErrsWithinDelta() {
    if(DeltaDecl_getErrsWithinDelta_computed) {
      return DeltaDecl_getErrsWithinDelta_value;
    }
    ASTNode$State state = state();
    if (DeltaDecl_getErrsWithinDelta_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getErrsWithinDelta in class: org.jastadd.ast.AST.CollDecl");
    }
    DeltaDecl_getErrsWithinDelta_visited = state().boundariesCrossed;
    int num = state.boundariesCrossed;
    boolean isFinal = this.is$Final();
    DeltaDecl_getErrsWithinDelta_value = getErrsWithinDelta_compute();
    if(isFinal && num == state().boundariesCrossed) {
      DeltaDecl_getErrsWithinDelta_computed = true;
    } else {
    }

    DeltaDecl_getErrsWithinDelta_visited = -1;
    return DeltaDecl_getErrsWithinDelta_value;
  }
  java.util.Set DeltaDecl_getErrsWithinDelta_contributors;

  /**
   * @apilevel internal
   * @return the contributor set for getErrsWithinDelta
   */
  public java.util.Set DeltaDecl_getErrsWithinDelta_contributors() {
    if(DeltaDecl_getErrsWithinDelta_contributors == null)
      DeltaDecl_getErrsWithinDelta_contributors  = new ASTNode$State.IdentityHashSet(4);
    return DeltaDecl_getErrsWithinDelta_contributors;
  }

  /**
   * @apilevel internal
   */
  private SemanticErrorList getErrsWithinDelta_compute() {
    ASTNode node = this;
    while(node.getParent() != null && !(node instanceof Model)) {
      node = node.getParent();
    }
    if(node == null) throw new RuntimeException("Trying to evaluate collection attribute in subtree not attached to main tree");
    Model root = (Model) node;
    root.collect_contributors_DeltaDecl_getErrsWithinDelta();
    DeltaDecl_getErrsWithinDelta_value = new SemanticErrorList();
    if(DeltaDecl_getErrsWithinDelta_contributors != null)
    for (java.util.Iterator iter = DeltaDecl_getErrsWithinDelta_contributors.iterator(); iter.hasNext(); ) {
      ASTNode contributor = (ASTNode) iter.next();
      contributor.contributeTo_DeltaDecl_DeltaDecl_getErrsWithinDelta(DeltaDecl_getErrsWithinDelta_value);
    }
    // TODO: disabled temporarily since collections may not be cached
    //DeltaDecl_getErrsWithinDelta_contributors = null;
    return DeltaDecl_getErrsWithinDelta_value;
  }
  /**
   * @apilevel internal
   */
  protected int DeltaDecl_getErrsWithinDelta_visited = -1;
  /**
   * @apilevel internal
   */
  protected boolean DeltaDecl_getErrsWithinDelta_computed = false;
  /**
   * @apilevel internal
   */
  protected SemanticErrorList DeltaDecl_getErrsWithinDelta_value;
}
