/* This file was generated with JastAdd2 (http://jastadd.org) version 2.1.4 */
package abs.frontend.ast;

import java.io.PrintStream;
import beaver.Symbol;
import java.io.*;
import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;
import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import abs.backend.java.*;
import abs.backend.java.codegeneration.*;
import abs.backend.java.lib.runtime.*;
import abs.backend.java.lib.expr.*;
import abs.backend.java.lib.types.*;
import abs.backend.java.codegeneration.dynamic.*;
import abs.backend.java.codegeneration.JavaCode;
import abs.backend.java.codegeneration.JavaCodeGenerationException;
import java.util.Set;
import java.util.TreeSet;
import abs.backend.maude.MaudeCompiler;
import abs.backend.maude.MaudeCompilerHelper;
import java.io.PrintWriter;
import abs.backend.prettyprint.*;
import abs.backend.prolog.*;
import static abs.backend.prolog.PrologBackend.fieldTransform;
import static abs.backend.prolog.PrologBackend.initialToUpperCase;
import static abs.backend.prolog.PrologBackend.varTransform;
import static abs.backend.prolog.PrologBackend.strTransform;
import static abs.backend.prolog.PrologBackend.quote;
import java.util.HashSet;
import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;
import java.util.Collections;
import java.util.Map;
import abs.common.*;
import abs.frontend.typechecker.Type;
import abs.frontend.typechecker.DataTypeType;
import abs.frontend.ast.InterfaceDecl;
import java.util.HashMap;
import abs.frontend.delta.*;
import abs.frontend.parser.*;
import abs.frontend.mtvl.ChocoSolver;
import choco.Choco;
import choco.kernel.model.constraints.Constraint;
import choco.kernel.model.variables.integer.IntegerVariable;
import choco.kernel.model.variables.integer.IntegerExpressionVariable;
import abs.frontend.mtvl.Types;
import abs.frontend.parser.ParserError;
import java.util.*;
import java.util.regex.*;
import abs.frontend.tests.*;
import abs.frontend.treecopy.ParseTreeCopyHelper;
import abs.frontend.analyser.ErrorMessage;
import abs.frontend.analyser.TypeError;
import abs.frontend.typechecker.TypeCheckerHelper;
import abs.frontend.typechecker.KindedName;
import abs.frontend.typechecker.ResolvedName;
import javax.annotation.CheckForNull;
import abs.frontend.typechecker.KindedName.Kind;
import java.util.Arrays;
import abs.frontend.typechecker.ext.*;
/**
 * @ast node
 * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/ast/ABS.ast:295
 * @production ProductLine : {@link ASTNode} ::= <span class="component">&lt;Name:String&gt;</span> <span class="component">{@link Feature}*</span> <span class="component">{@link DeltaClause}*</span>;

 */
public class ProductLine extends ASTNode<ASTNode> implements Cloneable {
  /**
   * @aspect doPrettyPrinter
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/backend/prettyprint/PrettyPrinter.jadd:119
   */
  public void doPrettyPrint(PrintWriter stream, ABSFormatter formatter) {
        stream.print("productline ");
        stream.print(getName());
        stream.print(";");
        formatter.afterStmt();
        boolean hasFeatures = false;
        if (getNumFeature() > 0 && ! hasFeatures) {
            hasFeatures = true;
            stream.println();
            stream.print("features ");
        }
        getFeatureList().doPrettyPrint(stream, formatter, ",");
        if (hasFeatures) {
            stream.println(";");
            formatter.afterStmt();
        }

        getDeltaClauseList().doPrettyPrint(stream, formatter);

        stream.println();
        formatter.afterStmt();
        stream.flush();
    }
  /**************************************************************************
   * Substitute any delta parameters in given set of deltas
   * with the values given in the productline's delta clause
   * @aspect DeltaParameterSubstitution
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/delta/DeltaParameterSubstitution.jadd:60
   */
  public void substituteDeltaParams(
            ArrayList<DeltaDecl> deltas, 
            Product prod) throws DeltaModellingException {

        for (DeltaDecl delta : deltas) {
          try {
            for (DeltaClause clause : getDeltaClauses()) {
                if (delta.getName().equals(clause.getDeltaspec().getName()) && clause.isApplicable(prod)) {
                    List<Deltaparam> params = clause.getDeltaspec().getDeltaparams();
                    delta.substituteParameters(params, prod.getFeatures());
                    break;
                }
                // We trust that there is a delta clause to match the delta, 
                // otherwise the delta wouldn't be in the list of applicable deltas.
            }
          } catch (DeltaModellingWithNodeException e) {
            if (e.getDelta() == null) {
              throw new DeltaModellingWithNodeException(e.getNode(), delta, e.getMessage());
            }
          }
        }
    }
  /**************************************************************************
   * Evaluate each delta clause to find the applicable delta names
   * i.e. test each application condition in the context of the features which are ON in the given product
   * @aspect ProductFlattener
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/delta/ProductFlattener.jadd:119
   */
  public Set<String> findApplicableDeltas(Product prod) {

        HashSet<String> deltaids = new HashSet<String>();

        for (DeltaClause clause : getDeltaClauses()) {
            if (clause.evaluateApplicationCondition(prod.getFeatures()))
                deltaids.add(clause.getDeltaspec().getName());
        }
        return deltaids;
    }
  /**************************************************************************
   * Evaluate both FROM and TO(WHEN) delta clauses to find the applicable delta names
   * relevant for dynamic product reconfiguration
   * @aspect ProductFlattener
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/delta/ProductFlattener.jadd:134
   */
  public Set<String> findApplicableDeltas(Product fromProd, Product toProd) {
        
        HashSet<String> deltaids = new HashSet<String>();
        
        for (DeltaClause clause : getDeltaClauses()) {
            if (clause.evaluateFromApplicationCondition(fromProd.getFeatures()))
                if (clause.evaluateApplicationCondition(toProd.getFeatures()))
                    deltaids.add(clause.getDeltaspec().getName());
        }
        return deltaids;
    }
  /**************************************************************************
   * Sort Delta names according to a valid order of application defined by the product line
   * @aspect ProductFlattener
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/delta/ProductFlattener.jadd:227
   */
  public ArrayList<String> sortDeltas(Set<String> deltaIDs) {
        GraphTS g = new GraphTS(deltaIDs.toArray());
        
        for (DeltaClause clause : getDeltaClauses()) {
            String deltaid = clause.getDeltaspec().getName();
            if (deltaIDs.contains(deltaid)) {
                for (DeltaID did : clause.getAfterDeltaIDs()) { // 'after' deltas
                    String otherid = did.getName();
                    if (deltaIDs.contains(otherid)) {
                        try {
                            g.addEdge(otherid, deltaid);
                        } catch (VertexNotFoundException e) {
                            assert false; // should never reach this point
                        }
                    }
                }
            }
        }
        g.sort(); // FIXME catch the case when sort fails -- use assert?
        return g.getSortedElements();
    }
  /**
   * @aspect ParseTreeCopy
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/treecopy/ParseTreeCopy.jadd:200
   */
  public ProductLine parseTreeCopy() { return ParseTreeCopyHelper.parseTreeCopy(this); }
  /**
   * @aspect TypeCheckProductline
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/TypeChecker.jadd:1032
   */
  protected void typeCheck(SemanticErrorList e) {
        // TODO: JastAdd attributes?
        // cache all names of defined deltas for easy lookup
        Set<String> definedFeatures = new HashSet<String>();
        for (Feature cf : getFeatures()) {
            definedFeatures.add(cf.getName());
        }

        // TODO: check for undeclared features?
        for (DeltaClause dc : getDeltaClauses()) {
            dc.typeCheck(getModel().getDeltaDeclsMap(), definedFeatures, e);
        }
        Set<String> fs = new HashSet<String>();
        for (Feature f : getFeatures()) {
            if (!fs.add(f.getName()))
                e.add(new SemanticError(f, ErrorMessage.DUPLICATE_FEATURE, f.getName()));
        }
    }
  /**
   * @declaredat ASTNode:1
   */
  public ProductLine() {
    super();
  }
  /**
   * Initializes the child array to the correct size.
   * Initializes List and Opt nta children.
   * @apilevel internal
   * @ast method
   * @declaredat ASTNode:10
   */
  public void init$Children() {
    children = new ASTNode[2];
    setChild(new List(), 0);
    setChild(new List(), 1);
  }
  /**
   * @declaredat ASTNode:15
   */
  public ProductLine(String p0, List<Feature> p1, List<DeltaClause> p2) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
  }
  /**
   * @declaredat ASTNode:20
   */
  public ProductLine(beaver.Symbol p0, List<Feature> p1, List<DeltaClause> p2) {
    setName(p0);
    setChild(p1, 0);
    setChild(p2, 1);
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:28
   */
  protected int numChildren() {
    return 2;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:34
   */
  public boolean mayHaveRewrite() {
    return false;
  }
  /**
   * @apilevel low-level
   * @declaredat ASTNode:40
   */
  public void flushCache() {
    super.flushCache();
    getModel_visited = -1;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:47
   */
  public void flushCollectionCache() {
    super.flushCollectionCache();
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:53
   */
  public ProductLine clone() throws CloneNotSupportedException {
    ProductLine node = (ProductLine) super.clone();
    node.getModel_visited = -1;
    node.in$Circle(false);
    node.is$Final(false);
    return node;
  }
  /**
   * @apilevel internal
   * @declaredat ASTNode:63
   */
  public ProductLine copy() {
    try {
      ProductLine node = (ProductLine) clone();
      node.parent = null;
      if(children != null) {
        node.children = (ASTNode[]) children.clone();
      }
      return node;
    } catch (CloneNotSupportedException e) {
      throw new Error("Error: clone not supported for " + getClass().getName());
    }
  }
  /**
   * Create a deep copy of the AST subtree at this node.
   * The copy is dangling, i.e. has no parent.
   * @return dangling copy of the subtree at this node
   * @apilevel low-level
   * @declaredat ASTNode:81
   */
  public ProductLine fullCopy() {
    ProductLine tree = (ProductLine) copy();
    if (children != null) {
      for (int i = 0; i < children.length; ++i) {
        ASTNode child = (ASTNode) children[i];
        if(child != null) {
          child = child.fullCopy();
          tree.setChild(child, i);
        }
      }
    }
    return tree;
  }
  /**
   * Replaces the lexeme Name.
   * @param value The new value for the lexeme Name.
   * @apilevel high-level
   */
  public void setName(String value) {
    tokenString_Name = value;
  }
  /**
   * @apilevel internal
   */
  protected String tokenString_Name;
  /**
   */
  public int Namestart;
  /**
   */
  public int Nameend;
  /**
   * JastAdd-internal setter for lexeme Name using the Beaver parser.
   * @param symbol Symbol containing the new value for the lexeme Name
   * @apilevel internal
   */
  public void setName(beaver.Symbol symbol) {
    if(symbol.value != null && !(symbol.value instanceof String))
    throw new UnsupportedOperationException("setName is only valid for String lexemes");
    tokenString_Name = (String)symbol.value;
    Namestart = symbol.getStart();
    Nameend = symbol.getEnd();
  }
  /**
   * Retrieves the value for the lexeme Name.
   * @return The value for the lexeme Name.
   * @apilevel high-level
   */
  public String getName() {
    return tokenString_Name != null ? tokenString_Name : "";
  }
  /**
   * Replaces the Feature list.
   * @param list The new list node to be used as the Feature list.
   * @apilevel high-level
   */
  public void setFeatureList(List<Feature> list) {
    setChild(list, 0);
  }
  /**
   * Retrieves the number of children in the Feature list.
   * @return Number of children in the Feature list.
   * @apilevel high-level
   */
  public int getNumFeature() {
    return getFeatureList().getNumChild();
  }
  /**
   * Retrieves the number of children in the Feature list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the Feature list.
   * @apilevel low-level
   */
  public int getNumFeatureNoTransform() {
    return getFeatureListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the Feature list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the Feature list.
   * @apilevel high-level
   */
  public Feature getFeature(int i) {
    return (Feature) getFeatureList().getChild(i);
  }
  /**
   * Check whether the Feature list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasFeature() {
    return getFeatureList().getNumChild() != 0;
  }
  /**
   * Append an element to the Feature list.
   * @param node The element to append to the Feature list.
   * @apilevel high-level
   */
  public void addFeature(Feature node) {
    List<Feature> list = (parent == null || state == null) ? getFeatureListNoTransform() : getFeatureList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addFeatureNoTransform(Feature node) {
    List<Feature> list = getFeatureListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the Feature list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setFeature(Feature node, int i) {
    List<Feature> list = getFeatureList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the Feature list.
   * @return The node representing the Feature list.
   * @apilevel high-level
   */
  public List<Feature> getFeatureList() {
    List<Feature> list = (List<Feature>) getChild(0);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the Feature list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Feature list.
   * @apilevel low-level
   */
  public List<Feature> getFeatureListNoTransform() {
    return (List<Feature>) getChildNoTransform(0);
  }
  /**
   * Retrieves the Feature list.
   * @return The node representing the Feature list.
   * @apilevel high-level
   */
  public List<Feature> getFeatures() {
    return getFeatureList();
  }
  /**
   * Retrieves the Feature list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the Feature list.
   * @apilevel low-level
   */
  public List<Feature> getFeaturesNoTransform() {
    return getFeatureListNoTransform();
  }
  /**
   * Replaces the DeltaClause list.
   * @param list The new list node to be used as the DeltaClause list.
   * @apilevel high-level
   */
  public void setDeltaClauseList(List<DeltaClause> list) {
    setChild(list, 1);
  }
  /**
   * Retrieves the number of children in the DeltaClause list.
   * @return Number of children in the DeltaClause list.
   * @apilevel high-level
   */
  public int getNumDeltaClause() {
    return getDeltaClauseList().getNumChild();
  }
  /**
   * Retrieves the number of children in the DeltaClause list.
   * Calling this method will not trigger rewrites.
   * @return Number of children in the DeltaClause list.
   * @apilevel low-level
   */
  public int getNumDeltaClauseNoTransform() {
    return getDeltaClauseListNoTransform().getNumChildNoTransform();
  }
  /**
   * Retrieves the element at index {@code i} in the DeltaClause list.
   * @param i Index of the element to return.
   * @return The element at position {@code i} in the DeltaClause list.
   * @apilevel high-level
   */
  public DeltaClause getDeltaClause(int i) {
    return (DeltaClause) getDeltaClauseList().getChild(i);
  }
  /**
   * Check whether the DeltaClause list has any children.
   * @return {@code true} if it has at least one child, {@code false} otherwise.
   * @apilevel high-level
   */
  public boolean hasDeltaClause() {
    return getDeltaClauseList().getNumChild() != 0;
  }
  /**
   * Append an element to the DeltaClause list.
   * @param node The element to append to the DeltaClause list.
   * @apilevel high-level
   */
  public void addDeltaClause(DeltaClause node) {
    List<DeltaClause> list = (parent == null || state == null) ? getDeltaClauseListNoTransform() : getDeltaClauseList();
    list.addChild(node);
  }
  /**
   * @apilevel low-level
   */
  public void addDeltaClauseNoTransform(DeltaClause node) {
    List<DeltaClause> list = getDeltaClauseListNoTransform();
    list.addChild(node);
  }
  /**
   * Replaces the DeltaClause list element at index {@code i} with the new node {@code node}.
   * @param node The new node to replace the old list element.
   * @param i The list index of the node to be replaced.
   * @apilevel high-level
   */
  public void setDeltaClause(DeltaClause node, int i) {
    List<DeltaClause> list = getDeltaClauseList();
    list.setChild(node, i);
  }
  /**
   * Retrieves the DeltaClause list.
   * @return The node representing the DeltaClause list.
   * @apilevel high-level
   */
  public List<DeltaClause> getDeltaClauseList() {
    List<DeltaClause> list = (List<DeltaClause>) getChild(1);
    list.getNumChild();
    return list;
  }
  /**
   * Retrieves the DeltaClause list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the DeltaClause list.
   * @apilevel low-level
   */
  public List<DeltaClause> getDeltaClauseListNoTransform() {
    return (List<DeltaClause>) getChildNoTransform(1);
  }
  /**
   * Retrieves the DeltaClause list.
   * @return The node representing the DeltaClause list.
   * @apilevel high-level
   */
  public List<DeltaClause> getDeltaClauses() {
    return getDeltaClauseList();
  }
  /**
   * Retrieves the DeltaClause list.
   * <p><em>This method does not invoke AST transformations.</em></p>
   * @return The node representing the DeltaClause list.
   * @apilevel low-level
   */
  public List<DeltaClause> getDeltaClausesNoTransform() {
    return getDeltaClauseListNoTransform();
  }
  /**
   * @attribute inh
   * @aspect Model
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeReferences.jrag:6
   */
  public Model getModel() {
    ASTNode$State state = state();
    if (getModel_visited == state().boundariesCrossed) {
      throw new RuntimeException("Circular definition of attr: getModel in class: org.jastadd.ast.AST.InhDecl");
    }
    getModel_visited = state().boundariesCrossed;
        if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
    Model getModel_value = getParent().Define_Model_getModel(this, null);

    getModel_visited = -1;
    return getModel_value;
  }
  /**
   * @apilevel internal
   */
  protected int getModel_visited = -1;
  /**
   * @declaredat /Users/vmastand/Documents/JavaProject/ABS/abstools/frontend/src/abs/frontend/typechecker/NodeReferences.jrag:29
   * @apilevel internal
   */
  public ProductLine Define_ProductLine_getProductLine(ASTNode caller, ASTNode child) {
    if (caller == getDeltaClauseListNoTransform()) {
      int childIndex = caller.getIndexOfChild(child);
      return this;
    }
    else {
    if(getParent() == null) throw new RuntimeException("Trying to evaluate attribute in subtree not attached to main tree");
      return getParent().Define_ProductLine_getProductLine(this, caller);
    }
  }
  /**
   * @apilevel internal
   */
  public ASTNode rewriteTo() {    return super.rewriteTo();
  }}
