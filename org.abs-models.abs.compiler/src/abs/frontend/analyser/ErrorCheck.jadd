import java.util.Collection;
import java.util.ArrayList;
import abs.frontend.analyser.*;
import abs.frontend.typechecker.*;

aspect ErrorCheck {

    /**
     * TODO: doesn't cache intermediate results, use with care.
     */
    public boolean Model.hasErrors() {
        return !getErrors().isEmpty();
    }
    
  public SemanticErrorList Model.getErrors() {
    SemanticErrorList s = new SemanticErrorList();
    collectErrors(s);
    return s;
  }

  // generic traversal that collects errors in AST
  void ASTNode.collectErrors(SemanticErrorList c) {
    for(int i = 0; i < getNumChild(); i++)
      getChild(i).collectErrors(c);
  }

  // add error for cyclic interface inheritance hierarchy
  public void InterfaceDecl.collectErrors(SemanticErrorList c) {
    super.collectErrors(c);
    if(hasCycleOnExtendedInterfacesChain())
        c.add(new SemanticError(this,ErrorMessage.CYCLIC_INHERITANCE,getName()));
  }

  // add error for undeclared interfaces
  public void InterfaceTypeUse.collectErrors(SemanticErrorList c) {
    super.collectErrors(c);
    if(getDecl().isUnknown())
      c.add(new SemanticError(this,ErrorMessage.UNKOWN_INTERFACE,getName()));
  }

  // add error for undeclared identifiers (interfaces, datatypes/type synonyms)
  public void UnresolvedTypeUse.collectErrors(SemanticErrorList c) {
    super.collectErrors(c);
    if(getDecl().isUnknown())
        c.add(new SemanticError(this,ErrorMessage.UNKOWN_INTERFACE_OR_DATATYPE,getName()));
  }

  // add error for undeclared interfaces
  // TODO: generalise to check other IdUse's too.
  public void DataTypeUse.collectErrors(SemanticErrorList c) {
    super.collectErrors(c);
    if(getDecl().isUnknown())
        c.add(new SemanticError(this,ErrorMessage.UNKOWN_DATATYPE,getName()));
  }

  public void DataConstructorExp.collectErrors(SemanticErrorList c) {
    try {
      super.collectErrors(c);
      if (getDecl() == null) {
          c.add(new SemanticError(this,ErrorMessage.UNKOWN_DATACONSTRUCTOR,getConstructor()));
      }
    } catch (TypeCheckerException e) {
      c.add(e);
    }
  }

  public void DeltaDecl.collectErrors(SemanticErrorList c) {
    /* FIXME: Don't collect in here, the name resolution mechanism doesn't seem to know about all the details,
     * e.g. how to resolve datatypes just added.
     */
     c.addAll(getErrsWithinDelta());
  }

  coll SemanticErrorList DeltaDecl.getErrsWithinDelta() [new SemanticErrorList()] with add root Model;
  
  OriginalCall contributes (new TypeError(this,ErrorMessage.ORIGINAL_NOT_IN_DELTA,""))
    when (calcContextNode(ModifyMethodModifier.class) == null)
    to DeltaDecl.getErrsWithinDelta() for calcContextNode(DeltaDecl.class);
}

// Local Variables:
// mode: java
// End:
