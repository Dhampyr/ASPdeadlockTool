

aspect InitChecker {

    void ASTNode.checkLegalInit(SemanticErrorList l, ErrorMessage msg) {
        for (ASTNode<?> n : this) {
            n.checkLegalInit(l, msg);
        }
    }
	
    @Override
    void SuspendStmt.checkLegalInit(SemanticErrorList l, ErrorMessage msg) {
       l.add(new TypeError(this, msg, "Suspend statements"));
    }
    @Override
    void AwaitStmt.checkLegalInit(SemanticErrorList l, ErrorMessage msg) {
       l.add(new TypeError(this, msg, "Await statements"));
    }
    @Override
    void AwaitAsyncCall.checkLegalInit(SemanticErrorList l, ErrorMessage msg) {
        l.add(new TypeError(this, msg, "Await expressions"));
    }
    @Override
    void ThrowStmt.checkLegalInit(SemanticErrorList l, ErrorMessage msg) {
       l.add(new TypeError(this, msg, "Throw statements"));
    }
    @Override
    void DieStmt.checkLegalInit(SemanticErrorList l, ErrorMessage msg) {
       l.add(new TypeError(this, msg, "Die statements"));
    }

    @Override
    void SyncCall.checkLegalInit(SemanticErrorList l, ErrorMessage msg) { 
        if (!getMethodSig().isAtomic()) {
            l.add(new TypeError(this, msg, "Synchronous calls of non-atomic methods"));
        }
    }
    @Override
    void GetExp.checkLegalInit(SemanticErrorList l, ErrorMessage msg) { 
       l.add(new TypeError(this, msg, "Get expressions"));
    }
    
    @Override
    void FieldDecl.checkLegalInit(SemanticErrorList l, ErrorMessage msg) {
        if (hasInitExp()) {
            getInitExp().checkLegalInit(l, msg);
         }
    }
    @Override
    void VarDecl.checkLegalInit(SemanticErrorList l, ErrorMessage msg) {
        if (hasInitExp()) {
            getInitExp().checkLegalInit(l, msg);
        }
    }


}

// Local Variables:
// mode: java
// End:
