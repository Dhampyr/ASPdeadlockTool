// -*- mode: java; tab-width: 4; -*-

import java.io.*;

import abs.frontend.ast.*;
import abs.backend.erlang.*;
import java.util.Iterator;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeInferrerExtension;
import abs.frontend.typechecker.locationtypes.infer.LocationTypeVariable;
import abs.frontend.typechecker.locationtypes.LocationType;

import abs.backend.erlang.ErlUtil.Mask;
import org.apache.commons.io.output.WriterOutputStream;
import java.nio.charset.Charset;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
aspect GenerateErlang {

  public void Model.generateErlangCode(ErlApp ea) throws IOException{
    for (ModuleDecl decl : getModuleDecls()) {
      decl.generateErlangCode(ea);
    }
   }

  public void Decl.generateErlangCode(ErlApp ea) throws IOException {
    throw new NotImplementedYetException(this);
  }

  public void InterfaceDecl.generateErlangCode(ErlApp ea) throws IOException {
    //Ignore include data in classes as exports
  }

  public void ClassDecl.generateErlangCode(ErlApp ea) throws IOException {
    new ClassGenerator(ea,this);
  }

  //DataTypes
  public void DataTypeDecl.generateErlangCode(ErlApp ea) throws IOException
  {
    //Ignore DataTypeDecl
  }

  @Override
  public void ExceptionDecl.generateErlangCode(ErlApp ea) throws IOException {
    //Ignore ExceptionDecl
  }

  @Override
  public void TypeSynDecl.generateErlangCode(ErlApp ea) throws IOException {
    //Ignore
  }

  @Override
  public void FunctionDecl.generateErlangCode(ErlApp ea) throws IOException{
    ErlangCodeStream ecs= ea.getFunStream(moduleName());
    ErlUtil.functionHeader(ecs,"f_"+getName(),"Cog=#cog{ref=CogRef}",getParams());
    boolean needTrunc=getType().isIntType() && getFunctionDef() instanceof ExpFunctionDef
        && ((ExpFunctionDef) getFunctionDef()).getRhs().getType().isRatType();
    if (needTrunc) {
      ecs.print("rationals:trunc(");
    }
    Vars vars = Vars.n(getParams());
    ErlUtil.stopWorldPrelude(ecs, vars, true);
    getFunctionDef().generateErlangCode(ecs,vars);
    if (needTrunc) {
      ecs.print(")");
    }
    ecs.println(".");
    ecs.decIndent();
    ecs.println();
  }

  public  void FunctionDef.generateErlangCode(ErlangCodeStream ecs,Vars vars) throws IOException{
    throw new NotImplementedYetException(this);
  }
  @Override
  public  void BuiltinFunctionDef.generateErlangCode(ErlangCodeStream ecs,Vars vars) throws IOException{
    ecs.print("builtin");
  }

  private final static Set<String> FnApp.ERLANG_BUILTINS=ImmutableSet.of(
      "currentms", "getProductLine", "lowlevelDeadline", "print", "println",
      "random", "strlen", "substr", "thisDC", "toString", "truncate");
  public  void FnApp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    FunctionDecl decl = (FunctionDecl)getDecl();
    boolean builtin = decl.getFunctionDef() instanceof BuiltinFunctionDef;
    if(builtin){
      if(!ERLANG_BUILTINS.contains(decl.getName()))
        throw new NotImplementedYetException("builtin: "+decl.getName(), this);
      ecs.print("builtin:");
      ecs.print(decl.getName());
    }
    else {
      ecs.print( ErlUtil.getName(decl.getModuleDecl())+ "_funs:f_" + decl.getName());
    }
    ErlUtil.argumentList(ecs,null, builtin, isContextImperative(), getParams(), vars);
  }

  @Override
  public  void ExpFunctionDef.generateErlangCode(ErlangCodeStream ecs,Vars vars) throws IOException{
    getRhs().generateErlangCode( ecs, vars);
  }

  public void ModuleDecl.generateErlangCode(ErlApp ea) throws IOException{
   ErlangCodeStream ecs=null;
   try{
     if (hasBlock()) {
       String erlModulename = ErlUtil.getModuleName(getName());
       ecs = ea.createSourceFile(ErlUtil.getName(this));
       ecs.pf("-module(%s).", erlModulename);
       ecs.println("-behaviour(application).");
       ecs.println("-include_lib(\"include/abs_types.hrl\").");
       ecs.println("-export([main/1]).");
       ecs.println("%% Application callbacks");
       ecs.println("-export([start/2, stop/1]).");
       ecs.println();
       ErlUtil.functionHeader(ecs, "main", Mask.none, "Cog=#cog{ref=CogRef}");
       ecs.println("O = void,");
       // Create a default deployment component.
       ecs.println("%% FIXME: thisDC() won't work in main block (DC should be in Cog state)");
       ecs.println("DC = object:new(cog:start(),class_ABS_DC_DeploymentComponent, [\"Initial DC\",dataEmptyMap,[]],Cog,[O]),");
       ecs.println("eventstream:event({newdc, DC}),");
       ecs.println("Stack = [DC],");
       getBlock().generateErlangCode(ecs, Vars.n());
       ecs.println('.');
       ecs.decIndent();
       ecs.println();
       ecs.println("%% ===================================================================");
       ecs.println("%% Application callbacks");
       ecs.println("%% ===================================================================");
       ecs.println();
       ecs.println("start(_StartType, _StartArgs) ->");
       ecs.println("    runtime:start_link([" + erlModulename + "]).");
       ecs.println();
       ecs.println("stop(_State) ->");
       ecs.println("    ok.");

       // Let's start the last seen module by default, hope there's
       // only one init block in the model.
       ea.generateModuleDefinitions(getName(), erlModulename);
     }
   }
   finally{
     if(ecs!=null)
       try{
       ecs.close();
       }
       catch(Exception a){
       //TODO handle better, or hope for java7
       }
   }
   for (Decl decl : getDecls()) {
     decl.generateErlangCode(ea);
    }
  }

  @Override
  public void Block.generateErlangCode(ErlangCodeStream ecs,Vars vars)
  {
    boolean first=true;
    for (Stmt stmt : getStmts()) {
      if(!first)
        ecs.println(",");
      first=false;
      PureExp cost = MaudeCompilerHelper.getAnnotationValue(stmt.getAnnotationList(), "Cost");
      if (cost != null) {
          ecs.print("task:block_for_resource(Cog,cpu,");
          cost.generateErlangCode(ecs, vars);
          ecs.println(",Stack),");
      }
      stmt.generateErlangCode(ecs,vars);
    }
    if(first)
      ecs.print("ok");
  }


  public void Stmt.generateErlangCode(ErlangCodeStream ecs,Vars vars) {
    throw new NotImplementedYetException(this);
  }

  @Override
  public void VarDeclStmt.generateErlangCode(ErlangCodeStream ecs,Vars vars) {
    getVarDecl().generateErlangCode(ecs,vars);
  }

  public void VarDecl.generateErlangCode(ErlangCodeStream ecs,Vars vars) {
    if(getAccess() instanceof TypeParameterUse || getAccess() instanceof InterfaceTypeUse|| getAccess() instanceof DataTypeUse){
      StringWriter sw = new StringWriter();
      ErlangCodeStream buffer = new ErlangCodeStream(new WriterOutputStream(sw, Charset.forName("UTF-8")),ecs.getIndent());
      if(hasInitExp()){
        boolean needTrunc=getType().isIntType() && getInitExp().getType().isRatType();
        if (needTrunc)
          buffer.print("rationals:trunc(");
        getInitExp().generateErlangCode(buffer,vars);
        if (needTrunc)
          buffer.print(")");
        }
      else
        buffer.print("null");
      buffer.close();
      String varName = vars.nV(this);
      ecs.format("%s = %s", varName, sw.toString().substring(ecs.getIndent().length()));
      if (getType().isDeploymentComponentType() && getInitExp() instanceof NewExp) {
          ecs.println(",");
          ecs.format("eventstream:event({newdc, %s})", varName);
      }
    }
    else
      throw new NotImplementedYetException(this);
  }

  @Override
  public void AssignStmt.generateErlangCode(ErlangCodeStream ecs,Vars vars) {
    StringWriter sw = new StringWriter();
    ErlangCodeStream buffer = new ErlangCodeStream(new WriterOutputStream(sw, Charset.forName("UTF-8")),ecs.getIndent());
    boolean needTrunc=getVar().getType().isIntType() && getValue().getType().isRatType();
    boolean isNewDC = getVar().getType().isDeploymentComponentType()
        && getValue() instanceof NewExp;
    if (needTrunc)
      buffer.print("rationals:trunc(");
    getValue().generateErlangCode(buffer,vars);
    if (needTrunc)
      buffer.print(")");
    buffer.close();
    if(getVar() instanceof VarUse) {
      String varName = vars.inc(getVar().getName());
      ecs.format("%s = %s", varName,sw.toString().substring(ecs.getIndent().length()));
      if (isNewDC) {
        ecs.println(",");
        ecs.format("eventstream:event({newdc, %s})", varName);
      }
    } else if(getVar() instanceof FieldUse) {
      ecs.format("set(O,'%s',%s)", getVar().getName(),sw.toString().substring(ecs.getIndent().length()));
      if (isNewDC) {
        ecs.println(",");
        ecs.format("eventstream:event({newdc, get(O,%s)})", getVar().getName());
      }
    } else {
      throw new NotImplementedYetException(this);
    }
  }

  public void Exp.generateErlangCode(ErlangCodeStream ecs,Vars vars) {
    throw new NotImplementedYetException(this);
  }

  @Override
  public void NewExp.generateErlangCode(ErlangCodeStream ecs,Vars vars) {
    ASTNode parent = getParent();
    while (!(parent instanceof Stmt) && parent != null ) {
      parent = parent.getParent();
    }
    PureExp dc = CompilerUtils.getAnnotationValue(((Stmt)parent).getAnnotations(), "DC");
    String className = ErlUtil.getName(((UnionType)getType()).getOriginatingClass());
    if (((UnionType) getType()).getOriginatingClass().isForeign())
      className = "ffi_" + className;
    if (!hasLocal()) {
      ecs.format("object:new(cog:start(");
      if (dc == null) {
        ecs.format("DC");
      } else {
        dc.generateErlangCode(ecs, vars);
      }
      ecs.format("),%s,",className);
      ErlUtil.buildParams(ecs,getParams(),vars,true);
      ecs.print(",Cog,");
      ecs.print(vars.toStack());
      ecs.print(")");
    } else {
      ecs.format("object:new(Cog,%s,",className);
      ErlUtil.buildParams(ecs,getParams(),vars,false);
      ecs.print(")");
    }
  }

  @Override
  public void ExpressionStmt.generateErlangCode(ErlangCodeStream ecs,Vars vars) {
    boolean isNewDC = getExp().getType().isDeploymentComponentType()
        && getExp() instanceof NewExp;
    if (isNewDC) {
      StringWriter sw = new StringWriter();
      ErlangCodeStream buffer = new ErlangCodeStream(new WriterOutputStream(sw, Charset.forName("UTF-8")),ecs.getIndent());
      getExp().generateErlangCode(buffer,vars);
      buffer.close();
      // won't class with any variable because UPPERCASE
      String varName = vars.inc("TEMP");
      ecs.format("%s = %s", varName,sw.toString().substring(ecs.getIndent().length()));
      ecs.println(",");
      ecs.format("eventstream:event({newdc, %s})", varName);
      ecs.println(",");
      ecs.print(varName);
    } else {
        getExp().generateErlangCode( ecs, vars);
    }
  }

  @Override
  public void ReturnStmt.generateErlangCode(ErlangCodeStream ecs,Vars vars) {
    //Return needs possible truncation
    MethodImpl m = getContextMethod();
    Type lht = getModel().getUnitType();
    if (m != null) { lht = m.getMethodSig().getReturnType().getType(); }
    boolean isNewDC = lht.isDeploymentComponentType()
        && getRetExp() instanceof NewExp;
    if (isNewDC) {
      StringWriter sw = new StringWriter();
      ErlangCodeStream buffer = new ErlangCodeStream(new WriterOutputStream(sw, Charset.forName("UTF-8")),ecs.getIndent());
      getRetExp().generateErlangCode(buffer,vars);
      buffer.close();
      // won't class with any variable because UPPERCASE
      String varName = vars.inc("TEMP");
      ecs.format("%s = %s", varName,sw.toString().substring(ecs.getIndent().length()));
      ecs.println(",");
      ecs.format("eventstream:event({newdc, %s})", varName);
      ecs.println(",");
      ecs.print(varName);
    } else {
      boolean needTrunc=lht.isIntType() && getRetExp().getType().isRatType();
      if (needTrunc) { ecs.print("rationals:trunc("); }
      getRetExp().generateErlangCode(ecs, vars);
      if (needTrunc) { ecs.print(")"); }
    }
  }

  @Override
  public void SyncCall.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    final List<PureExp> params = getParams();
    ecs.print("(fun(O=#object{class=T,cog =C}) when C=:=Cog -> object:alive(O),T end(");
    getCallee().generateErlangCode(ecs,vars);
    ecs.format(")):'m_%s'",getMethod());
    ErlUtil.argumentList(ecs,getCallee(),false,true,params,vars);
  }

  @Override
  public void AsyncCall.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    ecs.print("future:start(");
    getCallee().generateErlangCode(ecs,vars);
    ecs.format(",'m_%s',",getMethod());
    ErlUtil.buildParams(ecs,getParams(),vars,true);
    ecs.print(")");
  }

  @Override
  public void VarUse.generateErlangCode(ErlangCodeStream ecs,Vars vars) {
     ecs.print(vars.get(getName()));
  }

  @Override
  public void StringLiteral.generateErlangCode(ErlangCodeStream ecs,Vars vars) {
      String content = getContent();
      StringBuilder result = new StringBuilder();
      for (char c : content.toCharArray()) {
          switch (c) {
          case '\\' : result.append("\\\\"); break;
          case '"' : result.append("\\\""); break;
          default: result.append(c);
          }
      }
      ecs.print('"' + result.toString() + '"');
  }

  @Override
  public void IntLiteral.generateErlangCode(ErlangCodeStream ecs,Vars vars) {
    ecs.print( getContent());
  }
  
  @Override
  public void NullExp.generateErlangCode(ErlangCodeStream ecs,Vars vars) {
    ecs.print( "null");
  }

  @Override
  public void AndBoolExp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    ecs.print("(");
    getLeft().generateErlangCode(ecs,vars);
    ecs.print(") and (");
    getRight().generateErlangCode(ecs,vars);
    ecs.print(")");
  }

  @Override
  public void OrBoolExp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    ecs.print("(");
    getLeft().generateErlangCode(ecs,vars);
    ecs.print(") or (");
    getRight().generateErlangCode(ecs,vars);
    ecs.print(")");
  }

  @Override
  public void NegExp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    ecs.print("not (");
    getOperand().generateErlangCode(ecs,vars);
    ecs.print(")");
  }

  @Override
  public void IfStmt.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    //Parse if to case, needs to branch and merge variable scoops
    Vars left=vars.pass();
    Vars right=vars.pass();
    StringWriter sw = new StringWriter();
    ErlangCodeStream buffer = new ErlangCodeStream(new WriterOutputStream(sw, Charset.forName("UTF-8")),ecs.getIndent());
    ecs.print("case ");
    getCondition().generateErlangCode(ecs,vars);
    ecs.println(" of");
    ecs.incIndent();
    ecs.print("true -> ");
    getThen().generateErlangCode(ecs,left);
    if(hasElse())
      getElse().generateErlangCode(buffer,right);
    else
      buffer.print("ok");
    java.util.List<String> mergeLines = vars.merge(Lists.newArrayList(left,right));
    ecs.print(mergeLines.get(0));
    ecs.println(";");
    ecs.print("false -> ");
    buffer.close();
    ecs.print(sw);
    ecs.println(mergeLines.get(1));
    ecs.decIndent();
    ecs.print("end");
  }

  @Override
  public void IfExp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    ecs.print("case ");
    getCondExp().generateErlangCode(ecs,vars);
    ecs.println(" of");
    ecs.incIndent();
    ecs.print("true -> ");
    getThenExp().generateErlangCode(ecs,vars);
    ecs.println(";");
    ecs.print("false -> ");
    getElseExp().generateErlangCode(ecs,vars);
    ecs.println();
    ecs.decIndent();
    ecs.print("end");
  }

  @Override
  public void AssertStmt.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    ecs.print("(true=");
    getCondition().generateErlangCode(ecs,vars);
    ecs.print(")");
  }

  @Override
  public void SkipStmt.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    ecs.print("skip");
  }
  
  @Override
  public void GTExp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    ecs.print("cmp:gt(");
    getLeft().generateErlangCode(ecs,vars);
    ecs.print(",");
    getRight().generateErlangCode(ecs,vars);
    ecs.print(")");
  }
  
  @Override
  public void LTExp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    ecs.print("cmp:lt(");
    getLeft().generateErlangCode(ecs,vars);
    ecs.print(",");
    getRight().generateErlangCode(ecs,vars);
    ecs.print(")");
  }

  @Override
  public void LTEQExp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    ecs.print("cmp:le(");
    getLeft().generateErlangCode(ecs,vars);
    ecs.print(",");
    getRight().generateErlangCode(ecs,vars);
    ecs.print(")");
  }

  @Override
  public void GTEQExp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    ecs.print("cmp:ge(");
    getLeft().generateErlangCode(ecs,vars);
    ecs.print(",");
    getRight().generateErlangCode(ecs,vars);
    ecs.print(")");
  }

  @Override
  public void EqExp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    ecs.print("cmp:eq(");
    getLeft().generateErlangCode(ecs,vars);
    ecs.print(",");
    getRight().generateErlangCode(ecs,vars);
    ecs.print(")");
  }
  
  @Override
  public void NotEqExp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    ecs.print("(not cmp:eq(");
    getLeft().generateErlangCode(ecs,vars);
    ecs.print(",");
    getRight().generateErlangCode(ecs,vars);
    ecs.print("))");
  }

  @Override
  public void MinusExp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    if (getOperand().getType().isIntType())
      ecs.print("( - ");
    else
      ecs.print("rationals:neg( ");
    getOperand().generateErlangCode(ecs,vars);
    ecs.print(")");
  }

  @Override
  public void AddAddExp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    if (this.getType().isStringType()){
      getLeft().generateErlangCode(ecs, vars);
      ecs.print(" ++ ");
      getRight().generateErlangCode(ecs, vars);
    }
    else {
      if (getLeft().getType().isIntType() && getRight().getType().isIntType() ){
        getLeft().generateErlangCode(ecs, vars);
        ecs.print(" + ");
        getRight().generateErlangCode(ecs, vars);
      }
      else {
        ecs.print(" rationals:fast_add(rationals:to_r(");
        getLeft().generateErlangCode(ecs,vars);
        ecs.print("),rationals:to_r(");
        getRight().generateErlangCode(ecs,vars);
        ecs.print(")) ");
      }
    }
  }

  @Override
  public void SubAddExp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    if (getLeft().getType().isIntType() && getRight().getType().isIntType() ){
        getLeft().generateErlangCode(ecs,vars);
        ecs.print(" - ");
        getRight().generateErlangCode(ecs,vars);}
    else{
      ecs.print(" rationals:fast_sub(rationals:to_r(");
      getLeft().generateErlangCode(ecs,vars);
      ecs.print("),rationals:to_r(");
      getRight().generateErlangCode(ecs,vars);
      ecs.print(")) ");
    }
  }
  
  @Override
  public void MultMultExp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    if (getLeft().getType().isIntType() && getRight().getType().isIntType() ) {
      getLeft().generateErlangCode(ecs,vars);
      ecs.print(" * ");
      getRight().generateErlangCode(ecs,vars);
    }
    else {
      ecs.print(" rationals:fast_mul(rationals:to_r(");
      getLeft().generateErlangCode(ecs,vars);
      ecs.print("),rationals:to_r(");
      getRight().generateErlangCode(ecs,vars);
      ecs.print(")) ");
    }
  }
  
  @Override
  public void DivMultExp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    ecs.print(" rationals:fast_div(rationals:to_r(");
    getLeft().generateErlangCode(ecs,vars);
    ecs.print("),rationals:to_r(");
    getRight().generateErlangCode(ecs,vars);
    ecs.print(")) ");
  }

  @Override
  public void ModMultExp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    getLeft().generateErlangCode(ecs,vars);
    ecs.print(" rem ");
    getRight().generateErlangCode(ecs,vars);
  }

  @Override
  public void LetExp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    ecs.print("(fun (V_"+getVar().getName()+"_0)->");
    Vars v=vars.pass();
    v.nVignoreOverload(getVar());
    getExp().generateErlangCode(ecs,v);
    ecs.print(" end(");
    boolean needTrunc=getVar().getType().isIntType() && getVal().getType().isRatType();
    if (needTrunc)
      ecs.print("rationals:trunc(");
    getVal().generateErlangCode(ecs,vars);
    if (needTrunc)
      ecs.print(")");
    ecs.print("))");
  }

  @Override
  public void ThisExp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    //Current object reference is always mapped to O
    ecs.print("O");
  }

  @Override
  public void FieldUse.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    ecs.format("get(O,%s)",getName());
  }

  @Override
  public void CaseStmt.generateErlangCode(ErlangCodeStream ecs, Vars vars) {
      Vars safe = vars.pass();
      // Build var scopes and statmemnts for each branch
      java.util.List<Vars> branches_vars = new LinkedList<Vars>();
      java.util.List<String> branches = new LinkedList<String>();
      for (CaseBranchStmt b : getBranchs()) {
          Vars v = vars.pass();
          StringWriter sw = new StringWriter();
          ErlangCodeStream buffer = new ErlangCodeStream(new WriterOutputStream(sw, Charset.forName("UTF-8")),"");
          b.getLeft().generateErlangCode(ecs, buffer, v);
          buffer.setIndent(ecs.getIndent());
          buffer.println("->");
          buffer.incIndent();
          b.getRight().generateErlangCode(buffer, v);
          buffer.decIndent();
          buffer.close();
          branches_vars.add(v);
          branches.add(sw.toString());
          vars.updateTemp(v);
      }
      ecs.print("case ");
      getExpr().generateErlangCode(ecs, safe);
      ecs.incIndent().println(" of");
      // Now print statments and mergelines for each branch.
      java.util.List<String> mergeLines = vars.merge(branches_vars);
      boolean first = true;
      Iterator<String> ib = branches.iterator();
      Iterator<String> im = mergeLines.iterator();
      while (ib.hasNext()) {
          if (!first)
              ecs.println(";");
          first = false;
          ecs.print(ib.next());
          ecs.print(im.next());
      }
      ecs.println();
      ecs.decIndent();
      ecs.print("end");
  }

  @Override
  public void TryCatchFinallyStmt.generateErlangCode(ErlangCodeStream ecs, Vars vars) {
      // Build var scopes and statmemnts for each branch
      java.util.List<Vars> branches_vars = new LinkedList<Vars>();
      java.util.List<String> branches = new LinkedList<String>();
      ecs.println("try");
      ecs.incIndent();
      getBody().generateErlangCode(ecs, vars);
      ecs.decIndent().println();
      ecs.println("catch");
      ecs.incIndent();
      for (CaseBranchStmt b : getCatchs()) {
          Vars v = vars.pass();
          StringWriter sw = new StringWriter();
          ErlangCodeStream buffer = new ErlangCodeStream(new WriterOutputStream(sw, Charset.forName("UTF-8")),"");
          buffer.print("_:");
          b.getLeft().generateErlangCode(ecs, buffer, v);
          buffer.setIndent(ecs.getIndent());
          buffer.println("->");
          buffer.incIndent();
          b.getRight().generateErlangCode(buffer, v);
          buffer.decIndent();
          buffer.close();
          branches_vars.add(v);
          branches.add(sw.toString());
          vars.updateTemp(v);
      }
      // Now print statments and mergelines for each branch.
      java.util.List<String> mergeLines = vars.merge(branches_vars);
      boolean first = true;
      Iterator<String> ib = branches.iterator();
      Iterator<String> im = mergeLines.iterator();
      while (ib.hasNext()) {
          if (!first)
              ecs.println(";");
          first = false;
          ecs.print(ib.next());
          ecs.print(im.next());
      }
      ecs.println();
      ecs.decIndent();
      if (hasFinally()) {
          ecs.println("after");
          ecs.incIndent();
          getFinally().generateErlangCode(ecs, vars);
          ecs.decIndent();
          ecs.println();
      }
      ecs.print("end");
  }

  @Override
  public void CaseExp.generateErlangCode(ErlangCodeStream external,Vars vars){
    //Needs this external stream
    external.println("begin");
    external.incIndent();
    StringWriter sw = new StringWriter();
    ErlangCodeStream ecs = new ErlangCodeStream(new WriterOutputStream(sw, Charset.forName("UTF-8")),"");
    ecs.print("case ");
    ecs.setIndent(external.getIndent());
    getExpr().generateErlangCode(ecs, vars);
    ecs.println(" of ");
    ecs.incIndent();
    boolean first = true;
    for (CaseBranch b : getBranchs()) {
        Vars v = vars.pass();
        if (!first)
            ecs.println(";");
        first = false;
        b.getLeft().generateErlangCode(external, ecs, v);
        ecs.print("->");
        b.getRight().generateErlangCode(ecs, v);
        vars.hideIntroduced(v);
    }
    ecs.println();
    ecs.decIndent();
    ecs.print("end");
    ecs.close();
    external.println(sw.toString());
    external.decIndent();
    external.print("end");
  }

  public abstract void Pattern.generateErlangCode(ErlangCodeStream prePattern,ErlangCodeStream ecs,Vars vars);

  @Override
  public void PatternVar.generateErlangCode(ErlangCodeStream prePattern,ErlangCodeStream ecs,Vars vars){
      ecs.print(vars.nV(getVar()));
  }

  @Override
  public void PatternVarUse.generateErlangCode(ErlangCodeStream prePattern,ErlangCodeStream ecs,Vars vars){
     if(vars.containsKey(getName()))
       ecs.print(vars.get(getName()));
     else{
       String tmp=vars.getTemp();
       prePattern.pf("%s=get(O,%s),",tmp,getName());
       ecs.print(tmp);
     }
  }

  @Override
  public void LiteralPattern.generateErlangCode(ErlangCodeStream prePattern,ErlangCodeStream ecs,Vars vars){
    getLiteral().generateErlangCode(ecs,vars);
  }

  @Override
  public void ConstructorPattern.generateErlangCode(ErlangCodeStream prePattern,ErlangCodeStream ecs,Vars vars){
    //Handling for bool
    final String c = getDataConstructor().getName();
    if("True".equals(c) || "False".equals(c))
      ecs.print(c.toLowerCase());
    else{
      if(getParams().getNumChild() > 0)
        ecs.print("{");
      ecs.print("data");
      ecs.print(c);
      for (Pattern p : getParams()) {
        ecs.print(",");
        p.generateErlangCode(prePattern,ecs,vars);
      }
      if(getParams().getNumChild() > 0)
        ecs.print("}");
    }
  }

  public void UnderscorePattern.generateErlangCode(ErlangCodeStream prePattern,ErlangCodeStream ecs,Vars vars){
    ecs.print("_");
  }

  public void DataConstructorExp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    //Handling for bool
    final String c = getDataConstructor().getName();
    if("True".equals(c) || "False".equals(c))
      ecs.print(c.toLowerCase());
    else{
      if(getParams().getNumChild() > 0)
        ecs.print("{");
      ecs.print("data");
      ecs.print(c);
      for (PureExp p : getParams()) {
        ecs.print(",");
        p.generateErlangCode(ecs,vars);
      }
      if(getParams().getNumChild() > 0)
        ecs.print("}");
      }
  }

  public void SuspendStmt.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    ecs.println("task:release_token(Cog,runnable),");
    ecs.print("task:acquire_token(Cog,");
    ecs.print(vars.toStack());
    ecs.print(")");
  }
  public void AwaitStmt.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    StringWriter sw = new StringWriter();
    ErlangCodeStream after = new ErlangCodeStream(new WriterOutputStream(sw, Charset.forName("UTF-8")),ecs.getIndent());
    ecs.println("task:release_token(Cog,waiting),");
    getGuard().generateErlangCode(ecs,after,vars);
    after.close();
    if(getGuard().hasPoll()){
      ecs.println("task:wait_poll(Cog),");
      ecs.pf("((fun(Inner)->fun(Param)->Inner(Inner,Param) end end)(fun (Self,%s)->",vars.toParamList());
      ecs.println("receive check -> ");
      ecs.incIndent().pf("case %s of",sw);
      ecs.incIndent().println("true -> CogRef!{self(),true},");
      ecs.incIndent().pf("receive wait -> Self(Self,%s);",vars.toParamList());
      ecs.println("token -> ok end;");
      ecs.decIndent().pf("false -> CogRef!{self(),false},  Self(Self,%s)",vars.toParamList());
      ecs.decIndent().decIndent().println("end end end))");
      ecs.format("(%s)",vars.toParamList());
    }
    else {
      ecs.print("task:acquire_token(Cog,");
      ecs.print(vars.toStack());
      ecs.print(")");
    }
  }

  public void Guard.generateErlangCode(ErlangCodeStream preAwait,ErlangCodeStream ecs,Vars vars){
    throw new NotImplementedYetException(this);
  }

  public boolean Guard.hasPoll(){
    throw new NotImplementedYetException(this);
  }

  @Override
  public boolean AndGuard.hasPoll(){
    return getLeft().hasPoll()||getRight().hasPoll();
  }

  @Override
  public boolean ExpGuard.hasPoll(){
    return true;
  }

  @Override
  public boolean ClaimGuard.hasPoll(){
      return getVar() instanceof FieldUse;
  }

  @Override
  public boolean DurationGuard.hasPoll(){
      return false;
  }

  @Override
  public void AndGuard.generateErlangCode(ErlangCodeStream preAwait,ErlangCodeStream ecs,Vars vars){
    getLeft().generateErlangCode( preAwait, ecs, vars);
    if(getLeft().hasPoll()&&getRight().hasPoll())
      ecs.print(" andalso ");
    getRight().generateErlangCode( preAwait, ecs, vars) ;
  }

  @Override
  public void ClaimGuard.generateErlangCode(ErlangCodeStream preAwait,ErlangCodeStream ecs,Vars vars){
    PureExp var = getVar();
    if (var instanceof FieldUse) {
        ecs.print("future:poll(");
        var.generateErlangCode(ecs,vars);
        ecs.print(")");
    } else {
        preAwait.print("future:await(");
        var.generateErlangCode(preAwait,vars);
        preAwait.print(", Cog, ");
        preAwait.print(vars.toStack());
        preAwait.println("),");
        if (var instanceof VarUse) {
            vars.await(((VarUse) var).getName());
        }
    }
  }

  @Override
  public void ExpGuard.generateErlangCode(ErlangCodeStream preAwait,ErlangCodeStream ecs,Vars vars){
    getPureExp().generateErlangCode(ecs,vars);
  }

  @Override
  public void DurationGuard.generateErlangCode(ErlangCodeStream preAwait, ErlangCodeStream ecs, Vars vars) {
      preAwait.print("task:await_duration(Cog,");
      getMin().generateErlangCode(preAwait, vars);
      preAwait.print(",");
      getMax().generateErlangCode(preAwait, vars);
      preAwait.print(",");
      preAwait.print(vars.toStack());
      preAwait.println("),");
  }

  @Override
  public void GetExp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    PureExp future = getPureExp();

    if (future instanceof VarUse && !vars.canBlock(((VarUse) future).getName())) {
      ecs.print("future:get(");
    } else {
      ecs.print("future:get_blocking(");
    }

    future.generateErlangCode(ecs,vars);

    if (!(future instanceof VarUse) || vars.canBlock(((VarUse) future).getName())) {
        ecs.print(", Cog, ");
        ecs.print(vars.toStack());
    }
    ecs.print(")");
  }

  @Override
  public void SafegetExp.generateErlangCode(ErlangCodeStream ecs,Vars vars){
    ecs.print("future:safeget(");
    getPureExp().generateErlangCode(ecs,vars);
    ecs.print(")");
  }

  @Override
  public void WhileStmt.generateErlangCode(ErlangCodeStream ecs, Vars vars) {
    String va = vars.toParamList();
    Vars save=vars.pass();
    vars.incAll();
    ecs.pf("%s=((fun(Inner)->fun(Param)->Inner(Inner,Param) end end)(fun (Self,%s)->",vars.toParamList(), va);
    ecs.incIndent().print("case ");
    getCondition().generateErlangCode(ecs, save);
    ecs.println(" of ");
    ecs.print("false ->");
    ecs.incIndent().print(va);
    ecs.print(";");
    ecs.decIndent().print("true ->");
    ecs.incIndent();
    ErlUtil.stopWorldPrelude(ecs, save, false);
    getBody().generateErlangCode(ecs, save);
    ecs.println(",");
    save.retainAll(vars);
    ecs.decIndent().pf("Self(Self,%s)  end end))", save.toParamList());
    ecs.decIndent().format("(%s)",va);
  }

  // We discriminate between throw and exit: throw terminates the
  // process, exit kills the process.  They correspond to Abs
  // throw-statements and die-statements and unexpected errors,
  // respectively.  All otherwise-uncaught Erlang-level throw()s and
  // exit()s are handled in a top-level Erlang try-catch around the
  // method body.  During any changes in the error-handling
  // implementation you might need to adapt the implementation of
  // future.get as well (rudi)
  @Override
  public void ThrowStmt.generateErlangCode(ErlangCodeStream ecs, Vars vars) {
    ecs.print("throw(");
    getReason().generateErlangCode( ecs,  vars);
    ecs.print(")");
  }

  @Override
  public void DieStmt.generateErlangCode(ErlangCodeStream ecs, Vars vars) {
    ecs.print("exit(");
    getReason().generateErlangCode( ecs,  vars);
    ecs.print(")");
  }

  @Override
  public void DurationStmt.generateErlangCode(ErlangCodeStream ecs, Vars vars) {
      ecs.print("task:block_for_duration(Cog,");
      getMin().generateErlangCode(ecs, vars);
      ecs.print(",");
      getMax().generateErlangCode(ecs, vars);
      ecs.print(",");
      ecs.print(vars.toStack());
      ecs.print(")");
  }

}

